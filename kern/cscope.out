cscope 15 $HOME/oslight-master/kern               0000707385
	@arch/mips/include/current.h

30 #i‚de‡
_MIPS_CURRENT_H_


31 
	#_MIPS_CURRENT_H_


	)

62 #ifde‡
__GNUC__


63 
thªad
 *
cuπhªad
 
__asm
("$23");

67 #unde‡
__NEED_CURTHREAD


68 
	#__NEED_CURCPU


	)

71 
	#INIT_CURCPU
(
˝u
, 
thªad
Ë(
cuπhªad
 = (thªad), 
cur˝u
 = (˝u))

	)

	@arch/mips/include/elf.h

30 #i‚de‡
_MIPS_ELF_H_


31 
	#_MIPS_ELF_H_


	)

39 
	#EM_MACHINE
 
EM_MIPS


	)

42 
	#R_MIPS_NONE
 0

	)

43 
	#R_MIPS_16
 1

	)

44 
	#R_MIPS_32
 2

	)

45 
	#R_MIPS_REL32
 3

	)

46 
	#R_MIPS_26
 4

	)

47 
	#R_MIPS_HI16
 5

	)

48 
	#R_MIPS_LO16
 6

	)

49 
	#R_MIPS_GPREL16
 7

	)

50 
	#R_MIPS_LITERAL
 8

	)

51 
	#R_MIPS_GOT16
 9

	)

52 
	#R_MIPS_PC16
 10

	)

53 
	#R_MIPS_CALL16
 11

	)

54 
	#R_MIPS_GPREL32
 12

	)

	@arch/mips/include/kern/endian.h

30 #i‚de‡
_KERN_MIPS_ENDIAN_H_


31 
	#_KERN_MIPS_ENDIAN_H_


	)

42 
	#_BYTE_ORDER
 
_BIG_ENDIAN


	)

	@arch/mips/include/kern/regdefs.h

36 #i‚de‡
_KERN_MIPS_REGDEFS_H_


37 
	#_KERN_MIPS_REGDEFS_H_


	)

40 
	#z0
 
$0


	)

41 
	#AT
 
$1


	)

42 
	#v0
 
$2


	)

43 
	#v1
 
$3


	)

44 
	#a0
 
$4


	)

45 
	#a1
 
$5


	)

46 
	#a2
 
$6


	)

47 
	#a3
 
$7


	)

48 
	#t0
 
$8


	)

49 
	#t1
 
$9


	)

50 
	#t2
 
$10


	)

51 
	#t3
 
$11


	)

52 
	#t4
 
$12


	)

53 
	#t5
 
$13


	)

54 
	#t6
 
$14


	)

55 
	#t7
 
$15


	)

56 
	#s0
 
$16


	)

57 
	#s1
 
$17


	)

58 
	#s2
 
$18


	)

59 
	#s3
 
$19


	)

60 
	#s4
 
$20


	)

61 
	#s5
 
$21


	)

62 
	#s6
 
$22


	)

63 
	#s7
 
$23


	)

64 
	#t8
 
$24


	)

65 
	#t9
 
$25


	)

66 
	#k0
 
$26


	)

67 
	#k1
 
$27


	)

68 
	#gp
 
$28


	)

69 
	#•
 
$29


	)

70 
	#s8
 
$30


	)

71 
	#ø
 
$31


	)

	@arch/mips/include/kern/setjmp.h

30 #i‚de‡
_MIPS_SETJMP_H_


31 
	#_MIPS_SETJMP_H_


	)

41 
	#__JB_REGS
 11

	)

44 
uöt32_t
 
	tjmp_buf
[
__JB_REGS
];

	@arch/mips/include/kern/signal.h

31 #i‚de‡
_KERN_MIPS_SIGNAL_H_


32 
	#_KERN_MIPS_SIGNAL_H_


	)

41 
	ssigc⁄ãxt
 {

	@arch/mips/include/kern/types.h

30 #i‚de‡
_KERN_MIPS_TYPES_H_


31 
	#_KERN_MIPS_TYPES_H_


	)

43 
	t__i8
;

44 
	t__i16
;

45 
	t__i32
;

46 
	t__i64
;

48 
	t__u8
;

49 
	t__u16
;

50 
	t__u32
;

51 
	t__u64
;

54 
	t__öçå_t
;

55 
	t__uöçå_t
;

65 
	t__size_t
;

66 
	t__ssize_t
;

67 
	t__±rdiff_t
;

69 
	t__size_t
;

70 
	t__ssize_t
;

71 
	t__±rdiff_t
;

75 
	#__CHAR_BIT
 8

	)

	@arch/mips/include/membar.h

30 #i‚de‡
_MIPS_MEMBAR_H_


31 
	#_MIPS_MEMBAR_H_


	)

43 
MEMBAR_INLINE


45 
	$memb¨_™y_™y
()

47 
__asm
 volatile(

55 
	}
}

57 
MEMBAR_INLINE
 
	$memb¨_lﬂd_lﬂd
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

58 
MEMBAR_INLINE
 
	$memb¨_°‹e_°‹e
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

59 
MEMBAR_INLINE
 
	$memb¨_°‹e_™y
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

60 
MEMBAR_INLINE
 
	$memb¨_™y_°‹e
(Ë{ 
	`memb¨_™y_™y
(); 
	}
}

	@arch/mips/include/specialreg.h

30 #i‚de‡
_MIPS_SPECIALREG_H_


31 
	#_MIPS_SPECIALREG_H_


	)

37 
	#c0_ödex
 
$0


	)

38 
	#c0_øndom
 
$1


	)

39 
	#c0_íåylo
 
$2


	)

42 
	#c0_c⁄ãxt
 
$4


	)

45 
	#c0_vaddr
 
$8


	)

46 
	#c0_cou¡
 
$9


	)

47 
	#c0_íåyhi
 
$10


	)

48 
	#c0_com∑ª
 
$11


	)

49 
	#c0_°©us
 
$12


	)

50 
	#c0_ˇu£
 
$13


	)

51 
	#c0_ïc
 
$14


	)

52 
	#c0_¥id
 
$15


	)

61 
	#CST_IEc
 0x00000001

	)

62 
	#CST_KUc
 0x00000002

	)

63 
	#CST_IEp
 0x00000004

	)

64 
	#CST_KUp
 0x00000008

	)

65 
	#CST_IEo
 0x00000010

	)

66 
	#CST_KUo
 0x00000020

	)

67 
	#CST_MODEMASK
 0x0000003‡

	)

68 
	#CST_IRQMASK
 0x0000ff00

	)

69 
	#CST_BEV
 0x00400000

	)

74 
	#CCA_UTLB
 0x00000001

	)

75 
	#CCA_CODE
 0x0000003¯

	)

76 
	#CCA_IRQS
 0x0000ff00

	)

77 
	#CCA_COPN
 0x30000000

	)

78 
	#CCA_JD
 0x80000000

	)

80 
	#CCA_CODESHIFT
 2

	)

85 
	#CIN_P
 0x80000000

	)

86 
	#CIN_INDEX
 0x00003f00

	)

88 
	#CIN_INDEXSHIFT
 8

	)

105 
	#CTX_VSHIFT
 0x001ffff¯

	)

106 
	#CTX_PTBASE
 0xf„00000

	)

108 
	#CTX_PTBASESHIFT
 21

	)

113 
	#EXADDR_UTLB
 0x80000000

	)

114 
	#EXADDR_GENERAL
 0x80000080

	)

	@arch/mips/include/spinlock.h

30 #i‚de‡
_MIPS_SPINLOCK_H_


31 
	#_MIPS_SPINLOCK_H_


	)

33 
	~<cdefs.h
>

37 
	t•ölock_d©a_t
;

40 
	#SPINLOCK_DATA_INITIALIZER
 0

	)

43 
SPINLOCK_INLINE


44 
•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
);

45 
SPINLOCK_INLINE


46 
•ölock_d©a_t
 
•ölock_d©a_gë
(vﬁ©ûê•ölock_d©a_à*
sd
);

47 
SPINLOCK_INLINE


48 
•ölock_d©a_t
 
•ölock_d©a_ã°™d£t
(vﬁ©ûê•ölock_d©a_à*
sd
);

57 
SPINLOCK_INLINE


59 
	$•ölock_d©a_£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
, 
vÆ
)

61 *
sd
 = 
vÆ
;

62 
	}
}

68 
SPINLOCK_INLINE


69 
•ölock_d©a_t


70 
	$•ölock_d©a_gë
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

72  *
sd
;

73 
	}
}

88 
SPINLOCK_INLINE


89 
•ölock_d©a_t


90 
	$•ölock_d©a_ã°™d£t
(vﬁ©ûê
•ölock_d©a_t
 *
sd
)

92 
•ölock_d©a_t
 
x
;

93 
•ölock_d©a_t
 
y
;

106 
y
 = 1;

107 
__asm
 volatile(

114 : "=&r" (
x
), "+r" (
y
Ë: "r" (
sd
));

115 i‡(
y
 == 0) {

118  
x
;

119 
	}
}

	@arch/mips/include/thread.h

30 #i‚de‡
_MIPS_THREAD_H_


31 
	#_MIPS_THREAD_H_


	)

38 
	~<£tjmp.h
>

40 (*
	tbadÁu…func_t
)();

42 
	sthªad_machdï
 {

43 
badÁu…func_t
 
tm_badÁu…func
;

44 
jmp_buf
 
tm_c›yjmp
;

	@arch/mips/include/tlb.h

30 #i‚de‡
_MIPS_TLB_H_


31 
	#_MIPS_TLB_H_


	)

58 
éb_øndom
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

59 
éb_wrôe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
, uöt32_à
ödex
);

60 
éb_ªad
(
uöt32_t
 *
íåyhi
, uöt32_à*
íåylo
, uöt32_à
ödex
);

61 
éb_¥obe
(
uöt32_t
 
íåyhi
, uöt32_à
íåylo
);

80 
	#TLBHI_VPAGE
 0xfffff000

	)

84 
	#TLBLO_PPAGE
 0xfffff000

	)

85 
	#TLBLO_NOCACHE
 0x00000800

	)

86 
	#TLBLO_DIRTY
 0x00000400

	)

87 
	#TLBLO_VALID
 0x00000200

	)

95 
	#TLBHI_INVALID
(
íåyno
Ë((0x80000+”¡ryno))<<12)

	)

96 
	#TLBLO_INVALID
(Ë(0)

	)

102 
	#NUM_TLB
 64

	)

	@arch/mips/include/trapframe.h

30 #i‚de‡
_MIPS_TRAPFRAME_H_


31 
	#_MIPS_TRAPFRAME_H_


	)

40 
	så≠‰ame
 {

41 
uöt32_t
 
	mtf_vaddr
;

42 
uöt32_t
 
	mtf_°©us
;

43 
uöt32_t
 
	mtf_ˇu£
;

44 
uöt32_t
 
	mtf_lo
;

45 
uöt32_t
 
	mtf_hi
;

46 
uöt32_t
 
	mtf_ø
;

47 
uöt32_t
 
	mtf_©
;

48 
uöt32_t
 
	mtf_v0
;

49 
uöt32_t
 
	mtf_v1
;

50 
uöt32_t
 
	mtf_a0
;

51 
uöt32_t
 
	mtf_a1
;

52 
uöt32_t
 
	mtf_a2
;

53 
uöt32_t
 
	mtf_a3
;

54 
uöt32_t
 
	mtf_t0
;

55 
uöt32_t
 
	mtf_t1
;

56 
uöt32_t
 
	mtf_t2
;

57 
uöt32_t
 
	mtf_t3
;

58 
uöt32_t
 
	mtf_t4
;

59 
uöt32_t
 
	mtf_t5
;

60 
uöt32_t
 
	mtf_t6
;

61 
uöt32_t
 
	mtf_t7
;

62 
uöt32_t
 
	mtf_s0
;

63 
uöt32_t
 
	mtf_s1
;

64 
uöt32_t
 
	mtf_s2
;

65 
uöt32_t
 
	mtf_s3
;

66 
uöt32_t
 
	mtf_s4
;

67 
uöt32_t
 
	mtf_s5
;

68 
uöt32_t
 
	mtf_s6
;

69 
uöt32_t
 
	mtf_s7
;

70 
uöt32_t
 
	mtf_t8
;

71 
uöt32_t
 
	mtf_t9
;

72 
uöt32_t
 
	mtf_gp
;

73 
uöt32_t
 
	mtf_•
;

74 
uöt32_t
 
	mtf_s8
;

75 
uöt32_t
 
	mtf_ïc
;

81 
	#EX_IRQ
 0

	)

82 
	#EX_MOD
 1

	)

83 
	#EX_TLBL
 2

	)

84 
	#EX_TLBS
 3

	)

85 
	#EX_ADEL
 4

	)

86 
	#EX_ADES
 5

	)

87 
	#EX_IBE
 6

	)

88 
	#EX_DBE
 7

	)

89 
	#EX_SYS
 8

	)

90 
	#EX_BP
 9

	)

91 
	#EX_RI
 10

	)

92 
	#EX_CPU
 11

	)

93 
	#EX_OVF
 12

	)

99 
__DEAD
 
mùs_u£rmode
(
å≠‰ame
 *
tf
);

104 
vaddr_t
 
˝u°acks
[];

105 
vaddr_t
 
˝uthªads
[];

	@arch/mips/include/types.h

30 #i‚de‡
_MIPS_TYPES_H_


31 
	#_MIPS_TYPES_H_


	)

43 
__u32
 
	t∑ddr_t
;

44 
__u32
 
	tvaddr_t
;

	@arch/mips/include/vm.h

30 #i‚de‡
_MIPS_VM_H_


31 
	#_MIPS_VM_H_


	)

38 
	#PAGE_SIZE
 4096

	)

39 
	#PAGE_FRAME
 0xfffff000

	)

51 
	#MIPS_KUSEG
 0x00000000

	)

52 
	#MIPS_KSEG0
 0x80000000

	)

53 
	#MIPS_KSEG1
 0xa0000000

	)

54 
	#MIPS_KSEG2
 0xc0000000

	)

68 
	#PADDR_TO_KVADDR
(
∑ddr
Ë(’addr)+
MIPS_KSEG0
)

	)

74 
	#USERSPACETOP
 
MIPS_KSEG0


	)

84 
	#USERSTACK
 
USERSPACETOP


	)

108 
øm_boŸ°øp
();

109 
∑ddr_t
 
øm_°ólmem
(
≈ages
);

110 
∑ddr_t
 
øm_gësize
();

111 
∑ddr_t
 
øm_gëfú°‰ì
();

119 
	sébshoŸdown
 {

123 
	mts_∂a˚hﬁdî
;

126 
	#TLBSHOOTDOWN_MAX
 16

	)

	@arch/mips/locore/cache-mips161.S

30 
	~<kîn/mùs/ªgdefs.h
>

40 .
	gãxt


41 .
£t
 
	gn‹e‹dî


43 .
globl
 
	gmùs_Êushiˇche


44 .
ty≥
 
	gmùs_Êushiˇche
,@
	gfun˘i⁄


45 .
ít
 
mùs_Êushiˇche


46 
	gmùs_Êushiˇche
:

47 
j
 
ø


48 
n›


49 .
íd
 
mùs_Êushiˇche


	@arch/mips/locore/exception-mips1.S

30 
	~<kîn/mùs/ªgdefs.h
>

31 
	~<mùs/•ecüÃeg.h
>

45 .
£t
 
	gnﬂt


46 .
£t
 
	gn‹e‹dî


64 .
	gãxt


65 .
globl
 
	gmùs_uéb_h™dÀr


66 .
ty≥
 
	gmùs_uéb_h™dÀr
,@
	gfun˘i⁄


67 .
ít
 
mùs_uéb_h™dÀr


68 
	gmùs_uéb_h™dÀr
:

69 
j
 
comm⁄_ex˚±i⁄


70 
n›


71 .
globl
 
mùs_uéb_íd


72 
mùs_uéb_íd
:

73 .
íd
 
mùs_uéb_h™dÀr


82 .
ãxt


83 .
globl
 
mùs_gíîÆ_h™dÀr


84 .
ty≥
 
mùs_gíîÆ_h™dÀr
,@
	gfun˘i⁄


85 .
ít
 
mùs_gíîÆ_h™dÀr


86 
	gmùs_gíîÆ_h™dÀr
:

87 
j
 
comm⁄_ex˚±i⁄


88 
n›


89 .
globl
 
mùs_gíîÆ_íd


90 
mùs_gíîÆ_íd
:

91 .
íd
 
mùs_gíîÆ_h™dÀr


94 
n›


101 .
ãxt


102 .
ty≥
 
comm⁄_ex˚±i⁄
,@
	gfun˘i⁄


103 .
ít
 
	gcomm⁄_ex˚±i⁄


104 .
	gcfi_°¨çroc


105 .
cfi_sig«l_‰ame


106 
	gcomm⁄_ex˚±i⁄
:

107 
mfc0
 
k0
, 
c0_°©us


108 
™di
 
	gk0
, k0, 
CST_KUp


109 
beq
 
	gk0
, 
	g$0
, 1f

110 
n›


113 
mfc0
 
	gk1
, 
c0_c⁄ãxt


114 
§l
 
	gk1
, k1, 
CTX_PTBASESHIFT


115 
¶l
 
	gk1
, k1, 2

116 
lui
 
	gk0
, %
	$hi
(
˝u°acks
)

117 
addu
 
k0
, k0, 
k1


118 
move
 
k1
, 
•


119 
b
 2f

120 
lw
 
•
, %
	$lo
(
˝u°acks
)(
k0
)

123 
move
 
k1
, 
•


139 
addi
 
•
, sp, -160

140 .
cfi_def_cÁ
 
•
, 0

166 
sw
 
s8
, 148(
•
)

167 .
cfi_off£t
 
s8
, 148

168 
sw
 
k1
, 144(
•
)

169 .
cfi_off£t
 
•
, 144

170 
sw
 
gp
, 140(
•
)

171 
n›


172 .
cfi_off£t
 
gp
, 140

174 .
cfi_ªtu∫_cﬁumn
 
k1


175 
mfc0
 
k1
, 
c0_ïc


176 
sw
 
k1
, 152(
•
)

177 .
cfi_off£t
 
k1
, 152

179 
sw
 
t9
, 136(
•
)

180 .
cfi_off£t
 
t9
, 136

181 
sw
 
t8
, 132(
•
)

182 .
cfi_off£t
 
t8
, 132

183 
sw
 
s7
, 128(
•
)

184 .
cfi_off£t
 
s7
, 128

185 
sw
 
s6
, 124(
•
)

186 .
cfi_off£t
 
s6
, 124

187 
sw
 
s5
, 120(
•
)

188 .
cfi_off£t
 
s5
, 120

189 
sw
 
s4
, 116(
•
)

190 .
cfi_off£t
 
s4
, 116

191 
sw
 
s3
, 112(
•
)

192 .
cfi_off£t
 
s3
, 112

193 
sw
 
s2
, 108(
•
)

194 .
cfi_off£t
 
s2
, 108

195 
sw
 
s1
, 104(
•
)

196 .
cfi_off£t
 
s1
, 104

197 
sw
 
s0
, 100(
•
)

198 .
cfi_off£t
 
s0
, 100

199 
sw
 
t7
, 96(
•
)

200 .
cfi_off£t
 
t7
, 96

201 
sw
 
t6
, 92(
•
)

202 .
cfi_off£t
 
t6
, 92

203 
sw
 
t5
, 88(
•
)

204 .
cfi_off£t
 
t5
, 88

205 
sw
 
t4
, 84(
•
)

206 .
cfi_off£t
 
t4
, 84

207 
sw
 
t3
, 80(
•
)

208 .
cfi_off£t
 
t3
, 80

209 
sw
 
t2
, 76(
•
)

210 .
cfi_off£t
 
t2
, 76

211 
sw
 
t1
, 72(
•
)

212 .
cfi_off£t
 
t1
, 72

213 
sw
 
t0
, 68(
•
)

214 .
cfi_off£t
 
t0
, 68

215 
sw
 
a3
, 64(
•
)

216 .
cfi_off£t
 
a3
, 64

217 
sw
 
a2
, 60(
•
)

218 .
cfi_off£t
 
a2
, 60

219 
sw
 
a1
, 56(
•
)

220 .
cfi_off£t
 
a1
, 56

221 
sw
 
a0
, 52(
•
)

222 .
cfi_off£t
 
a0
, 52

223 
sw
 
v1
, 48(
•
)

224 .
cfi_off£t
 
v1
, 48

225 
sw
 
v0
, 44(
•
)

226 .
cfi_off£t
 
v0
, 44

227 
sw
 
AT
, 40(
•
)

228 .
cfi_off£t
 
AT
, 40

230 
sw
 
ø
, 36(
•
)

231 .
cfi_off£t
 
ø
, 36

236 
mfhi
 
t0


237 
mÊo
 
t1


238 
sw
 
t0
, 32(
•
)

239 
sw
 
t1
, 28(
•
)

245 
mfc0
 
t2
, 
c0_°©us


246 
sw
 
t2
, 20(
•
)

247 
mfc0
 
t3
, 
c0_vaddr


248 
sw
 
t3
, 16(
•
)

249 
mfc0
 
t4
, 
c0_ˇu£


250 
sw
 
t4
, 24(
•
)

255 
™di
 
k0
, 
t2
, 
CST_KUp


256 
beq
 
k0
, 
$0
, 3f

257 
n›


259 
mfc0
 
k1
, 
c0_c⁄ãxt


260 
§l
 
k1
, k1, 
CTX_PTBASESHIFT


261 
¶l
 
k1
, k1, 2

262 
lui
 
k0
, %
	$hi
(
˝uthªads
)

263 
addu
 
k0
, k0, 
k1


264 
lw
 
s7
, %
	$lo
(
˝uthªads
)(
k0
)

270 
œ
 
gp
, 
_gp


276 
addiu
 
a0
, 
•
, 16

277 
jÆ
 
mùs_å≠


278 
n›


284 
ex˚±i⁄_ªtu∫
:

287 
lw
 
t0
, 20(
•
)

288 
n›


289 
mtc0
 
t0
, 
c0_°©us


293 
lw
 
t1
, 28(
•
)

294 
lw
 
t0
, 32(
•
)

295 
méo
 
t1


296 
mthi
 
t0


299 
lw
 
ø
, 36(
•
)

301 
lw
 
AT
, 40(
•
)

302 
lw
 
v0
, 44(
•
)

303 
lw
 
v1
, 48(
•
)

304 
lw
 
a0
, 52(
•
)

305 
lw
 
a1
, 56(
•
)

306 
lw
 
a2
, 60(
•
)

307 
lw
 
a3
, 64(
•
)

308 
lw
 
t0
, 68(
•
)

309 
lw
 
t1
, 72(
•
)

310 
lw
 
t2
, 76(
•
)

311 
lw
 
t3
, 80(
•
)

312 
lw
 
t4
, 84(
•
)

313 
lw
 
t5
, 88(
•
)

314 
lw
 
t6
, 92(
•
)

315 
lw
 
t7
, 96(
•
)

316 
lw
 
s0
, 100(
•
)

317 
lw
 
s1
, 104(
•
)

318 
lw
 
s2
, 108(
•
)

319 
lw
 
s3
, 112(
•
)

320 
lw
 
s4
, 116(
•
)

321 
lw
 
s5
, 120(
•
)

322 
lw
 
s6
, 124(
•
)

323 
lw
 
s7
, 128(
•
)

324 
lw
 
t8
, 132(
•
)

325 
lw
 
t9
, 136(
•
)

326 
lw
 
gp
, 140(
•
)

328 
lw
 
s8
, 148(
•
)

329 
lw
 
k1
, 152(
•
)

331 
lw
 
•
, 144(sp)

334 
jr
 
k1


335 
r„


336 .
cfi_íd¥oc


337 .
íd
 
comm⁄_ex˚±i⁄


347 .
ãxt


348 .
globl
 
asm_u£rmode


349 .
ty≥
 
asm_u£rmode
,@
fun˘i⁄


350 .
ít
 
asm_u£rmode


351 
asm_u£rmode
:

364 
j
 
ex˚±i⁄_ªtu∫


365 
addiu
 
•
, 
a0
, -16

366 .
íd
 
asm_u£rmode


	@arch/mips/locore/trap.c

30 
	~<ty≥s.h
>

31 
	~<sig«l.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

39 
	~<vm.h
>

40 
	~<maöbus.h
>

41 
	~<sysˇŒ.h
>

45 
__DEAD
 
asm_u£rmode
(
å≠‰ame
 *
tf
);

48 
mùs_å≠
(
å≠‰ame
 *
tf
);

52 
	#NTRAPCODES
 13

	)

53 c⁄° *c⁄° 
	gå≠codíames
[
NTRAPCODES
] = {

74 
	$kûl_cuπhªad
(
vaddr_t
 
ïc
, 
code
, vaddr_à
vaddr
)

76 
sig
 = 0;

78 
	`KASSERT
(
code
 < 
NTRAPCODES
);

79 
code
) {

80 
EX_IRQ
:

81 
EX_IBE
:

82 
EX_DBE
:

83 
EX_SYS
:

85 
	`KASSERT
(0);

86 
sig
 = 
SIGABRT
;

88 
EX_MOD
:

89 
EX_TLBL
:

90 
EX_TLBS
:

91 
sig
 = 
SIGSEGV
;

93 
EX_ADEL
:

94 
EX_ADES
:

95 
sig
 = 
SIGBUS
;

97 
EX_BP
:

98 
sig
 = 
SIGTRAP
;

100 
EX_RI
:

101 
sig
 = 
SIGILL
;

103 
EX_CPU
:

104 
sig
 = 
SIGSEGV
;

106 
EX_OVF
:

107 
sig
 = 
SIGFPE
;

115 
	`k¥ötf
("Fatal user modeÅrap %u sig %d (%s,Épc 0x%x, vaddr 0x%x)\n",

116 
code
, 
sig
, 
å≠codíames
[code], 
ïc
, 
vaddr
);

117 
	`∑nic
("I don't know howÅo handleÅhis\n");

118 
	}
}

126 
	$mùs_å≠
(
å≠‰ame
 *
tf
)

128 
uöt32_t
 
code
;

130 
boﬁ
 
iskîn
;

131 
•l
;

134 
	`KASSERT
((
å≠‰ame
)==(35*4));

139 
code
 = (
tf
->
tf_ˇu£
 & 
CCA_CODE
Ë>> 
CCA_CODESHIFT
;

141 
iskîn
 = (
tf
->
tf_°©us
 & 
CST_KUp
) == 0;

143 
	`KASSERT
(
code
 < 
NTRAPCODES
);

146 i‡(
cuπhªad
 !
NULL
 && cuπhªad->
t_°ack
 != NULL) {

147 
	`KASSERT
((
vaddr_t
)
tf
 > (vaddr_t)
cuπhªad
->
t_°ack
);

148 
	`KASSERT
((
vaddr_t
)
tf
 < (vaddr_t)(
cuπhªad
->
t_°ack


149 + 
STACK_SIZE
));

153 i‡(
code
 =
EX_IRQ
) {

154 
ﬁd_ö
;

155 
boﬁ
 
dﬂdju°
;

157 
ﬁd_ö
 = 
cuπhªad
->
t_ö_öãºu±
;

158 
cuπhªad
->
t_ö_öãºu±
 = 1;

177 i‡(
cuπhªad
->
t_cur•l
 == 0) {

178 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

179 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

180 
cuπhªad
->
t_cur•l
 = 
IPL_HIGH
;

181 
cuπhªad
->
t_ùlhigh_cou¡
++;

182 
dﬂdju°
 = 
åue
;

185 
dﬂdju°
 = 
Ál£
;

188 
	`maöbus_öãºu±
(
tf
);

190 i‡(
dﬂdju°
) {

191 
	`KASSERT
(
cuπhªad
->
t_cur•l
 =
IPL_HIGH
);

192 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 1);

193 
cuπhªad
->
t_ùlhigh_cou¡
--;

194 
cuπhªad
->
t_cur•l
 = 0;

197 
cuπhªad
->
t_ö_öãºu±
 = 
ﬁd_ö
;

198 
d⁄e2
;

212 
•l
 = 
	`•lhigh
();

213 
	`•lx
(
•l
);

216 i‡(
code
 =
EX_SYS
) {

218 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

219 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

221 
	`DEBUG
(
DB_SYSCALL
, "syscall: #%d,árgs %x %x %x %x\n",

222 
tf
->
tf_v0
,Åf->
tf_a0
,Åf->
tf_a1
,Åf->
tf_a2
,Åf->
tf_a3
);

224 
	`sysˇŒ
(
tf
);

225 
d⁄e
;

233 
code
) {

234 
EX_MOD
:

235 i‡(
	`vm_Áu…
(
VM_FAULT_READONLY
, 
tf
->
tf_vaddr
)==0) {

236 
d⁄e
;

239 
EX_TLBL
:

240 i‡(
	`vm_Áu…
(
VM_FAULT_READ
, 
tf
->
tf_vaddr
)==0) {

241 
d⁄e
;

244 
EX_TLBS
:

245 i‡(
	`vm_Áu…
(
VM_FAULT_WRITE
, 
tf
->
tf_vaddr
)==0) {

246 
d⁄e
;

249 
EX_IBE
:

250 
EX_DBE
:

260 
	`∑nic
("Bu†îr‹Éx˚±i⁄, PC=0x%x\n", 
tf
->
tf_ïc
);

270 i‡(!
iskîn
) {

275 
	`kûl_cuπhªad
(
tf
->
tf_ïc
, 
code
,Åf->
tf_vaddr
);

276 
d⁄e
;

300 i‡(
cuπhªad
 !
NULL
 &&

301 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 !
NULL
) {

302 
tf
->
tf_ïc
 = (
vaddr_t
Ë
cuπhªad
->
t_machdï
.
tm_badÁu…func
;

303 
d⁄e
;

310 
	`k¥ötf
("∑nic: F©ÆÉx˚±i⁄ %u (%sËö kî√»mode\n", 
code
,

311 
å≠codíames
[
code
]);

312 
	`k¥ötf
("panic: EPC 0x%x,Éxception vaddr 0x%x\n",

313 
tf
->
tf_ïc
,Åf->
tf_vaddr
);

315 
	`∑nic
("I can't handleÅhis... IÅhink I'll just dieÇow...\n");

317 
d⁄e
:

322 
	`˝u_úqoff
();

323 
d⁄e2
:

331 i‡(
cuπhªad
->
t_°ack
 =
NULL
) {

335 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

336 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

347 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

348 
	}
}

368 
	$mùs_u£rmode
(
å≠‰ame
 *
tf
)

377 
	`•l0
();

378 
	`˝u_úqoff
();

380 
˝uthªads
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
;

381 
˝u°acks
[
cur˝u
->
c_numbî
] = (
vaddr_t
)
cuπhªad
->
t_°ack
 + 
STACK_SIZE
;

398 
	`KASSERT
(
	`SAME_STACK
(
˝u°acks
[
cur˝u
->
c_numbî
]-1, (
vaddr_t
)
tf
));

403 
	`asm_u£rmode
(
tf
);

404 
	}
}

423 
	$íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, u£Ωå_à
ív
,

424 
vaddr_t
 
°ack
, vaddr_à
íåy
)

426 
å≠‰ame
 
tf
;

428 
	`bzîo
(&
tf
, (tf));

430 
tf
.
tf_°©us
 = 
CST_IRQMASK
 | 
CST_IEp
 | 
CST_KUp
;

431 
tf
.
tf_ïc
 = 
íåy
;

432 
tf
.
tf_a0
 = 
¨gc
;

433 
tf
.
tf_a1
 = (
vaddr_t
)
¨gv
;

434 
tf
.
tf_a2
 = (
vaddr_t
)
ív
;

435 
tf
.
tf_•
 = 
°ack
;

437 
	`mùs_u£rmode
(&
tf
);

438 
	}
}

	@arch/mips/syscall/syscall.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/sysˇŒ.h
>

33 
	~<lib.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<sysˇŒ.h
>

79 
	$sysˇŒ
(
å≠‰ame
 *
tf
)

81 
ˇŒno
;

82 
öt32_t
 
ªtvÆ
;

83 
îr
;

85 
	`KASSERT
(
cuπhªad
 !
NULL
);

86 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

87 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

89 
ˇŒno
 = 
tf
->
tf_v0
;

100 
ªtvÆ
 = 0;

102 
ˇŒno
) {

103 
SYS_ªboŸ
:

104 
îr
 = 
	`sys_ªboŸ
(
tf
->
tf_a0
);

107 
SYS___time
:

108 
îr
 = 
	`sys___time
((
u£Ωå_t
)
tf
->
tf_a0
,

109 (
u£Ωå_t
)
tf
->
tf_a1
);

115 
	`k¥ötf
("Unknow¿sysˇŒ %d\n", 
ˇŒno
);

116 
îr
 = 
ENOSYS
;

121 i‡(
îr
) {

127 
tf
->
tf_v0
 = 
îr
;

128 
tf
->
tf_a3
 = 1;

132 
tf
->
tf_v0
 = 
ªtvÆ
;

133 
tf
->
tf_a3
 = 0;

141 
tf
->
tf_ïc
 += 4;

144 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

146 
	`KASSERT
(
cuπhªad
->
t_ùlhigh_cou¡
 == 0);

147 
	}
}

158 
	$íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
)

160 ()
tf
;

161 
	}
}

	@arch/mips/thread/cpu.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<mùs/•ecüÃeg.h
>

37 
	~<mùs/å≠‰ame.h
>

38 
	~<∂©f‹m/max˝us.h
>

39 
	~<˝u.h
>

40 
	~<thªad.h
>

59 
vaddr_t
 
	g˝u°acks
[
MAXCPUS
];

60 
vaddr_t
 
	g˝uthªads
[
MAXCPUS
];

68 
	$˝u_machdï_öô
(
˝u
 *
c
)

70 
vaddr_t
 
°ackpoöãr
;

72 
	`KASSERT
(
c
->
c_numbî
 < 
MAXCPUS
);

74 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

84 
°ackpoöãr
 = (
vaddr_t
Ë
c
->
c_cuπhªad
->
t_°ack
;

86 
°ackpoöãr
 +
STACK_SIZE
;

88 
˝u°acks
[
c
->
c_numbî
] = 
°ackpoöãr
;

89 
˝uthªads
[
c
->
c_numbî
] = (
vaddr_t
)c->
c_cuπhªad
;

91 
	}
}

102 
	#SYS161_PRID_ORIG
 0x000003ff

	)

103 
	#SYS161_PRID_2X
 0x000000a1

	)

105 
ölöe


106 
uöt32_t


107 
	$˝u_gë¥id
()

109 
uöt32_t
 
¥id
;

111 
__asm
 vﬁ©ûe("mfc0 %0,$15" : "Ù" (
¥id
));

112  
¥id
;

113 
	}
}

115 
ölöe


116 
uöt32_t


117 
	$˝u_gë„©uªs
()

119 
uöt32_t
 
„©uªs
;

121 
__asm
 volatile(".setÖush;"

125 : "Ù" (
„©uªs
));

126  
„©uªs
;

127 
	}
}

129 
ölöe


130 
uöt32_t


131 
	$˝u_gëi„©uªs
()

133 
uöt32_t
 
„©uªs
;

135 
__asm
 volatile(".setÖush;"

139 : "Ù" (
„©uªs
));

140  
„©uªs
;

141 
	}
}

144 
	$˝u_idítify
(*
buf
, 
size_t
 
max
)

146 
uöt32_t
 
¥id
;

147 
uöt32_t
 
„©uªs
;

149 
¥id
 = 
	`˝u_gë¥id
();

150 
¥id
) {

151 
SYS161_PRID_ORIG
:

152 
	`¢¥ötf
(
buf
, 
max
, "MIPS/161 (System/161 1.xándÖre-2.x)");

154 
SYS161_PRID_2X
:

155 
„©uªs
 = 
	`˝u_gë„©uªs
();

156 
	`¢¥ötf
(
buf
, 
max
, "MIPS/161 (System/161 2.x) features 0x%x",

157 
„©uªs
);

158 
„©uªs
 = 
	`˝u_gëi„©uªs
();

159 i‡(
„©uªs
 != 0) {

160 
	`k¥ötf
("WARNING: unknown CPU incompatible features "

161 "0x%x\n", 
„©uªs
);

165 
	`¢¥ötf
(
buf
, 
max
, "32-bit MIPS (unknownÅype, CPU ID 0x%x)",

166 
¥id
);

169 
	}
}

195 
	#GET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mfc0 %0,$12" : "Ù" (x))

	)

196 
	#SET_STATUS
(
x
Ë
__asm
 vﬁ©ûe("mtc0 %0,$12" :: "r" (x))

	)

202 
	$˝u_úq⁄
()

204 
uöt32_t
 
x
;

206 
	`GET_STATUS
(
x
);

207 
x
 |
CST_IEc
;

208 
	`SET_STATUS
(
x
);

209 
	}
}

215 
	$˝u_úqoff
()

217 
uöt32_t
 
x
;

219 
	`GET_STATUS
(
x
);

220 
x
 &~(
uöt32_t
)
CST_IEc
;

221 
	`SET_STATUS
(
x
);

222 
	}
}

229 
	$˝u_úq⁄off
()

231 
uöt32_t
 
x
, 
x⁄
, 
xoff
;

233 
	`GET_STATUS
(
x
);

234 
x⁄
 = 
x
 | 
CST_IEc
;

235 
xoff
 = 
x
 & ~(
uöt32_t
)
CST_IEc
;

236 
	`SET_STATUS
(
x⁄
);

237 
__asm
 volatile("nop;Çop;Çop;Çop");

238 
	`SET_STATUS
(
xoff
);

239 
	}
}

257 
ölöe


259 
	$waô
()

272 
__asm
 volatile(

279 
	}
}

285 
	$˝u_idÀ
()

287 
	`waô
();

288 
	`˝u_úq⁄off
();

289 
	}
}

295 
	$˝u_hÆt
()

297 
	`˝u_úqoff
();

299 
	`waô
();

301 
	}
}

	@arch/mips/thread/switch.S

34 
	~<kîn/mùs/ªgdefs.h
>

36 .
	gãxt


37 .
£t
 
	gn‹e‹dî


39 .
globl
 
	gswôch‰ame_swôch


40 .
ty≥
 
	gswôch‰ame_swôch
,@
	gfun˘i⁄


41 .
ít
 
swôch‰ame_swôch


42 
	gswôch‰ame_swôch
:

62 
addi
 
•
, 
	g•
, -40

65 
sw
 
	gø
, 36(
	g•
)

66 
sw
 
	ggp
, 32(
	g•
)

67 
sw
 
	gs8
, 28(
	g•
)

68 
sw
 
	gs6
, 24(
	g•
)

69 
sw
 
	gs5
, 20(
	g•
)

70 
sw
 
	gs4
, 16(
	g•
)

71 
sw
 
	gs3
, 12(
	g•
)

72 
sw
 
	gs2
, 8(
	g•
)

73 
sw
 
	gs1
, 4(
	g•
)

74 
sw
 
	gs0
, 0(
	g•
)

77 
sw
 
	g•
, 0(
	ga0
)

80 
lw
 
	g•
, 0(
	ga1
)

81 
n›


84 
lw
 
	gs0
, 0(
	g•
)

85 
lw
 
	gs1
, 4(
	g•
)

86 
lw
 
	gs2
, 8(
	g•
)

87 
lw
 
	gs3
, 12(
	g•
)

88 
lw
 
	gs4
, 16(
	g•
)

89 
lw
 
	gs5
, 20(
	g•
)

90 
lw
 
	gs6
, 24(
	g•
)

91 
lw
 
	gs8
, 28(
	g•
)

92 
lw
 
	ggp
, 32(
	g•
)

93 
lw
 
	gø
, 36(
	g•
)

94 
n›


97 
j
 
ø


98 
addi
 
	g•
, sp, 40

99 .
íd
 
	gswôch‰ame_swôch


	@arch/mips/thread/switchframe.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªad¥iv©e.h
>

35 
	~"swôch‰ame.h
"

38 
mùs_thªad°¨t
( );

55 
swôch‰ame_öô
(
thªad
 *thread,

56 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

57 *
d©a1
, 
d©a2
)

59 
vaddr_t
 
°ackt›
;

60 
swôch‰ame
 *
sf
;

67 
°ackt›
 = ((
vaddr_t
)
thªad
->
t_°ack
Ë+ 
STACK_SIZE
;

68 
sf
 = ((
swôch‰ame
 *Ë
°ackt›
) - 1;

71 
	`bzîo
(
sf
, (*sf));

91 
sf
->
sf_s0
 = (
uöt32_t
)
íåypoöt
;

92 
sf
->
sf_s1
 = (
uöt32_t
)
d©a1
;

93 
sf
->
sf_s2
 = (
uöt32_t
)
d©a2
;

94 
sf
->
sf_ø
 = (
uöt32_t
)
mùs_thªad°¨t
;

97 
thªad
->
t_c⁄ãxt
 = 
sf
;

98 
	}
}

	@arch/mips/thread/switchframe.h

30 #i‚de‡
_MIPS_SWITCHFRAME_H_


31 
	#_MIPS_SWITCHFRAME_H_


	)

39 
	sswôch‰ame
 {

40 
uöt32_t
 
	msf_s0
;

41 
uöt32_t
 
	msf_s1
;

42 
uöt32_t
 
	msf_s2
;

43 
uöt32_t
 
	msf_s3
;

44 
uöt32_t
 
	msf_s4
;

45 
uöt32_t
 
	msf_s5
;

46 
uöt32_t
 
	msf_s6
;

47 
uöt32_t
 
	msf_s8
;

48 
uöt32_t
 
	msf_gp
;

49 
uöt32_t
 
	msf_ø
;

	@arch/mips/thread/thread_machdep.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªad¥iv©e.h
>

40 
	$thªad_machdï_öô
(
thªad_machdï
 *
tm
)

42 
tm
->
tm_badÁu…func
 = 
NULL
;

43 
	}
}

46 
	$thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
)

48 
	`KASSERT
(
tm
->
tm_badÁu…func
 =
NULL
);

49 
	}
}

	@arch/mips/thread/threadstart.S

34 
	~<kîn/mùs/ªgdefs.h
>

36 .
	gãxt


37 .
£t
 
	gn‹e‹dî


39 .
globl
 
	gmùs_thªad°¨t


40 .
ty≥
 
	gmùs_thªad°¨t
,@
	gfun˘i⁄


41 .
ít
 
mùs_thªad°¨t


42 
	gmùs_thªad°¨t
:

59 
addiu
 
•
, 
	g•
, -16

61 
move
 
	gø
, 
$0


63 
move
 
	ga0
, 
s0


64 
move
 
	ga1
, 
s1


65 
j
 
thªad_°¨tup


66 
move
 
	ga2
, 
	gs2


68 .
íd
 
	gmùs_thªad°¨t


	@arch/mips/vm/dumbvm.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<•l.h
>

34 
	~<˝u.h
>

35 
	~<•ölock.h
>

36 
	~<¥oc.h
>

37 
	~<cuºít.h
>

38 
	~<mùs/éb.h
>

39 
	~<addr•a˚.h
>

40 
	~<vm.h
>

60 
	#DUMBVM_STACKPAGES
 18

	)

65 
•ölock
 
	g°ólmem_lock
 = 
SPINLOCK_INITIALIZER
;

68 
	$vm_boŸ°øp
()

71 
	}
}

82 
	$dumbvm_ˇn_¶ìp
()

84 i‡(
	`CURCPU_EXISTS
()) {

86 
	`KASSERT
(
cur˝u
->
c_•ölocks
 == 0);

89 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 == 0);

91 
	}
}

94 
∑ddr_t


95 
	$gëµages
(
≈ages
)

97 
∑ddr_t
 
addr
;

99 
	`•ölock_acquúe
(&
°ólmem_lock
);

101 
addr
 = 
	`øm_°ólmem
(
≈ages
);

103 
	`•ölock_ªÀa£
(&
°ólmem_lock
);

104  
addr
;

105 
	}
}

108 
vaddr_t


109 
	$Æloc_k∑ges
(
≈ages
)

111 
∑ddr_t
 
∑
;

113 
	`dumbvm_ˇn_¶ìp
();

114 
∑
 = 
	`gëµages
(
≈ages
);

115 i‡(
∑
==0) {

118  
	`PADDR_TO_KVADDR
(
∑
);

119 
	}
}

122 
	$‰ì_k∑ges
(
vaddr_t
 
addr
)

126 ()
addr
;

127 
	}
}

130 
	$vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *
ts
)

132 ()
ts
;

133 
	`∑nic
("dumbvmÅriedÅo doÅlb shootdown?!\n");

134 
	}
}

137 
	$vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
)

139 
vaddr_t
 
vba£1
, 
vt›1
, 
vba£2
, 
vt›2
, 
°ackba£
, 
°ackt›
;

140 
∑ddr_t
 
∑ddr
;

141 
i
;

142 
uöt32_t
 
ehi
, 
ño
;

143 
addr•a˚
 *
as
;

144 
•l
;

146 
Áu…addªss
 &
PAGE_FRAME
;

148 
	`DEBUG
(
DB_VM
, "dumbvm: fau…: 0x%x\n", 
Áu…addªss
);

150 
Áu…ty≥
) {

151 
VM_FAULT_READONLY
:

153 
	`∑nic
("dumbvm: got VM_FAULT_READONLY\n");

154 
VM_FAULT_READ
:

155 
VM_FAULT_WRITE
:

158  
EINVAL
;

161 i‡(
cuΩroc
 =
NULL
) {

167  
EFAULT
;

170 
as
 = 
	`¥oc_gëas
();

171 i‡(
as
 =
NULL
) {

176  
EFAULT
;

180 
	`KASSERT
(
as
->
as_vba£1
 != 0);

181 
	`KASSERT
(
as
->
as_pba£1
 != 0);

182 
	`KASSERT
(
as
->
as_≈ages1
 != 0);

183 
	`KASSERT
(
as
->
as_vba£2
 != 0);

184 
	`KASSERT
(
as
->
as_pba£2
 != 0);

185 
	`KASSERT
(
as
->
as_≈ages2
 != 0);

186 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

187 
	`KASSERT
((
as
->
as_vba£1
 & 
PAGE_FRAME
) ==ás->as_vbase1);

188 
	`KASSERT
((
as
->
as_pba£1
 & 
PAGE_FRAME
) ==ás->as_pbase1);

189 
	`KASSERT
((
as
->
as_vba£2
 & 
PAGE_FRAME
) ==ás->as_vbase2);

190 
	`KASSERT
((
as
->
as_pba£2
 & 
PAGE_FRAME
) ==ás->as_pbase2);

191 
	`KASSERT
((
as
->
as_°ackpba£
 & 
PAGE_FRAME
) ==ás->as_stackpbase);

193 
vba£1
 = 
as
->
as_vba£1
;

194 
vt›1
 = 
vba£1
 + 
as
->
as_≈ages1
 * 
PAGE_SIZE
;

195 
vba£2
 = 
as
->
as_vba£2
;

196 
vt›2
 = 
vba£2
 + 
as
->
as_≈ages2
 * 
PAGE_SIZE
;

197 
°ackba£
 = 
USERSTACK
 - 
DUMBVM_STACKPAGES
 * 
PAGE_SIZE
;

198 
°ackt›
 = 
USERSTACK
;

200 i‡(
Áu…addªss
 >
vba£1
 && fau…addªs†< 
vt›1
) {

201 
∑ddr
 = (
Áu…addªss
 - 
vba£1
Ë+ 
as
->
as_pba£1
;

203 i‡(
Áu…addªss
 >
vba£2
 && fau…addªs†< 
vt›2
) {

204 
∑ddr
 = (
Áu…addªss
 - 
vba£2
Ë+ 
as
->
as_pba£2
;

206 i‡(
Áu…addªss
 >
°ackba£
 && fau…addªs†< 
°ackt›
) {

207 
∑ddr
 = (
Áu…addªss
 - 
°ackba£
Ë+ 
as
->
as_°ackpba£
;

210  
EFAULT
;

214 
	`KASSERT
((
∑ddr
 & 
PAGE_FRAME
) ==Öaddr);

217 
•l
 = 
	`•lhigh
();

219 
i
=0; i<
NUM_TLB
; i++) {

220 
	`éb_ªad
(&
ehi
, &
ño
, 
i
);

221 i‡(
ño
 & 
TLBLO_VALID
) {

224 
ehi
 = 
Áu…addªss
;

225 
ño
 = 
∑ddr
 | 
TLBLO_DIRTY
 | 
TLBLO_VALID
;

226 
	`DEBUG
(
DB_VM
, "dumbvm: 0x%x -> 0x%x\n", 
Áu…addªss
, 
∑ddr
);

227 
	`éb_wrôe
(
ehi
, 
ño
, 
i
);

228 
	`•lx
(
•l
);

232 
	`k¥ötf
("dumbvm: Ran out of TLBÉntries - cannot handleÖage fault\n");

233 
	`•lx
(
•l
);

234  
EFAULT
;

235 
	}
}

237 
addr•a˚
 *

238 
	$as_¸óã
()

240 
addr•a˚
 *
as
 = 
	`kmÆloc
((addrspace));

241 i‡(
as
==
NULL
) {

242  
NULL
;

245 
as
->
as_vba£1
 = 0;

246 
as
->
as_pba£1
 = 0;

247 
as
->
as_≈ages1
 = 0;

248 
as
->
as_vba£2
 = 0;

249 
as
->
as_pba£2
 = 0;

250 
as
->
as_≈ages2
 = 0;

251 
as
->
as_°ackpba£
 = 0;

253  
as
;

254 
	}
}

257 
	$as_de°roy
(
addr•a˚
 *
as
)

259 
	`dumbvm_ˇn_¶ìp
();

260 
	`k‰ì
(
as
);

261 
	}
}

264 
	$as_a˘iv©e
()

266 
i
, 
•l
;

267 
addr•a˚
 *
as
;

269 
as
 = 
	`¥oc_gëas
();

270 i‡(
as
 =
NULL
) {

275 
•l
 = 
	`•lhigh
();

277 
i
=0; i<
NUM_TLB
; i++) {

278 
	`éb_wrôe
(
	`TLBHI_INVALID
(
i
), 
	`TLBLO_INVALID
(), i);

281 
	`•lx
(
•l
);

282 
	}
}

285 
	$as_dó˘iv©e
()

288 
	}
}

291 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

292 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

294 
size_t
 
≈ages
;

296 
	`dumbvm_ˇn_¶ìp
();

299 
sz
 +
vaddr
 & ~(
vaddr_t
)
PAGE_FRAME
;

300 
vaddr
 &
PAGE_FRAME
;

303 
sz
 = (sz + 
PAGE_SIZE
 - 1Ë& 
PAGE_FRAME
;

305 
≈ages
 = 
sz
 / 
PAGE_SIZE
;

308 ()
ªadabÀ
;

309 ()
wrôóbÀ
;

310 ()
execuèbÀ
;

312 i‡(
as
->
as_vba£1
 == 0) {

313 
as
->
as_vba£1
 = 
vaddr
;

314 
as
->
as_≈ages1
 = 
≈ages
;

318 i‡(
as
->
as_vba£2
 == 0) {

319 
as
->
as_vba£2
 = 
vaddr
;

320 
as
->
as_≈ages2
 = 
≈ages
;

327 
	`k¥ötf
("dumbvm: Warning:Åoo manyÑegions\n");

328  
ENOSYS
;

329 
	}
}

333 
	$as_zîo_ªgi⁄
(
∑ddr_t
 
∑ddr
, 
≈ages
)

335 
	`bzîo
((*)
	`PADDR_TO_KVADDR
(
∑ddr
), 
≈ages
 * 
PAGE_SIZE
);

336 
	}
}

339 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

341 
	`KASSERT
(
as
->
as_pba£1
 == 0);

342 
	`KASSERT
(
as
->
as_pba£2
 == 0);

343 
	`KASSERT
(
as
->
as_°ackpba£
 == 0);

345 
	`dumbvm_ˇn_¶ìp
();

347 
as
->
as_pba£1
 = 
	`gëµages
◊s->
as_≈ages1
);

348 i‡(
as
->
as_pba£1
 == 0) {

349  
ENOMEM
;

352 
as
->
as_pba£2
 = 
	`gëµages
◊s->
as_≈ages2
);

353 i‡(
as
->
as_pba£2
 == 0) {

354  
ENOMEM
;

357 
as
->
as_°ackpba£
 = 
	`gëµages
(
DUMBVM_STACKPAGES
);

358 i‡(
as
->
as_°ackpba£
 == 0) {

359  
ENOMEM
;

362 
	`as_zîo_ªgi⁄
(
as
->
as_pba£1
,ás->
as_≈ages1
);

363 
	`as_zîo_ªgi⁄
(
as
->
as_pba£2
,ás->
as_≈ages2
);

364 
	`as_zîo_ªgi⁄
(
as
->
as_°ackpba£
, 
DUMBVM_STACKPAGES
);

367 
	}
}

370 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

372 
	`dumbvm_ˇn_¶ìp
();

373 ()
as
;

375 
	}
}

378 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

380 
	`KASSERT
(
as
->
as_°ackpba£
 != 0);

382 *
°ack±r
 = 
USERSTACK
;

384 
	}
}

387 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

389 
addr•a˚
 *
√w
;

391 
	`dumbvm_ˇn_¶ìp
();

393 
√w
 = 
	`as_¸óã
();

394 i‡(
√w
==
NULL
) {

395  
ENOMEM
;

398 
√w
->
as_vba£1
 = 
ﬁd
->as_vbase1;

399 
√w
->
as_≈ages1
 = 
ﬁd
->as_npages1;

400 
√w
->
as_vba£2
 = 
ﬁd
->as_vbase2;

401 
√w
->
as_≈ages2
 = 
ﬁd
->as_npages2;

404 i‡(
	`as_¥ï¨e_lﬂd
(
√w
)) {

405 
	`as_de°roy
(
√w
);

406  
ENOMEM
;

409 
	`KASSERT
(
√w
->
as_pba£1
 != 0);

410 
	`KASSERT
(
√w
->
as_pba£2
 != 0);

411 
	`KASSERT
(
√w
->
as_°ackpba£
 != 0);

413 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£1
),

414 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£1
),

415 
ﬁd
->
as_≈ages1
*
PAGE_SIZE
);

417 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_pba£2
),

418 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_pba£2
),

419 
ﬁd
->
as_≈ages2
*
PAGE_SIZE
);

421 
	`memmove
((*)
	`PADDR_TO_KVADDR
(
√w
->
as_°ackpba£
),

422 (c⁄° *)
	`PADDR_TO_KVADDR
(
ﬁd
->
as_°ackpba£
),

423 
DUMBVM_STACKPAGES
*
PAGE_SIZE
);

425 *
ªt
 = 
√w
;

427 
	}
}

	@arch/mips/vm/ram.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<vm.h
>

33 
	~<maöbus.h
>

36 
vaddr_t
 
	gfú°‰ì
;

38 
∑ddr_t
 
	gfú°∑ddr
;

39 
∑ddr_t
 
	gœ°∑ddr
;

46 
	$øm_boŸ°øp
()

48 
size_t
 
ømsize
;

51 
ømsize
 = 
	`maöbus_ømsize
();

60 i‡(
ømsize
 > 512*1024*1024) {

61 
ømsize
 = 512*1024*1024;

64 
œ°∑ddr
 = 
ømsize
;

70 
fú°∑ddr
 = 
fú°‰ì
 - 
MIPS_KSEG0
;

72 
	`k¥ötf
("%ukÖhysical memoryávailable\n",

73 (
œ°∑ddr
-
fú°∑ddr
)/1024);

74 
	}
}

94 
∑ddr_t


95 
	$øm_°ólmem
(
≈ages
)

97 
size_t
 
size
;

98 
∑ddr_t
 
∑ddr
;

100 
size
 = 
≈ages
 * 
PAGE_SIZE
;

102 i‡(
fú°∑ddr
 + 
size
 > 
œ°∑ddr
) {

106 
∑ddr
 = 
fú°∑ddr
;

107 
fú°∑ddr
 +
size
;

109  
∑ddr
;

110 
	}
}

127 
∑ddr_t


128 
	$øm_gësize
()

130  
œ°∑ddr
;

131 
	}
}

145 
∑ddr_t


146 
	$øm_gëfú°‰ì
()

148 
∑ddr_t
 
ªt
;

150 
ªt
 = 
fú°∑ddr
;

151 
fú°∑ddr
 = 
œ°∑ddr
 = 0;

152  
ªt
;

153 
	}
}

	@arch/mips/vm/tlb-mips161.S

30 
	~<kîn/mùs/ªgdefs.h
>

31 
	~<mùs/•ecüÃeg.h
>

48 .
	gãxt


49 .
£t
 
	gn‹e‹dî


50 .
£t
 
	gmùs32


59 .
globl
 
	géb_øndom


60 .
ty≥
 
	géb_øndom
,@
	gfun˘i⁄


61 .
ít
 
éb_øndom


62 
	géb_øndom
:

63 
mtc0
 
a0
, 
c0_íåyhi


64 
mtc0
 
	ga1
, 
c0_íåylo


65 
s¢›


66 
s¢›


67 
ébwr


68 
j
 
ø


69 
	gn›


70 .
íd
 
	géb_øndom


79 .
	gãxt


80 .
globl
 
	géb_wrôe


81 .
ty≥
 
	géb_wrôe
,@
	gfun˘i⁄


82 .
ít
 
éb_wrôe


83 
	géb_wrôe
:

84 
mtc0
 
a0
, 
c0_íåyhi


85 
mtc0
 
	ga1
, 
c0_íåylo


86 
¶l
 
	gt0
, 
	ga2
, 
CIN_INDEXSHIFT


87 
mtc0
 
	gt0
, 
c0_ödex


88 
s¢›


89 
s¢›


90 
ébwi


91 
j
 
ø


92 
	gn›


93 .
íd
 
	géb_wrôe


103 .
	gãxt


104 .
globl
 
	géb_ªad


105 .
ty≥
 
	géb_ªad
,@
	gfun˘i⁄


106 .
ít
 
éb_ªad


107 
	géb_ªad
:

108 
¶l
 
t0
, 
	ga2
, 
CIN_INDEXSHIFT


109 
mtc0
 
	gt0
, 
c0_ödex


110 
s¢›


111 
s¢›


112 
ébr


113 
s¢›


114 
s¢›


115 
s¢›


116 
mfc0
 
	gt0
, 
c0_íåyhi


117 
mfc0
 
	gt1
, 
c0_íåylo


118 
sw
 
	gt0
, 0(
	ga0
)

119 
j
 
ø


120 
sw
 
	gt1
, 0(
	ga1
)

121 .
íd
 
	géb_ªad


131 .
	gãxt


132 .
globl
 
	géb_¥obe


133 .
ty≥
 
	géb_¥obe
,@
	gfun˘i⁄


134 .
ít
 
éb_¥obe


135 
	géb_¥obe
:

136 
mtc0
 
a0
, 
c0_íåyhi


137 
mtc0
 
	ga1
, 
c0_íåylo


138 
s¢›


139 
s¢›


140 
ébp


141 
s¢›


142 
s¢›


143 
mfc0
 
	gt0
, 
c0_ödex


150 
bgez
 
	gt0
, 1f

151 
n›


152 
addi
 
	gv0
, 
	gz0
, -1

153 
j
 
ø


154 
	gn›


158 
™di
 
t1
, 
	gt0
, 
CIN_INDEX


159 
j
 
ø


160 
§a
 
	gv0
, 
	gt1
, 
	gCIN_INDEXSHIFT


161 .
íd
 
	géb_¥obe


178 .
	gãxt


179 .
globl
 
	géb_ª£t


180 .
ty≥
 
	géb_ª£t
,@
	gfun˘i⁄


181 .
ít
 
éb_ª£t


182 
	géb_ª£t
:

183 
li
 
t0
, 0

184 
li
 
	gt1
, 0x81000000

186 
mtc0
 
$0
, 
c0_íåylo


187 
mtc0
 
	gt1
, 
c0_íåyhi


188 
s¢›


189 
s¢›


190 
ébp


191 
s¢›


192 
s¢›


193 
mfc0
 
	gt2
, 
c0_ödex


194 
bgez
 
	gt2
, 1b

195 
addiu
 
	gt1
,Å1, 0x1000

196 
mtc0
 
	gt0
, 
c0_ödex


197 
s¢›


198 
s¢›


199 
addiu
 
	gt0
,Å0, 0x100

200 
b√
 
	gt0
, 0x4000, 1b

201 
ébwi


202 
j
 
ø


203 
	gn›


204 .
íd
 
	géb_ª£t


	@arch/sys161/dev/lamebus_machdep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<lib.h
>

33 
	~<mùs/•ecüÃeg.h
>

34 
	~<mùs/å≠‰ame.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<cuºít.h
>

40 
	~<memb¨.h
>

41 
	~<synch.h
>

42 
	~<maöbus.h
>

43 
	~<sys161/bus.h
>

44 
	~<œmebus/œmebus.h
>

45 
	~"autoc⁄f.h
"

53 
	#CPU_FREQUENCY
 25000000

	)

64 
	$mùs_timî_£t
(
uöt32_t
 
cou¡
)

70 
__asm
 volatile(

75 :: "r" (
cou¡
));

76 
	}
}

83 
œmebus_so·c
 *
	gœmebus
;

86 
	$maöbus_boŸ°øp
()

89 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

92 
œmebus
 = 
	`œmebus_öô
();

95 
	`œmebus_föd_˝us
(
œmebus
);

100 
	`k¥ötf
("lamebus0 (system main bus)\n");

107 
	`•l0
();

113 
	`autoc⁄f_œmebus
(
œmebus
, 0);

118 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

119 
	}
}

125 
	$maöbus_°¨t_˝us
()

127 
	`œmebus_°¨t_˝us
(
œmebus
);

128 
	}
}

136 
	$œmebus_m≠_¨ó
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

138 
uöt32_t
 
addªss
;

140 ()
bus
;

142 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

144 
addªss
 = 
LB_BASEADDR
 + 
¶Ÿ
*
LB_SLOT_SIZE
 + 
off£t
;

145  (*)
addªss
;

146 
	}
}

151 
uöt32_t


152 
	$œmebus_ªad_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

154 
uöt32_t
 *
±r
;

156 
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

162 
	`memb¨_lﬂd_lﬂd
();

164  *
±r
;

165 
	}
}

171 
	$œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *
bus
, 
¶Ÿ
,

172 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

174 
uöt32_t
 *
±r
;

176 
±r
 = 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
);

177 *
±r
 = 
vÆ
;

183 
	`memb¨_°‹e_°‹e
();

184 
	}
}

191 
	$maöbus_powîoff
()

199 
	`œmebus_powîoff
(
œmebus
);

200 
	}
}

206 
	$maöbus_ªboŸ
()

215 
	`k¥ötf
("CannotÑeboot -Öowering off instead, sorry.\n");

216 
	`maöbus_powîoff
();

217 
	}
}

225 
	$maöbus_hÆt
()

227 
	`˝u_hÆt
();

228 
	}
}

238 
	$maöbus_∑nic
()

240 
	`maöbus_powîoff
();

241 
	}
}

247 
uöt32_t


248 
	$maöbus_ømsize
()

250 
uöt32_t
 
ømsize
;

252 
ømsize
 = 
	`œmebus_ømsize
();

262 i‡(
ømsize
 > 508*1024*1024) {

263 
ømsize
 = 508*1024*1024;

266  
ømsize
;

267 
	}
}

273 
	$maöbus_£nd_ùi
(
˝u
 *
èrgë
)

275 
	`œmebus_as£π_ùi
(
œmebus
, 
èrgë
);

276 
	}
}

283 
	#LAMEBUS_IRQ_BIT
 0x00000400

	)

284 
	#LAMEBUS_IPI_BIT
 0x00000800

	)

285 
	#MIPS_TIMER_BIT
 0x00008000

	)

288 
	$maöbus_öãºu±
(
å≠‰ame
 *
tf
)

290 
uöt32_t
 
ˇu£
;

291 
boﬁ
 
£í
 = 
Ál£
;

294 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

296 
ˇu£
 = 
tf
->
tf_ˇu£
;

297 i‡(
ˇu£
 & 
LAMEBUS_IRQ_BIT
) {

298 
	`œmebus_öãºu±
(
œmebus
);

299 
£í
 = 
åue
;

301 i‡(
ˇu£
 & 
LAMEBUS_IPI_BIT
) {

302 
	`öãΩro˚ss‹_öãºu±
();

303 
	`œmebus_˛ór_ùi
(
œmebus
, 
cur˝u
);

304 
£í
 = 
åue
;

306 i‡(
ˇu£
 & 
MIPS_TIMER_BIT
) {

308 
	`mùs_timî_£t
(
CPU_FREQUENCY
 / 
HZ
);

310 
	`h¨d˛ock
();

311 
£í
 = 
åue
;

314 i‡(!
£í
) {

315 i‡((
ˇu£
 & 
CCA_IRQS
) == 0) {

330 
	`∑nic
("Unknown interrupt; causeÑegister is %08x\n",

331 
ˇu£
);

334 
	}
}

	@arch/sys161/include/bus.h

30 #i‚de‡
_SYS161_BUS_H_


31 
	#_SYS161_BUS_H_


	)

40 
	~<machöe/vm.h
>

41 
	~<œmebus/œmebus.h
>

43 
	#bus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
) \

44 
	`œmebus_wrôe_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
, 
vÆ
)

	)

46 
	#bus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
) \

47 
	`œmebus_ªad_ªgi°î
(
bus
, 
¶Ÿ
, 
off£t
)

	)

49 
	#bus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
) \

50 
	`œmebus_m≠_¨ó
(
bus
, 
¶Ÿ
, 
off£t
)

	)

57 
	#LB_BASEADDR
 (
MIPS_KSEG1
 + 0x1„00000)

	)

	@arch/sys161/include/maxcpus.h

30 #i‚de‡
_SYS161_MAXCPUS_H_


31 
	#_SYS161_MAXCPUS_H_


	)

42 
	#MAXCPUS
 32

	)

	@arch/sys161/main/start.S

30 
	~<kîn/mùs/ªgdefs.h
>

31 
	~<mùs/•ecüÃeg.h
>

33 .
£t
 
	gn‹e‹dî


35 .
	gãxt


36 .
globl
 
	g__°¨t


37 .
ty≥
 
	g__°¨t
,@
	gfun˘i⁄


38 .
ít
 
__°¨t


39 
	g__°¨t
:

52 .
‰ame
 
•
, 24, 
	g$0


53 .
	gmask
 0x80000000, -4

54 
addiu
 
	g•
, sp, -24

55 
sw
 
	gø
, 20(
	g•
)

89 
œ
 
	gs0
, 
_íd


91 
move
 
	ga1
, 
a0


92 
move
 
	ga0
, 
s0


93 
jÆ
 
°r˝y


94 
n›


96 
move
 
	ga0
, 
s0


97 
jÆ
 
°æí


98 
n›


100 
add
 
	gt0
, 
	gs0
, 
v0


101 
addi
 
	gt0
,Å0, 1

104 
addi
 
	gt0
,Å0, 4095

105 
li
 
	gt1
, 0xfffff000

106 
™d
 
	gt0
,Å0, 
t1


108 
addi
 
	gt0
,Å0, 4096

110 
move
 
	g•
, 
t0


112 
sw
 
	gt0
, 
fú°‰ì


127 
addiu
 
	g•
, sp, -24

128 
sw
 
	g$0
, 20(
	g•
)

134 
li
 
	ga0
, 
EXADDR_UTLB


135 
œ
 
	ga1
, 
mùs_uéb_h™dÀr


136 
œ
 
	ga2
, 
mùs_uéb_íd


137 
sub
 
	ga2
,á2, 
a1


138 
jÆ
 
memmove


139 
n›


141 
li
 
	ga0
, 
EXADDR_GENERAL


142 
œ
 
	ga1
, 
mùs_gíîÆ_h™dÀr


143 
œ
 
	ga2
, 
mùs_gíîÆ_íd


144 
sub
 
	ga2
,á2, 
a1


145 
jÆ
 
memmove


146 
n›


152 
jÆ
 
mùs_Êushiˇche


153 
n›


158 
jÆ
 
éb_ª£t


159 
n›


164 
li
 
	gs7
, 0

190 
li
 
	gt0
, 
CST_IRQMASK


191 
mtc0
 
	gt0
, 
c0_°©us


201 
mtc0
 
	g$0
, 
c0_c⁄ãxt


209 
œ
 
	ggp
, 
_gp


215 
jÆ
 
kmaö


216 
move
 
	ga0
, 
	gs0


224 
œ
 
a0
, 
∑nic°r


225 
jÆ
 
∑nic


226 
n›


227 
	gj
 1b

228 
	gn›


229 .
íd
 
	g__°¨t


231 .
rd©a


232 
	g∑nic°r
:

233 .
asciz
 "kmainÑeturned\n"

238 .
ãxt


239 .
globl
 
˝u_°¨t_£c⁄d¨y


240 .
ty≥
 
˝u_°¨t_£c⁄d¨y
,@
	gfun˘i⁄


241 .
ít
 
˝u_°¨t_£c⁄d¨y


242 
	g˝u_°¨t_£c⁄d¨y
:

266 .
‰ame
 
•
, 24, 
	g$0


267 .
	gmask
 0x80000000, -4

268 
addiu
 
	g•
, sp, -24

269 
sw
 
	gø
, 20(
	g•
)

274 
lui
 
	gt0
, %
	$hi
(
˝u°acks
)

275 
¶l
 
v0
, 
a0
, 2

276 
addu
 
t0
,Å0, 
v0


277 
lw
 
•
, %
	$lo
(
˝u°acks
)(
t0
)

282 
lui
 
t0
, %
	$hi
(
˝uthªads
)

283 
¶l
 
v0
, 
a0
, 2

284 
addu
 
t0
,Å0, 
v0


285 
lw
 
s7
, %
	$lo
(
˝uthªads
)(
t0
)

290 
jÆ
 
éb_ª£t


291 
n›


296 
li
 
t0
, 
CST_IRQMASK


297 
mtc0
 
t0
, 
c0_°©us


303 
¶l
 
v0
, 
a0
, 
CTX_PTBASESHIFT


304 
mtc0
 
v0
, 
c0_c⁄ãxt


313 
li
 
v0
, 100000

314 
mtc0
 
v0
, 
c0_com∑ª


320 
œ
 
gp
, 
_gp


326 
addiu
 
•
, sp, -24

327 
sw
 
z0
, 20(
•
)

333 
j
 
˝u_h©ch


334 
n›


335 .
íd
 
˝u_°¨t_£c⁄d¨y


	@compile/ASST1/.depend.__printf.c

1 
	g__¥ötf
.
	go
: ../../../
comm⁄
/
libc
/
¥ötf
/
__¥ötf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
°d¨g
.h

	@compile/ASST1/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_øndom
 <= 0) {

282 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

285 
	}
}

288 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

290 ()
bus
; ()
busunô
;

292 
ªsu…
, 
devunô
=
√xtunô_emu
;

294 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

295 
devunô
++;

296 } 
ªsu…
==0);

299 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

301 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

302 
devunô
++;

303 } 
ªsu…
==0);

306 
ªsu…
, 
devunô
=
√xtunô_…imî
;

308 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

309 
devunô
++;

310 } 
ªsu…
==0);

313 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

315 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

316 
devunô
++;

317 } 
ªsu…
==0);

320 
ªsu…
, 
devunô
=
√xtunô_lhd
;

322 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

323 
devunô
++;

324 } 
ªsu…
==0);

327 
ªsu…
, 
devunô
=
√xtunô_l£r
;

329 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

330 
devunô
++;

331 } 
ªsu…
==0);

333 
	}
}

337 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

339 ()
bus
; ()
busunô
;

341 i‡(
√xtunô_c⁄
 <= 0) {

342 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

345 
	}
}

349 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

351 ()
bus
; ()
busunô
;

352 
	}
}

356 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

358 ()
bus
; ()
busunô
;

359 
	}
}

363 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

365 ()
bus
; ()
busunô
;

367 i‡(
√xtunô_bìp
 <= 0) {

368 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

372 i‡(
√xtunô_π˛ock
 <= 0) {

373 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

376 
	}
}

380 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

382 ()
bus
; ()
busunô
;

383 
	}
}

387 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

389 ()
bus
; ()
busunô
;

390 
	}
}

394 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

396 ()
bus
; ()
busunô
;

397 
	}
}

401 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

403 ()
bus
; ()
busunô
;

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@compile/ASST1/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@compile/ASST1/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/ASST1/opt-hangman.h

2 #i‚de‡
_OPT_HANGMAN_H_


3 
	#_OPT_HANGMAN_H_


	)

4 
	#OPT_HANGMAN
 0

	)

	@compile/ASST1/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/ASST1/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/ASST1/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@compile/ASST1/opt-semfs.h

2 #i‚de‡
_OPT_SEMFS_H_


3 
	#_OPT_SEMFS_H_


	)

4 
	#OPT_SEMFS
 1

	)

	@compile/ASST1/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/ASST1/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 1

	)

	@compile/DUMBVM/.depend.__printf.c

1 
	g__¥ötf
.
	go
: ../../../
comm⁄
/
libc
/
¥ötf
/
__¥ötf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
°d¨g
.h

	@compile/DUMBVM/.depend.adddi3.c

1 
	gadddi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
adddi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.anddi3.c

1 
	g™ddi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
™ddi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.array.c

1 
	g¨øy
.
	go
: ../../
lib
/
¨øy
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
¨øy
.
h


	@compile/DUMBVM/.depend.arraytest.c

1 
	g¨øyã°
.
	go
: ../../
ã°
/
¨øyã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
¨øy
.h ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.ashldi3.c

1 
	gashldi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
ashldi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.ashrdi3.c

1 
	gashrdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
ashrdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.atoi.c

1 
	g©oi
.
	go
: ../../../
comm⁄
/
libc
/
°dlib
/
©oi
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.autoconf.c

1 
	gautoc⁄f
.
	go
: ../../
compûe
/
DUMBVM
/
autoc⁄f
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
compûe
/
DUMBVM
/
autoc⁄f
.h

	@compile/DUMBVM/.depend.beep.c

1 
	gbìp
.
	go
: ../../
dev
/
gíîic
/
bìp
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
dev
/
gíîic
/
bìp
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.beep_ltimer.c

1 
	gbìp_…imî
.
	go
: ../../
dev
/
œmebus
/
bìp_…imî
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
gíîic
/
bìp
.h ../../dev/
œmebus
/
…imî
.h \

5 
autoc⁄f
.
h


	@compile/DUMBVM/.depend.bitmap.c

1 
	gbôm≠
.
	go
: ../../
lib
/
bôm≠
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
bôm≠
.
h


	@compile/DUMBVM/.depend.bitmaptest.c

1 
	gbôm≠ã°
.
	go
: ../../
ã°
/
bôm≠ã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
bôm≠
.h ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.bswap.c

1 
	gbsw≠
.
	go
: ../../
lib
/
bsw≠
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

4 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h

	@compile/DUMBVM/.depend.buf.c

1 
	gbuf
.
	go
: ../../
vfs
/
buf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

2 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

3 ../../
ö˛ude
/
kîn
/
î∫o
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
¨øy
.h ../../ö˛ude/
˛ock
.h \

5 ../../
ö˛ude
/
kîn
/
time
.
h
 ../../ö˛ude/
thªad
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

9 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

10 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
synch
.h \

11 ../../
ö˛ude
/
maöbus
.
h
 ../../ö˛ude/
vfs
.h ../../ö˛ude/
fs
.h \

12 ../../
ö˛ude
/
buf
.
h


	@compile/DUMBVM/.depend.bzero.c

1 
	gbzîo
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
bzîo
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.cache-mips161.S

1 
	gˇche
-
	gmùs161
.
	go
: ../../
¨ch
/
mùs
/
loc‹e
/
ˇche
-
mùs161
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h


	@compile/DUMBVM/.depend.clock.c

1 
	g˛ock
.
	go
: ../../
thªad
/
˛ock
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

5 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

7 ../../
ö˛ude
/
wch™
.
h
 ../../ö˛ude/
˛ock
.h ../../ö˛ude/
kîn
/
time
.h \

8 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

11 
ö˛udñöks
/
machöe
/
cuºít
.
h


	@compile/DUMBVM/.depend.cmpdi2.c

1 
	gcmpdi2
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
cmpdi2
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.con_lser.c

1 
	gc⁄_l£r
.
	go
: ../../
dev
/
œmebus
/
c⁄_l£r
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
gíîic
/
c⁄sﬁe
.h ../../dev/
œmebus
/
l£r
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.console.c

1 
	gc⁄sﬁe
.
	go
: ../../
dev
/
gíîic
/
c⁄sﬁe
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
˝u
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

11 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
synch
.h \

12 ../../
dev
/
gíîic
/
c⁄sﬁe
.
h
 ../../
ö˛ude
/
vfs
.h ../../ö˛ude/
devi˚
.h \

13 
autoc⁄f
.
h


	@compile/DUMBVM/.depend.copyinout.c

1 
	gc›yöout
.
	go
: ../../
vm
/
c›yöout
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

6 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

7 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

9 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h \

10 ../../
ö˛ude
/
vm
.
h
 
ö˛udñöks
/
machöe
/vm.h ../../ö˛ude/
c›yöout
.h

	@compile/DUMBVM/.depend.cpu.c

1 
	g˝u
.
	go
: ../../
¨ch
/
mùs
/
thªad
/
˝u
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 
ö˛udñöks
/
mùs
/
•ecüÃeg
.h \

5 
ö˛udñöks
/
mùs
/
å≠‰ame
.
h
 in˛udñöks/
∂©f‹m
/
max˝us
.h \

6 ../../
ö˛ude
/
˝u
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

7 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h


	@compile/DUMBVM/.depend.device.c

1 
	gdevi˚
.
	go
: ../../
vfs
/
devi˚
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
°©
.h \

5 ../../
ö˛ude
/
kîn
/
°©
.
h
 ../../ö˛ude/kîn/
°©ty≥s
.h \

6 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
synch
.h \

8 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

9 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
vnode
.h \

10 ../../
ö˛ude
/
devi˚
.
h


	@compile/DUMBVM/.depend.devnull.c

1 
	gdevnuŒ
.
	go
: ../../
vfs
/
devnuŒ
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
vfs
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
devi˚
.h

	@compile/DUMBVM/.depend.divdi3.c

1 
	gdivdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
divdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.dumbvm.c

1 
	gdumbvm
.
	go
: ../../
¨ch
/
mùs
/
vm
/
dumbvm
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
•l
.
h
 ../../ö˛ude/
˝u
.h ../../ö˛ude/
•ölock
.h \

6 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

8 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
cuºít
.h \

9 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

10 ../../
ö˛ude
/
¨øy
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

11 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

12 
ö˛udñöks
/
mùs
/
éb
.
h
 ../../
ö˛ude
/
addr•a˚
.h ../../ö˛ude/
vm
.h \

13 
›t
-
dumbvm
.
h


	@compile/DUMBVM/.depend.emu.c

1 
	gemu
.
	go
: ../../
dev
/
œmebus
/
emu
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
°©
.h \

5 ../../
ö˛ude
/
kîn
/
°©
.
h
 ../../ö˛ude/kîn/
°©ty≥s
.h \

6 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

8 ../../
ö˛ude
/
memb¨
.
h
 
ö˛udñöks
/
machöe
/membar.h \

9 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

10 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
dev
/
œmebus
/
emu
.h \

11 
ö˛udñöks
/
∂©f‹m
/
bus
.
h
 in˛udñöks/
machöe
/
vm
.h \

12 ../../
dev
/
œmebus
/œmebus.
h
 ../../
ö˛ude
/
˝u
.h \

13 ../../
ö˛ude
/
thªadli°
.
h
 ../../ö˛ude/
vfs
.h ../../ö˛ude/
emufs
.h \

14 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.emu_att.c

1 
	gemu_©t
.
	go
: ../../
dev
/
œmebus
/
emu_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
dev
/
œmebus
/
emu
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.exception-mips1.S

1 
	gex˚±i⁄
-
	gmùs1
.
	go
: ../../
¨ch
/
mùs
/
loc‹e
/
ex˚±i⁄
-
mùs1
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h
 in˛udñöks/mùs/
•ecüÃeg
.h

	@compile/DUMBVM/.depend.fstest.c

1 
	gf°e°
.
	go
: ../../
ã°
/
f°e°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

6 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

7 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

9 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

10 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
vfs
.h ../../ö˛ude/
fs
.h \

11 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.iordi3.c

1 
	gi‹di3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
i‹di3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.kgets.c

1 
	gkgës
.
	go
: ../../
lib
/
kgës
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.kmalloc.c

1 
	gkmÆloc
.
	go
: ../../
vm
/
kmÆloc
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

5 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
vm
.h \

6 
ö˛udñöks
/
machöe
/
vm
.
h


	@compile/DUMBVM/.depend.kmalloctest.c

1 
	gkmÆlo˘e°
.
	go
: ../../
ã°
/
kmÆlo˘e°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

6 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

8 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

9 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
vm
.h 
ö˛udñöks
/
machöe
/vm.h \

10 ../../
ö˛ude
/
ã°
.
h
 
›t
-
dumbvm
.h

	@compile/DUMBVM/.depend.kprintf.c

1 
	gk¥ötf
.
	go
: ../../
lib
/
k¥ötf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
uni°d
.h \

4 ../../
ö˛ude
/
°d¨g
.
h
 ../../ö˛ude/
cdefs
.h ../../ö˛ude/
lib
.h \

5 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
˝u
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

11 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
synch
.h \

12 ../../
ö˛ude
/
maöbus
.
h
 ../../ö˛ude/
vfs
.h ../../
dev
/
œmebus
/
…ø˚
.h

	@compile/DUMBVM/.depend.lamebus.c

1 
	gœmebus
.
	go
: ../../
dev
/
œmebus
/œmebus.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

5 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h \

7 ../../
ö˛ude
/
memb¨
.
h
 
ö˛udñöks
/
machöe
/membar.h \

8 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h \

9 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h \

10 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

11 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
dev
/
œmebus
/lamebus.h

	@compile/DUMBVM/.depend.lamebus_machdep.c

1 
	gœmebus_machdï
.
	go
: ../../
¨ch
/
sys161
/
dev
/
œmebus_machdï
.
c
 \

2 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

3 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

4 ../../
ö˛ude
/
kîn
/
uni°d
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 
ö˛udñöks
/
mùs
/
•ecüÃeg
.h \

6 
ö˛udñöks
/
mùs
/
å≠‰ame
.
h
 ../../
ö˛ude
/
˝u
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

8 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

9 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
˛ock
.h \

10 ../../
ö˛ude
/
kîn
/
time
.
h
 ../../ö˛ude/
thªad
.h ../../ö˛ude/
¨øy
.h \

11 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

12 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

13 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
memb¨
.h \

14 
ö˛udñöks
/
machöe
/
memb¨
.
h
 ../../
ö˛ude
/
synch
.h \

15 ../../
ö˛ude
/
maöbus
.
h
 
ö˛udñöks
/
sys161
/
bus
.h \

16 ../../
dev
/
œmebus
/œmebus.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lhd.c

1 
	glhd
.
	go
: ../../
dev
/
œmebus
/
lhd
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
memb¨
.h \

6 
ö˛udñöks
/
machöe
/
memb¨
.
h
 ../../
ö˛ude
/
synch
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

8 
ö˛udñöks
/
machöe
/
•ölock
.
h
 in˛udñöks/
∂©f‹m
/
bus
.h \

9 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
dev
/
œmebus
/lamebus.h \

10 ../../
ö˛ude
/
˝u
.
h
 ../../ö˛ude/
thªadli°
.h ../../ö˛ude/
vfs
.h \

11 ../../
ö˛ude
/
¨øy
.
h
 ../../
dev
/
œmebus
/
lhd
.h ../../ö˛ude/
devi˚
.h \

12 
autoc⁄f
.
h


	@compile/DUMBVM/.depend.lhd_att.c

1 
	glhd_©t
.
	go
: ../../
dev
/
œmebus
/
lhd_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
dev
/
œmebus
/
lhd
.h ../../
ö˛ude
/
devi˚
.h \

8 
autoc⁄f
.
h


	@compile/DUMBVM/.depend.loadelf.c

1 
	glﬂdñf
.
	go
: ../../
sysˇŒ
/
lﬂdñf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
¥oc
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
cuºít
.h \

8 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

9 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
thªadli°
.h \

10 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

11 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
addr•a˚
.h \

12 ../../
ö˛ude
/
vm
.
h
 
ö˛udñöks
/
machöe
/vm.h 
›t
-
dumbvm
.h \

13 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
ñf
.h 
ö˛udñöks
/
machöe
/elf.h

	@compile/DUMBVM/.depend.lrandom.c

1 
	gÃ™dom
.
	go
: ../../
dev
/
œmebus
/
Ã™dom
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

5 
ö˛udñöks
/
∂©f‹m
/
bus
.
h
 in˛udñöks/
machöe
/
vm
.h \

6 ../../
dev
/
œmebus
/œmebus.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

7 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 ../../
dev
/
œmebus
/
Ã™dom
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lrandom_att.c

1 
	gÃ™dom_©t
.
	go
: ../../
dev
/
œmebus
/
Ã™dom_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
dev
/
œmebus
/
Ã™dom
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lser.c

1 
	gl£r
.
	go
: ../../
dev
/
œmebus
/
l£r
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

5 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h \

6 
ö˛udñöks
/
∂©f‹m
/
bus
.
h
 in˛udñöks/
machöe
/
vm
.h \

7 ../../
dev
/
œmebus
/œmebus.
h
 ../../
ö˛ude
/
˝u
.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 ../../
dev
/
œmebus
/
l£r
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lser_att.c

1 
	gl£r_©t
.
	go
: ../../
dev
/
œmebus
/
l£r_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
dev
/
œmebus
/
l£r
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.lshldi3.c

1 
	glshldi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
lshldi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.lshrdi3.c

1 
	glshrdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
lshrdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.ltimer.c

1 
	g…imî
.
	go
: ../../
dev
/
œmebus
/
…imî
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
˛ock
.h \

5 ../../
ö˛ude
/
kîn
/
time
.
h
 
ö˛udñöks
/
∂©f‹m
/
bus
.h \

6 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
dev
/
œmebus
/lamebus.h \

7 ../../
ö˛ude
/
˝u
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

8 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
thªadli°
.h \

9 ../../
dev
/
œmebus
/
…imî
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.ltimer_att.c

1 
	g…imî_©t
.
	go
: ../../
dev
/
œmebus
/
…imî_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
dev
/
œmebus
/
…imî
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.ltrace.c

1 
	g…ø˚
.
	go
: ../../
dev
/
œmebus
/
…ø˚
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 
ö˛udñöks
/
∂©f‹m
/
bus
.h in˛udñöks/
machöe
/
vm
.h \

5 ../../
dev
/
œmebus
/œmebus.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

6 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 ../../
dev
/
œmebus
/
…ø˚
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.ltrace_att.c

1 
	g…ø˚_©t
.
	go
: ../../
dev
/
œmebus
/
…ø˚_©t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
dev
/
œmebus
/œmebus.h ../../
ö˛ude
/
˝u
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
dev
/
œmebus
/
…ø˚
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.main.c

1 
	gmaö
.
	go
: ../../
maö
/maö.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
ªboŸ
.
h
 ../../ö˛ude/kîn/
uni°d
.h \

5 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

6 ../../
ö˛ude
/
•l
.
h
 ../../ö˛ude/
˛ock
.h ../../ö˛ude/
kîn
/
time
.h \

7 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

8 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

9 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

10 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

11 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
cuºít
.h \

12 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
synch
.h ../../ö˛ude/
vm
.h \

13 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
maöbus
.h ../../ö˛ude/
vfs
.h \

14 ../../
ö˛ude
/
buf
.
h
 ../../ö˛ude/
devi˚
.h ../../ö˛ude/
sysˇŒ
.h \

15 ../../
ö˛ude
/
ã°
.
h
 ../../ö˛ude/
vîsi⁄
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.memcpy.c

1 
	gmem˝y
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
mem˝y
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.memmove.c

1 
	gmemmove
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
memmove
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.memset.c

1 
	gmem£t
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
mem£t
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.menu.c

1 
	gmíu
.
	go
: ../../
maö
/
míu
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
ªboŸ
.
h
 ../../ö˛ude/kîn/
uni°d
.h \

5 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limôs.h ../../ö˛ude/
lib
.h \

6 ../../
ö˛ude
/
cdefs
.
h
 
›t
-
nﬂs£πs
.h ../../ö˛ude/
uio
.h \

7 ../../
ö˛ude
/
kîn
/
iovec
.
h
 ../../ö˛ude/
˛ock
.h \

8 ../../
ö˛ude
/
kîn
/
time
.
h
 ../../ö˛ude/
thªad
.h ../../ö˛ude/
¨øy
.h \

9 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

10 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

11 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

12 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
¥oc
.h \

13 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
buf
.h ../../ö˛ude/
sfs
.h \

14 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
kîn
/
sfs
.h \

15 ../../
ö˛ude
/
sysˇŒ
.
h
 ../../ö˛ude/
ã°
.h 
›t
-
synch¥obs
.h o±-
sfs
.h \

16 
›t
-
√t
.
h


	@compile/DUMBVM/.depend.misc.c

1 
	gmisc
.
	go
: ../../
lib
/
misc
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

2 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

3 ../../
ö˛ude
/
kîn
/
îrmsg
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.moddi3.c

1 
	gmoddi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
moddi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.muldi3.c

1 
	gmuldi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
muldi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.negdi2.c

1 
	g√gdi2
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
√gdi2
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.notdi2.c

1 
	gnŸdi2
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
nŸdi2
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.proc.c

1 
	g¥oc
.
	go
: ../../
¥oc
/¥oc.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
cdefs
.h \

4 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

5 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
cuºít
.h \

6 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

8 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

9 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

10 ../../
ö˛ude
/
addr•a˚
.
h
 ../../ö˛ude/
vm
.h 
ö˛udñöks
/
machöe
/vm.h \

11 
›t
-
dumbvm
.
h
 ../../
ö˛ude
/
vnode
.h

	@compile/DUMBVM/.depend.qdivrem.c

1 
	gqdivªm
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
qdivªm
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.ram.c

1 
	gøm
.
	go
: ../../
¨ch
/
mùs
/
vm
/
øm
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
vm
.h 
ö˛udñöks
/
machöe
/vm.h \

5 ../../
ö˛ude
/
maöbus
.
h


	@compile/DUMBVM/.depend.random.c

1 
	gøndom
.
	go
: ../../
dev
/
gíîic
/
øndom
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

6 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
¨øy
.h ../../
dev
/
gíîic
/
øndom
.h \

7 ../../
ö˛ude
/
devi˚
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.random_lrandom.c

1 
	gøndom_Ã™dom
.
	go
: ../../
dev
/
œmebus
/
øndom_Ã™dom
.
c
 \

2 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

3 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
dev
/
gíîic
/
øndom
.
h
 ../../
ö˛ude
/
devi˚
.h \

6 ../../
dev
/
œmebus
/
Ã™dom
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.rtclock.c

1 
	gπ˛ock
.
	go
: ../../
dev
/
gíîic
/
π˛ock
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
˛ock
.
h
 ../../ö˛ude/
kîn
/
time
.h \

6 ../../
dev
/
gíîic
/
π˛ock
.
h
 
autoc⁄f
.h

	@compile/DUMBVM/.depend.rtclock_ltimer.c

1 
	gπ˛ock_…imî
.
	go
: ../../
dev
/
œmebus
/
π˛ock_…imî
.
c
 \

2 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

3 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
dev
/
gíîic
/
π˛ock
.
h
 ../../dev/
œmebus
/
…imî
.h 
autoc⁄f
.h

	@compile/DUMBVM/.depend.runprogram.c

1 
	gru≈rogøm
.
	go
: ../../
sysˇŒ
/
ru≈rogøm
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
¥oc
.h ../../ö˛ude/
•ölock
.h \

6 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

7 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h \

8 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
thªadli°
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
addr•a˚
.h \

11 ../../
ö˛ude
/
vm
.
h
 
ö˛udñöks
/
machöe
/vm.h 
›t
-
dumbvm
.h \

12 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
sysˇŒ
.h ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.semfs_fsops.c

1 
	g£mfs_fs›s
.
	go
: ../../
fs
/
£mfs
/
£mfs_fs›s
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
cdefs
.h \

5 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

6 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
lib
.h \

7 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
fs
.h ../../ö˛ude/
vnode
.h \

8 ../../
fs
/
£mfs
/£mfs.
h


	@compile/DUMBVM/.depend.semfs_obj.c

1 
	g£mfs_obj
.
	go
: ../../
fs
/
£mfs
/
£mfs_obj
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
cdefs
.h \

5 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

6 ../../
fs
/
£mfs
/£mfs.
h
 ../../
ö˛ude
/
¨øy
.h ../../ö˛ude/
lib
.h \

7 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
fs
.h ../../ö˛ude/
vnode
.h

	@compile/DUMBVM/.depend.semfs_vnops.c

1 
	g£mfs_vn›s
.
	go
: ../../
fs
/
£mfs
/
£mfs_vn›s
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
°©
.h \

5 ../../
ö˛ude
/
kîn
/
°©
.
h
 ../../ö˛ude/kîn/
°©ty≥s
.h \

6 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
synch
.h \

7 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
cdefs
.h ../../ö˛ude/
h™gm™
.h \

8 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
thªad
.h \

9 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
lib
.h 
›t
-
nﬂs£πs
.h \

10 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

11 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

12 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
cuºít
.h \

13 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
vfs
.h ../../ö˛ude/
vnode
.h \

14 ../../
fs
/
£mfs
/£mfs.
h
 ../../
ö˛ude
/fs.h

	@compile/DUMBVM/.depend.semunit.c

1 
	g£munô
.
	go
: ../../
ã°
/
£munô
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

5 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
synch
.h \

6 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

9 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
˛ock
.h \

10 ../../
ö˛ude
/
kîn
/
time
.
h
 ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.setjmp.S

1 
	g£tjmp
.
	go
: ../../../
comm⁄
/
libc
/
¨ch
/
mùs
/
£tjmp
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h


	@compile/DUMBVM/.depend.sfs_balloc.c

1 
	gsfs_bÆloc
.
	go
: ../../
fs
/
sfs
/
sfs_bÆloc
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
bôm≠
.h ../../ö˛ude/
synch
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
buf
.h ../../ö˛ude/
sfs
.h \

7 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
kîn
/
sfs
.h \

8 ../../
fs
/
sfs
/
sf•riv©e
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h

	@compile/DUMBVM/.depend.sfs_bmap.c

1 
	gsfs_bm≠
.
	go
: ../../
fs
/
sfs
/
sfs_bm≠
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

6 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
vfs
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
buf
.h ../../ö˛ude/
sfs
.h \

8 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
kîn
/
sfs
.h \

9 ../../
fs
/
sfs
/
sf•riv©e
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h

	@compile/DUMBVM/.depend.sfs_dir.c

1 
	gsfs_dú
.
	go
: ../../
fs
/
sfs
/
sfs_dú
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

6 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
buf
.h \

7 ../../
ö˛ude
/
sfs
.
h
 ../../ö˛ude/
fs
.h ../../ö˛ude/
vnode
.h \

8 ../../
ö˛ude
/
kîn
/
sfs
.
h
 ../../
fs
/sfs/
sf•riv©e
.h ../../ö˛ude/
uio
.h \

9 ../../
ö˛ude
/
kîn
/
iovec
.
h


	@compile/DUMBVM/.depend.sfs_fsops.c

1 
	gsfs_fs›s
.
	go
: ../../
fs
/
sfs
/
sfs_fs›s
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
bôm≠
.h ../../ö˛ude/
synch
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
uio
.h \

8 ../../
ö˛ude
/
kîn
/
iovec
.
h
 ../../ö˛ude/
vfs
.h ../../ö˛ude/
buf
.h \

9 ../../
ö˛ude
/
devi˚
.
h
 ../../ö˛ude/
sfs
.h ../../ö˛ude/
fs
.h \

10 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
kîn
/
sfs
.h ../../
fs
/sfs/
sf•riv©e
.h

	@compile/DUMBVM/.depend.sfs_inode.c

1 
	gsfs_öode
.
	go
: ../../
fs
/
sfs
/
sfs_öode
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

6 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
thªad
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

9 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

10 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
vfs
.h ../../ö˛ude/
buf
.h \

11 ../../
ö˛ude
/
sfs
.
h
 ../../ö˛ude/
fs
.h ../../ö˛ude/
vnode
.h \

12 ../../
ö˛ude
/
kîn
/
sfs
.
h
 ../../
fs
/sfs/
sf•riv©e
.h ../../ö˛ude/
uio
.h \

13 ../../
ö˛ude
/
kîn
/
iovec
.
h


	@compile/DUMBVM/.depend.sfs_io.c

1 
	gsfs_io
.
	go
: ../../
fs
/
sfs
/
sfs_io
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
synch
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
vfs
.h \

8 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
buf
.h ../../ö˛ude/
devi˚
.h \

9 ../../
ö˛ude
/
sfs
.
h
 ../../ö˛ude/
fs
.h ../../ö˛ude/
vnode
.h \

10 ../../
ö˛ude
/
kîn
/
sfs
.
h
 ../../
fs
/sfs/
sf•riv©e
.h

	@compile/DUMBVM/.depend.sfs_jphys.c

1 
	gsfs_jphys
.
	go
: ../../
fs
/
sfs
/
sfs_jphys
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
wch™
.
h
 ../../ö˛ude/
synch
.h ../../ö˛ude/
•ölock
.h \

6 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

7 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
cuºít
.h \

8 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

9 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
thªadli°
.h \

10 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

11 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
buf
.h \

12 ../../
ö˛ude
/
sfs
.
h
 ../../ö˛ude/
fs
.h ../../ö˛ude/
vnode
.h \

13 ../../
ö˛ude
/
kîn
/
sfs
.
h
 ../../
fs
/sfs/
sf•riv©e
.h ../../ö˛ude/
uio
.h \

14 ../../
ö˛ude
/
kîn
/
iovec
.
h


	@compile/DUMBVM/.depend.sfs_vnops.c

1 
	gsfs_vn›s
.
	go
: ../../
fs
/
sfs
/
sfs_vn›s
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
limôs
.h \

5 ../../
ö˛ude
/
kîn
/
limôs
.
h
 ../../ö˛ude/
°©
.h \

6 ../../
ö˛ude
/
kîn
/
°©
.
h
 ../../ö˛ude/kîn/
°©ty≥s
.h \

7 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

8 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
synch
.h \

9 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

10 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
vfs
.h \

11 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
buf
.h ../../ö˛ude/
sfs
.h \

12 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h ../../ö˛ude/
kîn
/
sfs
.h \

13 ../../
fs
/
sfs
/
sf•riv©e
.
h


	@compile/DUMBVM/.depend.snprintf.c

1 
	g¢¥ötf
.
	go
: ../../../
comm⁄
/
libc
/
¥ötf
/
¢¥ötf
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
°d¨g
.h

	@compile/DUMBVM/.depend.spinlock.c

1 
	g•ölock
.
	go
: ../../
thªad
/
•ölock
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

5 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h ../../ö˛ude/
•l
.h \

7 ../../
ö˛ude
/
memb¨
.
h
 
ö˛udñöks
/
machöe
/membar.h \

8 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h \

9 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h \

10 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

11 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h


	@compile/DUMBVM/.depend.spl.c

1 
	g•l
.
	go
: ../../
thªad
/
•l
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˝u
.h ../../ö˛ude/
•ölock
.h \

5 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

6 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h ../../ö˛ude/
•l
.h \

7 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

9 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

10 
ö˛udñöks
/
machöe
/
cuºít
.
h


	@compile/DUMBVM/.depend.start.S

1 
	g°¨t
.
	go
: ../../
¨ch
/
sys161
/
maö
/
°¨t
.
S
 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h
 \

2 
ö˛udñöks
/
mùs
/
•ecüÃeg
.
h


	@compile/DUMBVM/.depend.strcat.c

1 
	g°rˇt
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°rˇt
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strchr.c

1 
	g°rchr
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°rchr
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strcmp.c

1 
	g°rcmp
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°rcmp
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strcpy.c

1 
	g°r˝y
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°r˝y
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strlen.c

1 
	g°æí
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°æí
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strrchr.c

1 
	g°ºchr
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°ºchr
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.strtok_r.c

1 
	g°πok_r
.
	go
: ../../../
comm⁄
/
libc
/
°rög
/
°πok_r
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h


	@compile/DUMBVM/.depend.subdi3.c

1 
	gsubdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
subdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.switch.S

1 .
	go
: ../../
¨ch
/
mùs
/
thªad
/.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h


	@compile/DUMBVM/.depend.switchframe.c

1 
	gswôch‰ame
.
	go
: ../../
¨ch
/
mùs
/
thªad
/
swôch‰ame
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
thªad¥iv©e
.h \

9 ../../
¨ch
/
mùs
/
thªad
/
swôch‰ame
.
h


	@compile/DUMBVM/.depend.synch.c

1 
	gsynch
.
	go
: ../../
thªad
/
synch
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

5 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
wch™
.h \

6 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

9 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
synch
.h

	@compile/DUMBVM/.depend.synchtest.c

1 
	gsynchã°
.
	go
: ../../
ã°
/
synchã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
˛ock
.h ../../ö˛ude/
kîn
/
time
.h \

5 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

6 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

8 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

9 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
ã°
.h

	@compile/DUMBVM/.depend.syscall.c

1 
	gsysˇŒ
.
	go
: ../../
¨ch
/
mùs
/
sysˇŒ
/sysˇŒ.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
sysˇŒ
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

5 
›t
-
nﬂs£πs
.
h
 
ö˛udñöks
/
mùs
/
å≠‰ame
.h ../../
ö˛ude
/
thªad
.h \

6 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

7 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
thªadli°
.h \

8 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

9 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
cuºít
.h \

10 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
sysˇŒ
.h

	@compile/DUMBVM/.depend.thread.c

1 
	gthªad
.
	go
: ../../
thªad
/thªad.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
˝u
.h ../../ö˛ude/
•ölock
.h \

6 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
vm
.h ../../ö˛ude/
•l
.h \

8 ../../
ö˛ude
/
wch™
.
h
 ../../ö˛ude/
thªad
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
thªad¥iv©e
.h \

11 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
cuºít
.h \

12 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
synch
.h \

13 ../../
ö˛ude
/
addr•a˚
.
h
 ../../ö˛ude/
vm
.h 
›t
-
dumbvm
.h \

14 ../../
ö˛ude
/
maöbus
.
h
 ../../ö˛ude/
vnode
.h

	@compile/DUMBVM/.depend.thread_machdep.c

1 
	gthªad_machdï
.
	go
: ../../
¨ch
/
mùs
/
thªad
/
thªad_machdï
.
c
 \

2 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

3 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
thªad
.
h
 ../../ö˛ude/
¨øy
.h ../../ö˛ude/
•ölock
.h \

6 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

7 ../../
ö˛ude
/
thªadli°
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

8 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

9 ../../
ö˛ude
/
thªad¥iv©e
.
h


	@compile/DUMBVM/.depend.threadlist.c

1 
	gthªadli°
.
	go
: ../../
thªad
/
thªadli°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h


	@compile/DUMBVM/.depend.threadlisttest.c

1 
	gthªadli°ã°
.
	go
: ../../
ã°
/
thªadli°ã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
ã°
.h

	@compile/DUMBVM/.depend.threadstart.S

1 
	gthªad°¨t
.
	go
: ../../
¨ch
/
mùs
/
thªad
/
thªad°¨t
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h


	@compile/DUMBVM/.depend.threadtest.c

1 
	gthªadã°
.
	go
: ../../
ã°
/
thªadã°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
lib
.h ../../ö˛ude/
cdefs
.h \

4 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
synch
.h \

9 ../../
ö˛ude
/
ã°
.
h


	@compile/DUMBVM/.depend.time.c

1 
	gtime
.
	go
: ../../
lib
/
time
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

2 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

3 ../../
ö˛ude
/
˛ock
.
h
 ../../ö˛ude/
kîn
/
time
.h

	@compile/DUMBVM/.depend.time_syscalls.c

1 
	gtime_sysˇŒs
.
	go
: ../../
sysˇŒ
/
time_sysˇŒs
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
˛ock
.h \

4 ../../
ö˛ude
/
kîn
/
time
.
h
 ../../ö˛ude/
c›yöout
.h \

5 ../../
ö˛ude
/
sysˇŒ
.
h
 ../../ö˛ude/
cdefs
.h

	@compile/DUMBVM/.depend.tlb-mips161.S

1 
	géb
-
	gmùs161
.
	go
: ../../
¨ch
/
mùs
/
vm
/
éb
-
mùs161
.
S
 \

2 
ö˛udñöks
/
kîn
/
mùs
/
ªgdefs
.
h
 in˛udñöks/mùs/
•ecüÃeg
.h

	@compile/DUMBVM/.depend.trap.c

1 
	gå≠
.
	go
: ../../
¨ch
/
mùs
/
loc‹e
/
å≠
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
sig«l
.h \

4 
ö˛udñöks
/
kîn
/
machöe
/
sig«l
.
h
 ../../
ö˛ude
/kern/signal.h \

5 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

6 
ö˛udñöks
/
mùs
/
•ecüÃeg
.
h
 in˛udñöks/mùs/
å≠‰ame
.h \

7 ../../
ö˛ude
/
˝u
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

8 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
thªadli°
.h \

9 
ö˛udñöks
/
machöe
/
vm
.
h
 ../../
ö˛ude
/
•l
.h ../../ö˛ude/
thªad
.h \

10 ../../
ö˛ude
/
¨øy
.
h
 
ö˛udñöks
/
machöe
/
thªad
.h \

11 ../../
ö˛ude
/
£tjmp
.
h
 
ö˛udñöks
/
kîn
/
machöe
/setjmp.h \

12 ../../
ö˛ude
/
cuºít
.
h
 
ö˛udñöks
/
machöe
/current.h \

13 ../../
ö˛ude
/
vm
.
h
 ../../ö˛ude/
maöbus
.h ../../ö˛ude/
sysˇŒ
.h

	@compile/DUMBVM/.depend.tt3.c

1 
	gâ3
.
	go
: ../../
ã°
/
â3
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

2 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

3 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

4 ../../
ö˛ude
/
wch™
.
h
 ../../ö˛ude/
thªad
.h ../../ö˛ude/
¨øy
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
thªadli°
.h \

7 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

8 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
synch
.h \

9 ../../
ö˛ude
/
ã°
.
h


	@compile/DUMBVM/.depend.ucmpdi2.c

1 
	gucmpdi2
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
ucmpdi2
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.udivdi3.c

1 
	gudivdi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
udivdi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.uio.c

1 
	guio
.
	go
: ../../
lib
/
uio
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 ../../ö˛ude/
kîn
/types.h \

2 
ö˛udñöks
/
kîn
/
machöe
/
ty≥s
.
h
 includelinks/machine/types.h \

3 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

4 ../../
ö˛ude
/
uio
.
h
 ../../ö˛ude/
kîn
/
iovec
.h ../../ö˛ude/
¥oc
.h \

5 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

6 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
cuºít
.h \

7 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

8 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
thªadli°
.h \

9 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

10 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
c›yöout
.h

	@compile/DUMBVM/.depend.umoddi3.c

1 
	gumoddi3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
umoddi3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/.depend.vfscwd.c

1 
	gvfscwd
.
	go
: ../../
vfs
/
vfscwd
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
°©
.
h
 ../../ö˛ude/
kîn
/stat.h \

5 ../../
ö˛ude
/
kîn
/
°©ty≥s
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

6 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
uio
.h ../../ö˛ude/
kîn
/
iovec
.h \

7 ../../
ö˛ude
/
¥oc
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

8 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
cuºít
.h \

9 
ö˛udñöks
/
machöe
/
cuºít
.
h
 ../../
ö˛ude
/
thªad
.h \

10 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
thªadli°
.h \

11 
ö˛udñöks
/
machöe
/
thªad
.
h
 ../../
ö˛ude
/
£tjmp
.h \

12 
ö˛udñöks
/
kîn
/
machöe
/
£tjmp
.
h
 ../../
ö˛ude
/
vfs
.h \

13 ../../
ö˛ude
/
fs
.
h
 ../../ö˛ude/
vnode
.h

	@compile/DUMBVM/.depend.vfsfail.c

1 
	gvfsÁû
.
	go
: ../../
vfs
/
vfsÁû
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
cdefs
.h \

5 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h

	@compile/DUMBVM/.depend.vfslist.c

1 
	gvf¶i°
.
	go
: ../../
vfs
/
vf¶i°
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
synch
.h ../../ö˛ude/
•ölock
.h \

6 ../../
ö˛ude
/
h™gm™
.
h
 
›t
-h™gm™.h 
ö˛udñöks
/
machöe
/
•ölock
.h \

7 ../../
ö˛ude
/
vfs
.
h
 ../../ö˛ude/
fs
.h ../../ö˛ude/
vnode
.h \

8 ../../
ö˛ude
/
devi˚
.
h


	@compile/DUMBVM/.depend.vfslookup.c

1 
	gvf¶ookup
.
	go
: ../../
vfs
/
vf¶ookup
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limôs.h ../../ö˛ude/
lib
.h \

5 ../../
ö˛ude
/
cdefs
.
h
 
›t
-
nﬂs£πs
.h ../../ö˛ude/
synch
.h \

6 ../../
ö˛ude
/
•ölock
.
h
 ../../ö˛ude/
h™gm™
.h 
›t
-hangman.h \

7 
ö˛udñöks
/
machöe
/
•ölock
.
h
 ../../
ö˛ude
/
vfs
.h \

8 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
fs
.h ../../ö˛ude/
vnode
.h

	@compile/DUMBVM/.depend.vfspath.c

1 
	gvf•©h
.
	go
: ../../
vfs
/
vf•©h
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
kîn
/
f˙é
.
h
 ../../ö˛ude/
limôs
.h \

5 ../../
ö˛ude
/
kîn
/
limôs
.
h
 ../../ö˛ude/
lib
.h ../../ö˛ude/
cdefs
.h \

6 
›t
-
nﬂs£πs
.
h
 ../../
ö˛ude
/
vfs
.h ../../ö˛ude/
¨øy
.h \

7 ../../
ö˛ude
/
vnode
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

8 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h

	@compile/DUMBVM/.depend.vnode.c

1 
	gvnode
.
	go
: ../../
vfs
/
vnode
.
c
 ../../
ö˛ude
/
ty≥s
.
h
 \

2 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

3 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
kîn
/
î∫o
.h \

4 ../../
ö˛ude
/
lib
.
h
 ../../ö˛ude/
cdefs
.h 
›t
-
nﬂs£πs
.h \

5 ../../
ö˛ude
/
synch
.
h
 ../../ö˛ude/
•ölock
.h ../../ö˛ude/
h™gm™
.h \

6 
›t
-
h™gm™
.
h
 
ö˛udñöks
/
machöe
/
•ölock
.h ../../
ö˛ude
/
vfs
.h \

7 ../../
ö˛ude
/
¨øy
.
h
 ../../ö˛ude/
vnode
.h

	@compile/DUMBVM/.depend.xordi3.c

1 
	gx‹di3
.
	go
: ../../../
comm⁄
/
gcc
-
mûlicode
/
x‹di3
.
c
 \

2 ../../../
comm⁄
/
gcc
-
mûlicode
/
l⁄gl⁄g
.
h
 ../../
ö˛ude
/
ty≥s
.h \

3 ../../
ö˛ude
/
kîn
/
ty≥s
.
h
 
ö˛udñöks
/kîn/
machöe
/types.h \

4 
ö˛udñöks
/
machöe
/
ty≥s
.
h
 ../../
ö˛ude
/
ídün
.h \

5 ../../
ö˛ude
/
kîn
/
ídün
.
h
 
ö˛udñöks
/kîn/
machöe
/endian.h \

6 ../../
ö˛ude
/
limôs
.
h
 ../../ö˛ude/
kîn
/limits.h

	@compile/DUMBVM/autoconf.c

2 
	~<ty≥s.h
>

3 
	~<lib.h
>

4 
	~"autoc⁄f.h
"

6 
autoc⁄f_bìp
(
bìp_so·c
 *, );

7 
autoc⁄f_c⁄
(
c⁄_so·c
 *, );

8 
autoc⁄f_emu
(
emu_so·c
 *, );

9 
autoc⁄f_lhd
(
lhd_so·c
 *, );

10 
autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *, );

11 
autoc⁄f_l£r
(
l£r_so·c
 *, );

12 
autoc⁄f_…imî
(
…imî_so·c
 *, );

13 
autoc⁄f_…ø˚
(
…ø˚_so·c
 *, );

14 
autoc⁄f_øndom
(
øndom_so·c
 *, );

15 
autoc⁄f_π˛ock
(
π˛ock_so·c
 *, );

16 
	g√xtunô_bìp
;

17 
	g√xtunô_c⁄
;

18 
	g√xtunô_emu
;

19 
	g√xtunô_lhd
;

20 
	g√xtunô_Ã™dom
;

21 
	g√xtunô_l£r
;

22 
	g√xtunô_…imî
;

23 
	g√xtunô_…ø˚
;

24 
	g√xtunô_øndom
;

25 
	g√xtunô_π˛ock
;

29 
	$åy©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

31 
emu_so·c
 *
dev
;

32 
ªsu…
;

34 
dev
 = 
	`©èch_emu_to_œmebus
(
devunô
, 
bus
);

35 i‡(
dev
==
NULL
) {

38 
	`k¥ötf
("emu%dáàœmebus%d", 
devunô
, 
busunô
);

39 
ªsu…
 = 
	`c⁄fig_emu
(
dev
, 
devunô
);

40 i‡(
ªsu…
 != 0) {

41 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

43  
ªsu…
;

45 
	`k¥ötf
("\n");

46 
√xtunô_emu
 = 
devunô
+1;

47 
	`autoc⁄f_emu
(
dev
, 
devunô
);

49 
	}
}

53 
	$åy©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

55 
…ø˚_so·c
 *
dev
;

56 
ªsu…
;

58 
dev
 = 
	`©èch_…ø˚_to_œmebus
(
devunô
, 
bus
);

59 i‡(
dev
==
NULL
) {

62 
	`k¥ötf
("…ø˚%dáàœmebus%d", 
devunô
, 
busunô
);

63 
ªsu…
 = 
	`c⁄fig_…ø˚
(
dev
, 
devunô
);

64 i‡(
ªsu…
 != 0) {

65 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

67  
ªsu…
;

69 
	`k¥ötf
("\n");

70 
√xtunô_…ø˚
 = 
devunô
+1;

71 
	`autoc⁄f_…ø˚
(
dev
, 
devunô
);

73 
	}
}

77 
	$åy©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

79 
…imî_so·c
 *
dev
;

80 
ªsu…
;

82 
dev
 = 
	`©èch_…imî_to_œmebus
(
devunô
, 
bus
);

83 i‡(
dev
==
NULL
) {

86 
	`k¥ötf
("…imî%dáàœmebus%d", 
devunô
, 
busunô
);

87 
ªsu…
 = 
	`c⁄fig_…imî
(
dev
, 
devunô
);

88 i‡(
ªsu…
 != 0) {

89 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

91  
ªsu…
;

93 
	`k¥ötf
("\n");

94 
√xtunô_…imî
 = 
devunô
+1;

95 
	`autoc⁄f_…imî
(
dev
, 
devunô
);

97 
	}
}

101 
	$åy©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

103 
Ã™dom_so·c
 *
dev
;

104 
ªsu…
;

106 
dev
 = 
	`©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
);

107 i‡(
dev
==
NULL
) {

110 
	`k¥ötf
("Ã™dom%dáàœmebus%d", 
devunô
, 
busunô
);

111 
ªsu…
 = 
	`c⁄fig_Ã™dom
(
dev
, 
devunô
);

112 i‡(
ªsu…
 != 0) {

113 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

115  
ªsu…
;

117 
	`k¥ötf
("\n");

118 
√xtunô_Ã™dom
 = 
devunô
+1;

119 
	`autoc⁄f_Ã™dom
(
dev
, 
devunô
);

121 
	}
}

125 
	$åy©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

127 
lhd_so·c
 *
dev
;

128 
ªsu…
;

130 
dev
 = 
	`©èch_lhd_to_œmebus
(
devunô
, 
bus
);

131 i‡(
dev
==
NULL
) {

134 
	`k¥ötf
("lhd%dáàœmebus%d", 
devunô
, 
busunô
);

135 
ªsu…
 = 
	`c⁄fig_lhd
(
dev
, 
devunô
);

136 i‡(
ªsu…
 != 0) {

137 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

139  
ªsu…
;

141 
	`k¥ötf
("\n");

142 
√xtunô_lhd
 = 
devunô
+1;

143 
	`autoc⁄f_lhd
(
dev
, 
devunô
);

145 
	}
}

149 
	$åy©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
, 
busunô
)

151 
l£r_so·c
 *
dev
;

152 
ªsu…
;

154 
dev
 = 
	`©èch_l£r_to_œmebus
(
devunô
, 
bus
);

155 i‡(
dev
==
NULL
) {

158 
	`k¥ötf
("l£r%dáàœmebus%d", 
devunô
, 
busunô
);

159 
ªsu…
 = 
	`c⁄fig_l£r
(
dev
, 
devunô
);

160 i‡(
ªsu…
 != 0) {

161 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

163  
ªsu…
;

165 
	`k¥ötf
("\n");

166 
√xtunô_l£r
 = 
devunô
+1;

167 
	`autoc⁄f_l£r
(
dev
, 
devunô
);

169 
	}
}

173 
	$åy©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

175 
bìp_so·c
 *
dev
;

176 
ªsu…
;

178 
dev
 = 
	`©èch_bìp_to_…imî
(
devunô
, 
bus
);

179 i‡(
dev
==
NULL
) {

182 
	`k¥ötf
("bìp%dáà…imî%d", 
devunô
, 
busunô
);

183 
ªsu…
 = 
	`c⁄fig_bìp
(
dev
, 
devunô
);

184 i‡(
ªsu…
 != 0) {

185 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

187  
ªsu…
;

189 
	`k¥ötf
("\n");

190 
√xtunô_bìp
 = 
devunô
+1;

191 
	`autoc⁄f_bìp
(
dev
, 
devunô
);

193 
	}
}

197 
	$åy©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
, 
busunô
)

199 
c⁄_so·c
 *
dev
;

200 
ªsu…
;

202 
dev
 = 
	`©èch_c⁄_to_l£r
(
devunô
, 
bus
);

203 i‡(
dev
==
NULL
) {

206 
	`k¥ötf
("c⁄%dáàl£r%d", 
devunô
, 
busunô
);

207 
ªsu…
 = 
	`c⁄fig_c⁄
(
dev
, 
devunô
);

208 i‡(
ªsu…
 != 0) {

209 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

211  
ªsu…
;

213 
	`k¥ötf
("\n");

214 
√xtunô_c⁄
 = 
devunô
+1;

215 
	`autoc⁄f_c⁄
(
dev
, 
devunô
);

217 
	}
}

221 
	$åy©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
, 
busunô
)

223 
π˛ock_so·c
 *
dev
;

224 
ªsu…
;

226 
dev
 = 
	`©èch_π˛ock_to_…imî
(
devunô
, 
bus
);

227 i‡(
dev
==
NULL
) {

230 
	`k¥ötf
("π˛ock%dáà…imî%d", 
devunô
, 
busunô
);

231 
ªsu…
 = 
	`c⁄fig_π˛ock
(
dev
, 
devunô
);

232 i‡(
ªsu…
 != 0) {

233 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

235  
ªsu…
;

237 
	`k¥ötf
("\n");

238 
√xtunô_π˛ock
 = 
devunô
+1;

239 
	`autoc⁄f_π˛ock
(
dev
, 
devunô
);

241 
	}
}

245 
	$åy©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
, 
busunô
)

247 
øndom_so·c
 *
dev
;

248 
ªsu…
;

250 
dev
 = 
	`©èch_øndom_to_Ã™dom
(
devunô
, 
bus
);

251 i‡(
dev
==
NULL
) {

254 
	`k¥ötf
("øndom%dáàÃ™dom%d", 
devunô
, 
busunô
);

255 
ªsu…
 = 
	`c⁄fig_øndom
(
dev
, 
devunô
);

256 i‡(
ªsu…
 != 0) {

257 
	`k¥ötf
(": %s\n", 
	`°ªº‹
(
ªsu…
));

259  
ªsu…
;

261 
	`k¥ötf
("\n");

262 
√xtunô_øndom
 = 
devunô
+1;

263 
	`autoc⁄f_øndom
(
dev
, 
devunô
);

265 
	}
}

270 
	$autoc⁄f_π˛ock
(
π˛ock_so·c
 *
bus
, 
busunô
)

272 ()
bus
; ()
busunô
;

273 
	}
}

277 
	$autoc⁄f_Ã™dom
(
Ã™dom_so·c
 *
bus
, 
busunô
)

279 ()
bus
; ()
busunô
;

281 i‡(
√xtunô_øndom
 <= 0) {

282 
	`åy©èch_øndom_to_Ã™dom
(0, 
bus
, 
busunô
);

285 
	}
}

288 
	$autoc⁄f_œmebus
(
œmebus_so·c
 *
bus
, 
busunô
)

290 ()
bus
; ()
busunô
;

292 
ªsu…
, 
devunô
=
√xtunô_emu
;

294 
ªsu…
 = 
	`åy©èch_emu_to_œmebus
(
devunô
, 
bus
, 
busunô
);

295 
devunô
++;

296 } 
ªsu…
==0);

299 
ªsu…
, 
devunô
=
√xtunô_…ø˚
;

301 
ªsu…
 = 
	`åy©èch_…ø˚_to_œmebus
(
devunô
, 
bus
, 
busunô
);

302 
devunô
++;

303 } 
ªsu…
==0);

306 
ªsu…
, 
devunô
=
√xtunô_…imî
;

308 
ªsu…
 = 
	`åy©èch_…imî_to_œmebus
(
devunô
, 
bus
, 
busunô
);

309 
devunô
++;

310 } 
ªsu…
==0);

313 
ªsu…
, 
devunô
=
√xtunô_Ã™dom
;

315 
ªsu…
 = 
	`åy©èch_Ã™dom_to_œmebus
(
devunô
, 
bus
, 
busunô
);

316 
devunô
++;

317 } 
ªsu…
==0);

320 
ªsu…
, 
devunô
=
√xtunô_lhd
;

322 
ªsu…
 = 
	`åy©èch_lhd_to_œmebus
(
devunô
, 
bus
, 
busunô
);

323 
devunô
++;

324 } 
ªsu…
==0);

327 
ªsu…
, 
devunô
=
√xtunô_l£r
;

329 
ªsu…
 = 
	`åy©èch_l£r_to_œmebus
(
devunô
, 
bus
, 
busunô
);

330 
devunô
++;

331 } 
ªsu…
==0);

333 
	}
}

337 
	$autoc⁄f_l£r
(
l£r_so·c
 *
bus
, 
busunô
)

339 ()
bus
; ()
busunô
;

341 i‡(
√xtunô_c⁄
 <= 0) {

342 
	`åy©èch_c⁄_to_l£r
(0, 
bus
, 
busunô
);

345 
	}
}

349 
	$autoc⁄f_bìp
(
bìp_so·c
 *
bus
, 
busunô
)

351 ()
bus
; ()
busunô
;

352 
	}
}

356 
	$autoc⁄f_c⁄
(
c⁄_so·c
 *
bus
, 
busunô
)

358 ()
bus
; ()
busunô
;

359 
	}
}

363 
	$autoc⁄f_…imî
(
…imî_so·c
 *
bus
, 
busunô
)

365 ()
bus
; ()
busunô
;

367 i‡(
√xtunô_bìp
 <= 0) {

368 
	`åy©èch_bìp_to_…imî
(0, 
bus
, 
busunô
);

372 i‡(
√xtunô_π˛ock
 <= 0) {

373 
	`åy©èch_π˛ock_to_…imî
(0, 
bus
, 
busunô
);

376 
	}
}

380 
	$autoc⁄f_emu
(
emu_so·c
 *
bus
, 
busunô
)

382 ()
bus
; ()
busunô
;

383 
	}
}

387 
	$autoc⁄f_øndom
(
øndom_so·c
 *
bus
, 
busunô
)

389 ()
bus
; ()
busunô
;

390 
	}
}

394 
	$autoc⁄f_lhd
(
lhd_so·c
 *
bus
, 
busunô
)

396 ()
bus
; ()
busunô
;

397 
	}
}

401 
	$autoc⁄f_…ø˚
(
…ø˚_so·c
 *
bus
, 
busunô
)

403 ()
bus
; ()
busunô
;

404 
	}
}

407 
	$p£udoc⁄fig
()

409 
	}
}

	@compile/DUMBVM/autoconf.h

2 #i‚de‡
_AUTOCONF_H_


3 
	#_AUTOCONF_H_


	)

5 
	gœmebus_so·c
;

6 
	gemu_so·c
;

7 
	g…ø˚_so·c
;

8 
	g…imî_so·c
;

9 
	gÃ™dom_so·c
;

10 
	glhd_so·c
;

11 
	gl£r_so·c
;

12 
	gbìp_so·c
;

13 
	gc⁄_so·c
;

14 
	gπ˛ock_so·c
;

15 
	gøndom_so·c
;

17 
autoc⁄f_œmebus
(
œmebus_so·c
 *
dev
, 
unô
);

19 
emu_so·c
 *
©èch_emu_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

20 
…ø˚_so·c
 *
©èch_…ø˚_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

21 
…imî_so·c
 *
©èch_…imî_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

22 
Ã™dom_so·c
 *
©èch_Ã™dom_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

23 
lhd_so·c
 *
©èch_lhd_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

24 
l£r_so·c
 *
©èch_l£r_to_œmebus
(
devunô
, 
œmebus_so·c
 *
bus
);

25 
bìp_so·c
 *
©èch_bìp_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

26 
c⁄_so·c
 *
©èch_c⁄_to_l£r
(
devunô
, 
l£r_so·c
 *
bus
);

27 
π˛ock_so·c
 *
©èch_π˛ock_to_…imî
(
devunô
, 
…imî_so·c
 *
bus
);

28 
øndom_so·c
 *
©èch_øndom_to_Ã™dom
(
devunô
, 
Ã™dom_so·c
 *
bus
);

30 
c⁄fig_emu
(
emu_so·c
 *
dev
, 
unô
);

31 
c⁄fig_…ø˚
(
…ø˚_so·c
 *
dev
, 
unô
);

32 
c⁄fig_…imî
(
…imî_so·c
 *
dev
, 
unô
);

33 
c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
dev
, 
unô
);

34 
c⁄fig_lhd
(
lhd_so·c
 *
dev
, 
unô
);

35 
c⁄fig_l£r
(
l£r_so·c
 *
dev
, 
unô
);

36 
c⁄fig_bìp
(
bìp_so·c
 *
dev
, 
unô
);

37 
c⁄fig_c⁄
(
c⁄_so·c
 *
dev
, 
unô
);

38 
c⁄fig_π˛ock
(
π˛ock_so·c
 *
dev
, 
unô
);

39 
c⁄fig_øndom
(
øndom_so·c
 *
dev
, 
unô
);

41 
p£udoc⁄fig
();

	@compile/DUMBVM/opt-dumbvm.h

2 #i‚de‡
_OPT_DUMBVM_H_


3 
	#_OPT_DUMBVM_H_


	)

4 
	#OPT_DUMBVM
 1

	)

	@compile/DUMBVM/opt-hangman.h

2 #i‚de‡
_OPT_HANGMAN_H_


3 
	#_OPT_HANGMAN_H_


	)

4 
	#OPT_HANGMAN
 0

	)

	@compile/DUMBVM/opt-net.h

2 #i‚de‡
_OPT_NET_H_


3 
	#_OPT_NET_H_


	)

4 
	#OPT_NET
 0

	)

	@compile/DUMBVM/opt-netfs.h

2 #i‚de‡
_OPT_NETFS_H_


3 
	#_OPT_NETFS_H_


	)

4 
	#OPT_NETFS
 0

	)

	@compile/DUMBVM/opt-noasserts.h

2 #i‚de‡
_OPT_NOASSERTS_H_


3 
	#_OPT_NOASSERTS_H_


	)

4 
	#OPT_NOASSERTS
 0

	)

	@compile/DUMBVM/opt-semfs.h

2 #i‚de‡
_OPT_SEMFS_H_


3 
	#_OPT_SEMFS_H_


	)

4 
	#OPT_SEMFS
 1

	)

	@compile/DUMBVM/opt-sfs.h

2 #i‚de‡
_OPT_SFS_H_


3 
	#_OPT_SFS_H_


	)

4 
	#OPT_SFS
 1

	)

	@compile/DUMBVM/opt-synchprobs.h

2 #i‚de‡
_OPT_SYNCHPROBS_H_


3 
	#_OPT_SYNCHPROBS_H_


	)

4 
	#OPT_SYNCHPROBS
 0

	)

	@compile/DUMBVM/vers.c

2 c⁄° 
	gbuûdvîsi⁄
 = 3;

3 c⁄° 
	gbuûdc⁄fig
[] = "DUMBVM";

	@dev/generic/beep.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<gíîic/bìp.h
>

34 
	~"autoc⁄f.h
"

47 
bìp_so·c
 *
	gthe_bìp
 = 
NULL
;

50 
	$c⁄fig_bìp
(
bìp_so·c
 *
bs
, 
unô
)

53 i‡(
unô
!=0) {

54  
ENODEV
;

57 
	`KASSERT
(
the_bìp
==
NULL
);

58 
the_bìp
 = 
bs
;

60 
	}
}

63 
	$bìp
()

65 i‡(
the_bìp
!=
NULL
) {

66 
the_bìp
->
	`bs_bìp
—he_bìp->
bs_devd©a
);

69 
	`k¥ötf
("beep: Warning:Ço beep device\n");

71 
	}
}

	@dev/generic/beep.h

30 #i‚de‡
_GENERIC_BEEP_H_


31 
	#_GENERIC_BEEP_H_


	)

38 
	sbìp_so·c
 {

39 *
	mbs_devd©a
;

40 (*
	mbs_bìp
)(*
	mdevd©a
);

	@dev/generic/console.c

50 
	~<ty≥s.h
>

51 
	~<kîn/î∫o.h
>

52 
	~<lib.h
>

53 
	~<uio.h
>

54 
	~<˝u.h
>

55 
	~<thªad.h
>

56 
	~<cuºít.h
>

57 
	~<synch.h
>

58 
	~<gíîic/c⁄sﬁe.h
>

59 
	~<vfs.h
>

60 
	~<devi˚.h
>

61 
	~"autoc⁄f.h
"

66 
c⁄_so·c
 *
	gthe_c⁄sﬁe
 = 
NULL
;

72 
lock
 *
	gc⁄_u£æock_ªad
 = 
NULL
;

73 
lock
 *
	gc⁄_u£æock_wrôe
 = 
NULL
;

82 
	#DELAYBUFSIZE
 1024

	)

83 
	gdñayed_outbuf
[
DELAYBUFSIZE
];

84 
size_t
 
	gdñayed_outbuf_pos
=0;

88 
	$putch_dñayed
(
ch
)

95 
	`KASSERT
(
dñayed_outbuf_pos
 < (
dñayed_outbuf
));

96 
dñayed_outbuf
[
dñayed_outbuf_pos
++] = 
ch
;

97 
	}
}

101 
	$Êush_dñay_buf
()

103 
size_t
 
i
;

104 
i
=0; i<
dñayed_outbuf_pos
; i++) {

105 
	`putch
(
dñayed_outbuf
[
i
]);

107 
dñayed_outbuf_pos
 = 0;

108 
	}
}

118 
	$putch_pﬁÀd
(
c⁄_so·c
 *
cs
, 
ch
)

120 
cs
->
	`cs_£ndpﬁÀd
(cs->
cs_devd©a
, 
ch
);

121 
	}
}

130 
	$putch_öå
(
c⁄_so·c
 *
cs
, 
ch
)

132 
	`P
(
cs
->
cs_w£m
);

133 
cs
->
	`cs_£nd
(cs->
cs_devd©a
, 
ch
);

134 
	}
}

141 
	$gëch_öå
(
c⁄_so·c
 *
cs
)

143 
ªt
;

145 
	`P
(
cs
->
cs_r£m
);

146 
ªt
 = 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_èû
];

147 
cs
->
cs_gŸch¨s_èû
 =

148 (
cs
->
cs_gŸch¨s_èû
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

149  
ªt
;

150 
	}
}

162 
	$c⁄_öput
(*
vcs
, 
ch
)

164 
c⁄_so·c
 *
cs
 = 
vcs
;

165 
√xthód
;

167 
√xthód
 = (
cs
->
cs_gŸch¨s_hód
 + 1Ë% 
CONSOLE_INPUT_BUFFER_SIZE
;

168 i‡(
√xthód
 =
cs
->
cs_gŸch¨s_èû
) {

173 
cs
->
cs_gŸch¨s
[cs->
cs_gŸch¨s_hód
] = 
ch
;

174 
cs
->
cs_gŸch¨s_hód
 = 
√xthód
;

176 
	`V
(
cs
->
cs_r£m
);

177 
	}
}

183 
	$c⁄_°¨t
(*
vcs
)

185 
c⁄_so·c
 *
cs
 = 
vcs
;

187 
	`V
(
cs
->
cs_w£m
);

188 
	}
}

201 
	$putch
(
ch
)

203 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

205 i‡(
cs
==
NULL
) {

206 
	`putch_dñayed
(
ch
);

208 i‡(
cuπhªad
->
t_ö_öãºu±
 ||

209 
cuπhªad
->
t_cur•l
 > 0 ||

210 
cur˝u
->
c_•ölocks
 > 0) {

211 
	`putch_pﬁÀd
(
cs
, 
ch
);

214 
	`putch_öå
(
cs
, 
ch
);

216 
	}
}

219 
	$gëch
()

221 
c⁄_so·c
 *
cs
 = 
the_c⁄sﬁe
;

222 
	`KASSERT
(
cs
 !
NULL
);

223 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
 && cuπhªad->
t_ùlhigh_cou¡
 == 0);

225  
	`gëch_öå
(
cs
);

226 
	}
}

236 
	$c⁄_óch›í
(
devi˚
 *
dev
, 
›íÊags
)

238 ()
dev
;

239 ()
›íÊags
;

241 
	}
}

245 
	$c⁄_io
(
devi˚
 *
dev
, 
uio
 *uio)

247 
ªsu…
;

248 
ch
;

249 
lock
 *
lk
;

251 ()
dev
;

253 i‡(
uio
->
uio_rw
==
UIO_READ
) {

254 
lk
 = 
c⁄_u£æock_ªad
;

257 
lk
 = 
c⁄_u£æock_wrôe
;

260 
	`KASSERT
(
lk
 !
NULL
);

261 
	`lock_acquúe
(
lk
);

263 
uio
->
uio_ªsid
 > 0) {

264 i‡(
uio
->
uio_rw
==
UIO_READ
) {

265 
ch
 = 
	`gëch
();

266 i‡(
ch
=='\r') {

267 
ch
 = '\n';

269 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

270 i‡(
ªsu…
) {

271 
	`lock_ªÀa£
(
lk
);

272  
ªsu…
;

274 i‡(
ch
=='\n') {

279 
ªsu…
 = 
	`uiomove
(&
ch
, 1, 
uio
);

280 i‡(
ªsu…
) {

281 
	`lock_ªÀa£
(
lk
);

282  
ªsu…
;

284 i‡(
ch
=='\n') {

285 
	`putch
('\r');

287 
	`putch
(
ch
);

290 
	`lock_ªÀa£
(
lk
);

292 
	}
}

296 
	$c⁄_io˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

299 ()
dev
;

300 ()
›
;

301 ()
d©a
;

302  
EINVAL
;

303 
	}
}

305 c⁄° 
devi˚_›s
 
	gc⁄sﬁe_dev›s
 = {

306 .
dev›_óch›í
 = 
c⁄_óch›í
,

307 .
	gdev›_io
 = 
c⁄_io
,

308 .
	gdev›_io˘l
 = 
c⁄_io˘l
,

313 
	$©èch_c⁄sﬁe_to_vfs
(
c⁄_so·c
 *
cs
)

315 
devi˚
 *
dev
;

316 
ªsu…
;

318 
dev
 = 
	`kmÆloc
((*dev));

319 i‡(
dev
==
NULL
) {

320  
ENOMEM
;

323 
dev
->
d_›s
 = &
c⁄sﬁe_dev›s
;

324 
dev
->
d_blocks
 = 0;

325 
dev
->
d_blocksize
 = 1;

326 
dev
->
d_d©a
 = 
cs
;

328 
ªsu…
 = 
	`vfs_adddev
("c⁄", 
dev
, 0);

329 i‡(
ªsu…
) {

330 
	`k‰ì
(
dev
);

331  
ªsu…
;

335 
	}
}

344 
	$c⁄fig_c⁄
(
c⁄_so·c
 *
cs
, 
unô
)

346 
£m≠h‹e
 *
r£m
, *
w£m
;

347 
lock
 *
æk
, *
wlk
;

356 i‡(
unô
>0) {

357 
	`KASSERT
(
the_c⁄sﬁe
!=
NULL
);

358  
ENODEV
;

360 
	`KASSERT
(
the_c⁄sﬁe
==
NULL
);

362 
r£m
 = 
	`£m_¸óã
("consoleÑead", 0);

363 i‡(
r£m
 =
NULL
) {

364  
ENOMEM
;

366 
w£m
 = 
	`£m_¸óã
("console write", 1);

367 i‡(
w£m
 =
NULL
) {

368 
	`£m_de°roy
(
r£m
);

369  
ENOMEM
;

371 
æk
 = 
	`lock_¸óã
("console-lock-read");

372 i‡(
æk
 =
NULL
) {

373 
	`£m_de°roy
(
r£m
);

374 
	`£m_de°roy
(
w£m
);

375  
ENOMEM
;

377 
wlk
 = 
	`lock_¸óã
("console-lock-write");

378 i‡(
wlk
 =
NULL
) {

379 
	`lock_de°roy
(
æk
);

380 
	`£m_de°roy
(
r£m
);

381 
	`£m_de°roy
(
w£m
);

382  
ENOMEM
;

385 
cs
->
cs_r£m
 = 
r£m
;

386 
cs
->
cs_w£m
 = 
w£m
;

387 
cs
->
cs_gŸch¨s_hód
 = 0;

388 
cs
->
cs_gŸch¨s_èû
 = 0;

390 
the_c⁄sﬁe
 = 
cs
;

391 
c⁄_u£æock_ªad
 = 
æk
;

392 
c⁄_u£æock_wrôe
 = 
wlk
;

394 
	`Êush_dñay_buf
();

396  
	`©èch_c⁄sﬁe_to_vfs
(
cs
);

397 
	}
}

	@dev/generic/console.h

30 #i‚de‡
_GENERIC_CONSOLE_H_


31 
	#_GENERIC_CONSOLE_H_


	)

40 
	#CONSOLE_INPUT_BUFFER_SIZE
 32

	)

42 
	sc⁄_so·c
 {

44 *
	mcs_devd©a
;

45 (*
	mcs_£nd
)(*
	mdevd©a
, 
	mch
);

46 (*
	mcs_£ndpﬁÀd
)(*
	mdevd©a
, 
	mch
);

49 
£m≠h‹e
 *
	mcs_r£m
;

50 
£m≠h‹e
 *
	mcs_w£m
;

51 
	mcs_gŸch¨s
[
CONSOLE_INPUT_BUFFER_SIZE
];

52 
	mcs_gŸch¨s_hód
;

53 
	mcs_gŸch¨s_èû
;

59 
c⁄_öput
–*
cs
, 
ch
);

60 
c⁄_°¨t
–*
cs
);

	@dev/generic/random.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<lib.h
>

34 
	~<uio.h
>

35 
	~<vfs.h
>

36 
	~<gíîic/øndom.h
>

37 
	~"autoc⁄f.h
"

50 
øndom_so·c
 *
	gthe_øndom
 = 
NULL
;

58 
	$øndóch›í
(
devi˚
 *
dev
, 
›íÊags
)

60 ()
dev
;

62 i‡(
›íÊags
 !
O_RDONLY
) {

63  
EIO
;

67 
	}
}

74 
	$øndio
(
devi˚
 *
dev
, 
uio
 *uio)

76 
øndom_so·c
 *
rs
 = 
dev
->
d_d©a
;

78 i‡(
uio
->
uio_rw
 !
UIO_READ
) {

79  
EIO
;

82  
rs
->
	`rs_ªad
‘s->
rs_devd©a
, 
uio
);

83 
	}
}

90 
	$øndio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

95 ()
dev
;

96 ()
›
;

97 ()
d©a
;

98  
EIOCTL
;

99 
	}
}

101 c⁄° 
devi˚_›s
 
	gøndom_dev›s
 = {

102 .
dev›_óch›í
 = 
øndóch›í
,

103 .
	gdev›_io
 = 
øndio
,

104 .
	gdev›_io˘l
 = 
øndio˘l
,

111 
	$c⁄fig_øndom
(
øndom_so·c
 *
rs
, 
unô
)

113 
ªsu…
;

116 i‡(
unô
!=0) {

117  
ENODEV
;

120 
	`KASSERT
(
the_øndom
==
NULL
);

121 
the_øndom
 = 
rs
;

123 
rs
->
rs_dev
.
d_›s
 = &
øndom_dev›s
;

124 
rs
->
rs_dev
.
d_blocks
 = 0;

125 
rs
->
rs_dev
.
d_blocksize
 = 1;

126 
rs
->
rs_dev
.
d_d©a
 =Ñs;

129 
ªsu…
 = 
	`vfs_adddev
("øndom", &
rs
->
rs_dev
, 0);

130 i‡(
ªsu…
) {

131  
ªsu…
;

135 
	}
}

142 
uöt32_t


143 
	$øndom
()

145 i‡(
the_øndom
==
NULL
) {

146 
	`∑nic
("NoÑandom device\n");

148  
the_øndom
->
	`rs_øndom
—he_øndom->
rs_devd©a
);

149 
	}
}

151 
uöt32_t


152 
	$øndmax
()

154 i‡(
the_øndom
==
NULL
) {

155 
	`∑nic
("NoÑandom device\n");

157  
the_øndom
->
	`rs_øndmax
—he_øndom->
rs_devd©a
);

158 
	}
}

	@dev/generic/random.h

30 #i‚de‡
_GENERIC_RANDOM_H_


31 
	#_GENERIC_RANDOM_H_


	)

33 
	~<devi˚.h
>

34 
	guio
;

36 
	søndom_so·c
 {

38 *
	mrs_devd©a
;

39 
uöt32_t
 (*
rs_øndom
)(*
	mdevd©a
);

40 
uöt32_t
 (*
rs_øndmax
)(*
	mdevd©a
);

41 (*
	mrs_ªad
)(*
	mdevd©a
, 
uio
 *
	muio
);

43 
devi˚
 
	mrs_dev
;

	@dev/generic/rtclock.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<lib.h
>

46 
	~<˛ock.h
>

47 
	~<gíîic/π˛ock.h
>

48 
	~"autoc⁄f.h
"

50 
π˛ock_so·c
 *
	gthe_˛ock
 = 
NULL
;

53 
	$c⁄fig_π˛ock
(
π˛ock_so·c
 *
πc
, 
unô
)

56 i‡(
unô
!=0) {

57  
ENODEV
;

60 
	`KASSERT
(
the_˛ock
==
NULL
);

61 
the_˛ock
 = 
πc
;

63 
	}
}

66 
	$gëtime
(
time•ec
 *
ts
)

68 
	`KASSERT
(
the_˛ock
!=
NULL
);

69 
the_˛ock
->
	`πc_gëtime
—he_˛ock->
πc_devd©a
, 
ts
);

70 
	}
}

	@dev/generic/rtclock.h

30 #i‚de‡
_GENERIC_RTCLOCK_H_


31 
	#_GENERIC_RTCLOCK_H_


	)

38 
	gtime•ec
;

40 
	sπ˛ock_so·c
 {

41 *
	mπc_devd©a
;

42 (*
	mπc_gëtime
)(*
	mdevd©a
, 
	mtime•ec
 *);

	@dev/lamebus/beep_ltimer.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/bìp.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

41 
bìp_so·c
 *

42 
	$©èch_bìp_to_…imî
(
bì≤o
, 
…imî_so·c
 *
ls
)

44 
bìp_so·c
 *
bs
 = 
	`kmÆloc
((beep_softc));

45 i‡(
bs
==
NULL
) {

46  
NULL
;

49 ()
bì≤o
;

51 
bs
->
bs_devd©a
 = 
ls
;

52 
bs
->
bs_bìp
 = 
…imî_bìp
;

54  
bs
;

55 
	}
}

	@dev/lamebus/con_lscreen.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/ls¸ìn.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_ls¸ìn
(
c⁄¢o
, 
ls¸ìn_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 
cs
->
cs_devd©a
 = 
ls
;

50 
cs
->
cs_£nd
 = 
ls¸ìn_wrôe
;

51 
cs
->
cs_£ndpﬁÀd
 = 
ls¸ìn_wrôe
;

53 
ls
->
ls_devd©a
 = 
cs
;

54 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

55 
ls
->
ls_öput
 = 
c⁄_öput
;

57  
cs
;

58 
	}
}

	@dev/lamebus/con_lser.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/c⁄sﬁe.h
>

38 
	~<œmebus/l£r.h
>

39 
	~"autoc⁄f.h
"

41 
c⁄_so·c
 *

42 
	$©èch_c⁄_to_l£r
(
c⁄¢o
, 
l£r_so·c
 *
ls
)

44 
c⁄_so·c
 *
cs
 = 
	`kmÆloc
((con_softc));

45 i‡(
cs
==
NULL
) {

46  
NULL
;

49 ()
c⁄¢o
;

51 
cs
->
cs_devd©a
 = 
ls
;

52 
cs
->
cs_£nd
 = 
l£r_wrôe
;

53 
cs
->
cs_£ndpﬁÀd
 = 
l£r_wrôïﬁÀd
;

55 
ls
->
ls_devd©a
 = 
cs
;

56 
ls
->
ls_°¨t
 = 
c⁄_°¨t
;

57 
ls
->
ls_öput
 = 
c⁄_öput
;

59  
cs
;

60 
	}
}

	@dev/lamebus/emu.c

43 
	~<ty≥s.h
>

44 
	~<kîn/î∫o.h
>

45 
	~<kîn/f˙é.h
>

46 
	~<°©.h
>

47 
	~<lib.h
>

48 
	~<¨øy.h
>

49 
	~<uio.h
>

50 
	~<memb¨.h
>

51 
	~<synch.h
>

52 
	~<œmebus/emu.h
>

53 
	~<∂©f‹m/bus.h
>

54 
	~<vfs.h
>

55 
	~<emufs.h
>

56 
	~"autoc⁄f.h
"

59 
	#REG_HANDLE
 0

	)

60 
	#REG_OFFSET
 4

	)

61 
	#REG_IOLEN
 8

	)

62 
	#REG_OPER
 12

	)

63 
	#REG_RESULT
 16

	)

66 
	#EMU_BUFFER
 32768

	)

69 
	#EMU_OP_OPEN
 1

	)

70 
	#EMU_OP_CREATE
 2

	)

71 
	#EMU_OP_EXCLCREATE
 3

	)

72 
	#EMU_OP_CLOSE
 4

	)

73 
	#EMU_OP_READ
 5

	)

74 
	#EMU_OP_READDIR
 6

	)

75 
	#EMU_OP_WRITE
 7

	)

76 
	#EMU_OP_GETSIZE
 8

	)

77 
	#EMU_OP_TRUNC
 9

	)

80 
	#EMU_RES_SUCCESS
 1

	)

81 
	#EMU_RES_BADHANDLE
 2

	)

82 
	#EMU_RES_BADOP
 3

	)

83 
	#EMU_RES_BADPATH
 4

	)

84 
	#EMU_RES_BADSIZE
 5

	)

85 
	#EMU_RES_EXISTS
 6

	)

86 
	#EMU_RES_ISDIR
 7

	)

87 
	#EMU_RES_MEDIA
 8

	)

88 
	#EMU_RES_NOHANDLES
 9

	)

89 
	#EMU_RES_NOSPACE
 10

	)

90 
	#EMU_RES_NOTDIR
 11

	)

91 
	#EMU_RES_UNKNOWN
 12

	)

92 
	#EMU_RES_UNSUPP
 13

	)

103 
ölöe


104 
uöt32_t


105 
	$emu_ºeg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
)

107  
	`bus_ªad_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
);

108 
	}
}

114 
ölöe


116 
	$emu_wªg
(
emu_so·c
 *
sc
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

118 
	`bus_wrôe_ªgi°î
(
sc
->
e_busd©a
, sc->
e_bu•os
, 
ªg
, 
vÆ
);

119 
	}
}

125 
	$emu_úq
(*
dev
)

127 
emu_so·c
 *
sc
 = 
dev
;

129 
sc
->
e_ªsu…
 = 
	`emu_ºeg
(sc, 
REG_RESULT
);

130 
	`emu_wªg
(
sc
, 
REG_RESULT
, 0);

132 
	`V
(
sc
->
e_£m
);

133 
	}
}

140 
uöt32_t


141 
	$å™¶©e_îr
(
emu_so·c
 *
sc
, 
uöt32_t
 
code
)

143 
code
) {

144 
EMU_RES_SUCCESS
:  0;

145 
EMU_RES_BADHANDLE
:

146 
EMU_RES_BADOP
:

147 
EMU_RES_BADSIZE
:

148 
	`∑nic
("emu%d: gŸ f©ÆÑesu… codê%d\n", 
sc
->
e_unô
, 
code
);

149 
EMU_RES_BADPATH
:  
ENOENT
;

150 
EMU_RES_EXISTS
:  
EEXIST
;

151 
EMU_RES_ISDIR
:  
EISDIR
;

152 
EMU_RES_MEDIA
:  
EIO
;

153 
EMU_RES_NOHANDLES
:  
ENFILE
;

154 
EMU_RES_NOSPACE
:  
ENOSPC
;

155 
EMU_RES_NOTDIR
:  
ENOTDIR
;

156 
EMU_RES_UNKNOWN
:  
EIO
;

157 
EMU_RES_UNSUPP
:  
ENOSYS
;

159 
	`k¥ötf
("emu%d: Unknow¿ªsu… codê%d\n", 
sc
->
e_unô
, 
code
);

160  
EAGAIN
;

161 
	}
}

168 
	$emu_waôd⁄e
(
emu_so·c
 *
sc
)

170 
	`P
(
sc
->
e_£m
);

171  
	`å™¶©e_îr
(
sc
, sc->
e_ªsu…
);

172 
	}
}

182 
	$emu_›í
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, c⁄° *
«me
,

183 
boﬁ
 
¸óã
, boﬁ 
ex˛
, 
mode_t
 
mode
,

184 
uöt32_t
 *
√wh™dÀ
, *
√wisdú
)

186 
uöt32_t
 
›
;

187 
ªsu…
;

189 i‡(
	`°æí
(
«me
)+1 > 
EMU_MAXIO
) {

190  
ENAMETOOLONG
;

193 i‡(
¸óã
 && 
ex˛
) {

194 
›
 = 
EMU_OP_EXCLCREATE
;

196 i‡(
¸óã
) {

197 
›
 = 
EMU_OP_CREATE
;

200 
›
 = 
EMU_OP_OPEN
;

204 ()
mode
;

206 
	`lock_acquúe
(
sc
->
e_lock
);

208 
	`°r˝y
(
sc
->
e_iobuf
, 
«me
);

209 
	`memb¨_°‹e_°‹e
();

210 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
	`°æí
(
«me
));

211 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

212 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

213 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

215 i‡(
ªsu…
==0) {

216 *
√wh™dÀ
 = 
	`emu_ºeg
(
sc
, 
REG_HANDLE
);

217 *
√wisdú
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
)>0;

220 
	`lock_ªÀa£
(
sc
->
e_lock
);

221  
ªsu…
;

222 
	}
}

231 
	$emu_˛o£
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
)

233 
ªsu…
;

234 
boﬁ
 
möe
;

235 
ªåõs
 = 0;

237 
möe
 = 
	`lock_do_i_hﬁd
(
sc
->
e_lock
);

238 i‡(!
möe
) {

239 
	`lock_acquúe
(
sc
->
e_lock
);

245 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

246 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_CLOSE
);

247 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

249 i‡(
ªsu…
==
EIO
 && 
ªåõs
 < 10) {

250 
	`k¥ötf
("emu%d: I/OÉrror on close,Ñetrying\n",

251 
sc
->
e_unô
);

252 
ªåõs
++;

258 i‡(!
möe
) {

259 
	`lock_ªÀa£
(
sc
->
e_lock
);

261  
ªsu…
;

262 
	}
}

269 
	$emu_d‹ód
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

270 
uöt32_t
 
›
, 
uio
 *uio)

272 
ªsu…
;

274 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

276 i‡(
uio
->
uio_off£t
 > (
off_t
)0xffffffff) {

281 
	`lock_acquúe
(
sc
->
e_lock
);

283 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

284 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

285 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

286 
	`emu_wªg
(
sc
, 
REG_OPER
, 
›
);

287 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

288 i‡(
ªsu…
) {

289 
out
;

292 
	`memb¨_lﬂd_lﬂd
();

293 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
	`emu_ºeg
(sc, 
REG_IOLEN
), 
uio
);

295 
uio
->
uio_off£t
 = 
	`emu_ºeg
(
sc
, 
REG_OFFSET
);

297 
out
:

298 
	`lock_ªÀa£
(
sc
->
e_lock
);

299  
ªsu…
;

300 
	}
}

307 
	$emu_ªad
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

308 
uio
 *uio)

310  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READ
, 
uio
);

311 
	}
}

318 
	$emu_ªaddú
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

319 
uio
 *uio)

321  
	`emu_d‹ód
(
sc
, 
h™dÀ
, 
Àn
, 
EMU_OP_READDIR
, 
uio
);

322 
	}
}

329 
	$emu_wrôe
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, uöt32_à
Àn
,

330 
uio
 *uio)

332 
ªsu…
;

334 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

336 i‡(
uio
->
uio_off£t
 > (
off_t
)0xffffffff) {

337  
EFBIG
;

340 
	`lock_acquúe
(
sc
->
e_lock
);

342 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

343 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

344 
	`emu_wªg
(
sc
, 
REG_OFFSET
, 
uio
->
uio_off£t
);

346 
ªsu…
 = 
	`uiomove
(
sc
->
e_iobuf
, 
Àn
, 
uio
);

347 
	`memb¨_°‹e_°‹e
();

348 i‡(
ªsu…
) {

349 
out
;

352 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_WRITE
);

353 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

355 
out
:

356 
	`lock_ªÀa£
(
sc
->
e_lock
);

357  
ªsu…
;

358 
	}
}

365 
	$emu_gësize
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 *
ªtvÆ
)

367 
ªsu…
;

369 
	`lock_acquúe
(
sc
->
e_lock
);

371 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

372 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_GETSIZE
);

373 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

374 i‡(
ªsu…
==0) {

375 *
ªtvÆ
 = 
	`emu_ºeg
(
sc
, 
REG_IOLEN
);

378 
	`lock_ªÀa£
(
sc
->
e_lock
);

379  
ªsu…
;

380 
	}
}

387 
	$emu_åunc
(
emu_so·c
 *
sc
, 
uöt32_t
 
h™dÀ
, 
off_t
 
Àn
)

389 
ªsu…
;

391 
	`KASSERT
(
Àn
 >= 0);

393 
	`lock_acquúe
(
sc
->
e_lock
);

395 
	`emu_wªg
(
sc
, 
REG_HANDLE
, 
h™dÀ
);

396 
	`emu_wªg
(
sc
, 
REG_IOLEN
, 
Àn
);

397 
	`emu_wªg
(
sc
, 
REG_OPER
, 
EMU_OP_TRUNC
);

398 
ªsu…
 = 
	`emu_waôd⁄e
(
sc
);

400 
	`lock_ªÀa£
(
sc
->
e_lock
);

401  
ªsu…
;

402 
	}
}

414 
emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

415 
emufs_vnode
 **
ªt
);

422 
	$emufs_óch›í
(
vnode
 *
v
, 
›íÊags
)

432 ()
v
;

433 ()
›íÊags
;

436 
	}
}

443 
	$emufs_óch›ídú
(
vnode
 *
v
, 
›íÊags
)

445 
›íÊags
 & 
O_ACCMODE
) {

446 
O_RDONLY
:

448 
O_WRONLY
:

449 
O_RDWR
:

451  
EISDIR
;

453 i‡(
›íÊags
 & 
O_APPEND
) {

454  
EISDIR
;

457 ()
v
;

459 
	}
}

468 
	$emufs_ª˛aim
(
vnode
 *
v
)

470 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

471 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

472 
ix
, 
i
, 
num
;

473 
ªsu…
;

480 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

481 
	`•ölock_acquúe
(&
ev
->
ev_v
.
vn_cou¡lock
);

483 i‡(
ev
->
ev_v
.
vn_ªfcou¡
 > 1) {

485 
ev
->
ev_v
.
vn_ªfcou¡
--;

487 
	`•ölock_ªÀa£
(&
ev
->
ev_v
.
vn_cou¡lock
);

488 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

489  
EBUSY
;

491 
	`KASSERT
(
ev
->
ev_v
.
vn_ªfcou¡
 == 1);

497 
	`•ölock_ªÀa£
(&
ev
->
ev_v
.
vn_cou¡lock
);

500 
ªsu…
 = 
	`emu_˛o£
(
ev
->
ev_emu
,Év->
ev_h™dÀ
);

501 i‡(
ªsu…
) {

502 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

503  
ªsu…
;

506 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

507 
ix
 = 
num
;

508 
i
=0; i<
num
; i++) {

509 
vnode
 *
vx
;

511 
vx
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

512 i‡(
vx
 =
v
) {

513 
ix
 = 
i
;

517 i‡(
ix
 =
num
) {

518 
	`∑nic
("emu%d:Ñeclaim vnode %uÇot in vnodeÖool\n",

519 
ef
->
ef_emu
->
e_unô
, 
ev
->
ev_h™dÀ
);

522 
	`vnodóºay_ªmove
(
ef
->
ef_vnodes
, 
ix
);

523 
	`vnode_˛ónup
(&
ev
->
ev_v
);

525 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

527 
	`k‰ì
(
ev
);

529 
	}
}

536 
	$emufs_ªad
(
vnode
 *
v
, 
uio
 *uio)

538 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

539 
uöt32_t
 
amt
;

540 
size_t
 
ﬁdªsid
;

541 
ªsu…
;

543 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

545 
uio
->
uio_ªsid
 > 0) {

546 
amt
 = 
uio
->
uio_ªsid
;

547 i‡(
amt
 > 
EMU_MAXIO
) {

548 
amt
 = 
EMU_MAXIO
;

551 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

553 
ªsu…
 = 
	`emu_ªad
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

554 i‡(
ªsu…
) {

555  
ªsu…
;

558 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

565 
	}
}

572 
	$emufs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

574 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

575 
uöt32_t
 
amt
;

577 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

579 
amt
 = 
uio
->
uio_ªsid
;

580 i‡(
amt
 > 
EMU_MAXIO
) {

581 
amt
 = 
EMU_MAXIO
;

584  
	`emu_ªaddú
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

585 
	}
}

592 
	$emufs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

594 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

595 
uöt32_t
 
amt
;

596 
size_t
 
ﬁdªsid
;

597 
ªsu…
;

599 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

601 
uio
->
uio_ªsid
 > 0) {

602 
amt
 = 
uio
->
uio_ªsid
;

603 i‡(
amt
 > 
EMU_MAXIO
) {

604 
amt
 = 
EMU_MAXIO
;

607 
ﬁdªsid
 = 
uio
->
uio_ªsid
;

609 
ªsu…
 = 
	`emu_wrôe
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
amt
, 
uio
);

610 i‡(
ªsu…
) {

611  
ªsu…
;

614 i‡(
uio
->
uio_ªsid
 =
ﬁdªsid
) {

621 
	}
}

628 
	$emufs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

634 ()
v
;

635 ()
›
;

636 ()
d©a
;

638  
EINVAL
;

639 
	}
}

646 
	$emufs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

648 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

649 
ªsu…
;

651 
	`bzîo
(
°©buf
, (
°©
));

653 
ªsu…
 = 
	`emu_gësize
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, &
°©buf
->
°_size
);

654 i‡(
ªsu…
) {

655  
ªsu…
;

658 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

659 i‡(
ªsu…
) {

660  
ªsu…
;

662 
°©buf
->
°_mode
 |= 0644;

663 
°©buf
->
°_∆ök
 = 1;

664 
°©buf
->
°_blocks
 = 0;

667 
	}
}

674 
	$emufs_fûe_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

676 ()
v
;

677 *
ªsu…
 = 
S_IFREG
;

679 
	}
}

686 
	$emufs_dú_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªsu…
)

688 ()
v
;

689 *
ªsu…
 = 
S_IFDIR
;

691 
	}
}

697 
boﬁ


698 
	$emufs_is£ekabÀ
(
vnode
 *
v
)

700 ()
v
;

701  
åue
;

702 
	}
}

709 
	$emufs_fsync
(
vnode
 *
v
)

711 ()
v
;

713 
	}
}

720 
	$emufs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

722 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

723  
	`emu_åunc
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
Àn
);

724 
	}
}

731 
	$emufs_¸ót
(
vnode
 *
dú
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

732 
vnode
 **
ªt
)

734 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

735 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

736 
emufs_vnode
 *
√wguy
;

737 
uöt32_t
 
h™dÀ
;

738 
ªsu…
;

739 
isdú
;

741 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
«me
, 
åue
, 
ex˛
, 
mode
,

742 &
h™dÀ
, &
isdú
);

743 i‡(
ªsu…
) {

744  
ªsu…
;

747 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

748 i‡(
ªsu…
) {

749 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

750  
ªsu…
;

753 *
ªt
 = &
√wguy
->
ev_v
;

755 
	}
}

762 
	$emufs_lookup
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
)

764 
emufs_vnode
 *
ev
 = 
dú
->
vn_d©a
;

765 
emufs_fs
 *
ef
 = 
dú
->
vn_fs
->
fs_d©a
;

766 
emufs_vnode
 *
√wguy
;

767 
uöt32_t
 
h™dÀ
;

768 
ªsu…
;

769 
isdú
;

771 
ªsu…
 = 
	`emu_›í
(
ev
->
ev_emu
,Év->
ev_h™dÀ
, 
∑th«me
, 
Ál£
, false, 0,

772 &
h™dÀ
, &
isdú
);

773 i‡(
ªsu…
) {

774  
ªsu…
;

777 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
h™dÀ
, 
isdú
, &
√wguy
);

778 i‡(
ªsu…
) {

779 
	`emu_˛o£
(
ev
->
ev_emu
, 
h™dÀ
);

780  
ªsu…
;

783 *
ªt
 = &
√wguy
->
ev_v
;

785 
	}
}

792 
	$emufs_look∑ª¡
(
vnode
 *
dú
, *
∑th«me
, vnodê**
ªt
,

793 *
buf
, 
size_t
 
Àn
)

795 *
s
;

797 
s
 = 
	`°ºchr
(
∑th«me
, '/');

798 i‡(
s
==
NULL
) {

800 i‡(
	`°æí
(
∑th«me
)+1 > 
Àn
) {

801  
ENAMETOOLONG
;

803 
	`VOP_INCREF
(
dú
);

804 *
ªt
 = 
dú
;

805 
	`°r˝y
(
buf
, 
∑th«me
);

809 *
s
 = 0;

810 
s
++;

811 i‡(
	`°æí
(
s
)+1 > 
Àn
) {

812  
ENAMETOOLONG
;

814 
	`°r˝y
(
buf
, 
s
);

816  
	`emufs_lookup
(
dú
, 
∑th«me
, 
ªt
);

817 
	}
}

824 
	$emufs_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

826 
emufs_vnode
 *
ev
 = 
v
->
vn_d©a
;

827 
emufs_fs
 *
ef
 = 
v
->
vn_fs
->
fs_d©a
;

829 i‡(
ev
 =
ef
->
ef_roŸ
) {

836 ()
uio
;

838  
ENOSYS
;

839 
	}
}

846 
	$emufs_mm≠
(
vnode
 *
v
)

848 ()
v
;

849  
ENOSYS
;

850 
	}
}

860 
	$emufs_symlök
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

862 ()
v
;

863 ()
c⁄ã¡s
;

864 ()
«me
;

865  
ENOSYS
;

866 
	}
}

870 
	$emufs_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

872 ()
v
;

873 ()
«me
;

874 ()
mode
;

875  
ENOSYS
;

876 
	}
}

880 
	$emufs_lök
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

882 ()
v
;

883 ()
«me
;

884 ()
èrgë
;

885  
ENOSYS
;

886 
	}
}

890 
	$emufs_ªmove
(
vnode
 *
v
, c⁄° *
«me
)

892 ()
v
;

893 ()
«me
;

894  
ENOSYS
;

895 
	}
}

899 
	$emufs_rmdú
(
vnode
 *
v
, c⁄° *
«me
)

901 ()
v
;

902 ()
«me
;

903  
ENOSYS
;

904 
	}
}

908 
	$emufs_ª«me
(
vnode
 *
v1
, c⁄° *
n1
,

909 
vnode
 *
v2
, c⁄° *
n2
)

911 ()
v1
;

912 ()
n1
;

913 ()
v2
;

914 ()
n2
;

915  
ENOSYS
;

916 
	}
}

935 
	$emufs_void_›_isdú
(
vnode
 *
v
)

937 ()
v
;

938  
EISDIR
;

939 
	}
}

943 
	$emufs_uio_›_isdú
(
vnode
 *
v
, 
uio
 *uio)

945 ()
v
;

946 ()
uio
;

947  
EISDIR
;

948 
	}
}

952 
	$emufs_uio_›_nŸdú
(
vnode
 *
v
, 
uio
 *uio)

954 ()
v
;

955 ()
uio
;

956  
ENOTDIR
;

957 
	}
}

961 
	$emufs_«me_›_nŸdú
(
vnode
 *
v
, c⁄° *
«me
)

963 ()
v
;

964 ()
«me
;

965  
ENOTDIR
;

966 
	}
}

970 
	$emufs_ªadlök_nŸlök
(
vnode
 *
v
, 
uio
 *uio)

972 ()
v
;

973 ()
uio
;

974  
EINVAL
;

975 
	}
}

979 
	$emufs_¸ót_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

980 
vnode
 **
ªtvÆ
)

982 ()
v
;

983 ()
«me
;

984 ()
ex˛
;

985 ()
mode
;

986 ()
ªtvÆ
;

987  
ENOTDIR
;

988 
	}
}

992 
	$emufs_symlök_nŸdú
(
vnode
 *
v
, c⁄° *
c⁄ã¡s
, c⁄° *
«me
)

994 ()
v
;

995 ()
c⁄ã¡s
;

996 ()
«me
;

997  
ENOTDIR
;

998 
	}
}

1002 
	$emufs_mkdú_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

1004 ()
v
;

1005 ()
«me
;

1006 ()
mode
;

1007  
ENOTDIR
;

1008 
	}
}

1012 
	$emufs_lök_nŸdú
(
vnode
 *
v
, c⁄° *
«me
, vnodê*
èrgë
)

1014 ()
v
;

1015 ()
«me
;

1016 ()
èrgë
;

1017  
ENOTDIR
;

1018 
	}
}

1022 
	$emufs_ª«me_nŸdú
(
vnode
 *
v1
, c⁄° *
n1
,

1023 
vnode
 *
v2
, c⁄° *
n2
)

1025 ()
v1
;

1026 ()
n1
;

1027 ()
v2
;

1028 ()
n2
;

1029  
ENOTDIR
;

1030 
	}
}

1034 
	$emufs_lookup_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
)

1036 ()
v
;

1037 ()
∑th«me
;

1038 ()
ªsu…
;

1039  
ENOTDIR
;

1040 
	}
}

1044 
	$emufs_look∑ª¡_nŸdú
(
vnode
 *
v
, *
∑th«me
, vnodê**
ªsu…
,

1045 *
buf
, 
size_t
 
Àn
)

1047 ()
v
;

1048 ()
∑th«me
;

1049 ()
ªsu…
;

1050 ()
buf
;

1051 ()
Àn
;

1052  
ENOTDIR
;

1053 
	}
}

1058 
	$emufs_åunˇã_isdú
(
vnode
 *
v
, 
off_t
 
Àn
)

1060 ()
v
;

1061 ()
Àn
;

1062  
ENOTDIR
;

1063 
	}
}

1070 c⁄° 
vnode_›s
 
	gemufs_fûe›s
 = {

1071 .
v›_magic
 = 
VOP_MAGIC
,

1073 .
	gv›_óch›í
 = 
emufs_óch›í
,

1074 .
	gv›_ª˛aim
 = 
emufs_ª˛aim
,

1076 .
	gv›_ªad
 = 
emufs_ªad
,

1077 .
	gv›_ªadlök
 = 
emufs_ªadlök_nŸlök
,

1078 .
	gv›_gëdúíåy
 = 
emufs_uio_›_nŸdú
,

1079 .
	gv›_wrôe
 = 
emufs_wrôe
,

1080 .
	gv›_io˘l
 = 
emufs_io˘l
,

1081 .
	gv›_°©
 = 
emufs_°©
,

1082 .
	gv›_gëty≥
 = 
emufs_fûe_gëty≥
,

1083 .
	gv›_is£ekabÀ
 = 
emufs_is£ekabÀ
,

1084 .
	gv›_fsync
 = 
emufs_fsync
,

1085 .
	gv›_mm≠
 = 
emufs_mm≠
,

1086 .
	gv›_åunˇã
 = 
emufs_åunˇã
,

1087 .
	gv›_«mefûe
 = 
emufs_uio_›_nŸdú
,

1089 .
	gv›_¸ót
 = 
emufs_¸ót_nŸdú
,

1090 .
	gv›_symlök
 = 
emufs_symlök_nŸdú
,

1091 .
	gv›_mkdú
 = 
emufs_mkdú_nŸdú
,

1092 .
	gv›_lök
 = 
emufs_lök_nŸdú
,

1093 .
	gv›_ªmove
 = 
emufs_«me_›_nŸdú
,

1094 .
	gv›_rmdú
 = 
emufs_«me_›_nŸdú
,

1095 .
	gv›_ª«me
 = 
emufs_ª«me_nŸdú
,

1097 .
	gv›_lookup
 = 
emufs_lookup_nŸdú
,

1098 .
	gv›_look∑ª¡
 = 
emufs_look∑ª¡_nŸdú
,

1104 c⁄° 
vnode_›s
 
	gemufs_dú›s
 = {

1105 .
v›_magic
 = 
VOP_MAGIC
,

1107 .
	gv›_óch›í
 = 
emufs_óch›ídú
,

1108 .
	gv›_ª˛aim
 = 
emufs_ª˛aim
,

1110 .
	gv›_ªad
 = 
emufs_uio_›_isdú
,

1111 .
	gv›_ªadlök
 = 
emufs_uio_›_isdú
,

1112 .
	gv›_gëdúíåy
 = 
emufs_gëdúíåy
,

1113 .
	gv›_wrôe
 = 
emufs_uio_›_isdú
,

1114 .
	gv›_io˘l
 = 
emufs_io˘l
,

1115 .
	gv›_°©
 = 
emufs_°©
,

1116 .
	gv›_gëty≥
 = 
emufs_dú_gëty≥
,

1117 .
	gv›_is£ekabÀ
 = 
emufs_is£ekabÀ
,

1118 .
	gv›_fsync
 = 
emufs_void_›_isdú
,

1119 .
	gv›_mm≠
 = 
emufs_void_›_isdú
,

1120 .
	gv›_åunˇã
 = 
emufs_åunˇã_isdú
,

1121 .
	gv›_«mefûe
 = 
emufs_«mefûe
,

1123 .
	gv›_¸ót
 = 
emufs_¸ót
,

1124 .
	gv›_symlök
 = 
emufs_symlök
,

1125 .
	gv›_mkdú
 = 
emufs_mkdú
,

1126 .
	gv›_lök
 = 
emufs_lök
,

1127 .
	gv›_ªmove
 = 
emufs_ªmove
,

1128 .
	gv›_rmdú
 = 
emufs_rmdú
,

1129 .
	gv›_ª«me
 = 
emufs_ª«me
,

1131 .
	gv›_lookup
 = 
emufs_lookup
,

1132 .
	gv›_look∑ª¡
 = 
emufs_look∑ª¡
,

1140 
	$emufs_lﬂdvnode
(
emufs_fs
 *
ef
, 
uöt32_t
 
h™dÀ
, 
isdú
,

1141 
emufs_vnode
 **
ªt
)

1143 
vnode
 *
v
;

1144 
emufs_vnode
 *
ev
;

1145 
i
, 
num
;

1146 
ªsu…
;

1148 
	`lock_acquúe
(
ef
->
ef_emu
->
e_lock
);

1150 
num
 = 
	`vnodóºay_num
(
ef
->
ef_vnodes
);

1151 
i
=0; i<
num
; i++) {

1152 
v
 = 
	`vnodóºay_gë
(
ef
->
ef_vnodes
, 
i
);

1153 
ev
 = 
v
->
vn_d©a
;

1154 i‡(
ev
->
ev_h™dÀ
 =
h™dÀ
) {

1157 
	`VOP_INCREF
(&
ev
->
ev_v
);

1159 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1160 *
ªt
 = 
ev
;

1167 
ev
 = 
	`kmÆloc
((
emufs_vnode
));

1168 i‡(
ev
==
NULL
) {

1169 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1170  
ENOMEM
;

1173 
ev
->
ev_emu
 = 
ef
->
ef_emu
;

1174 
ev
->
ev_h™dÀ
 = 
h™dÀ
;

1176 
ªsu…
 = 
	`vnode_öô
(&
ev
->
ev_v
, 
isdú
 ? &
emufs_dú›s
 : &
emufs_fûe›s
,

1177 &
ef
->
ef_fs
, 
ev
);

1178 i‡(
ªsu…
) {

1179 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1180 
	`k‰ì
(
ev
);

1181  
ªsu…
;

1184 
ªsu…
 = 
	`vnodóºay_add
(
ef
->
ef_vnodes
, &
ev
->
ev_v
, 
NULL
);

1185 i‡(
ªsu…
) {

1187 
	`vnode_˛ónup
(&
ev
->
ev_v
);

1188 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1189 
	`k‰ì
(
ev
);

1190  
ªsu…
;

1193 
	`lock_ªÀa£
(
ef
->
ef_emu
->
e_lock
);

1195 *
ªt
 = 
ev
;

1197 
	}
}

1212 
	$emufs_sync
(
fs
 *fs)

1214 ()
fs
;

1216 
	}
}

1223 
	$emufs_gëvﬁ«me
(
fs
 *fs)

1226 ()
fs
;

1227  
NULL
;

1228 
	}
}

1235 
	$emufs_gëroŸ
(
fs
 *fs, 
vnode
 **
ªt
)

1237 
emufs_fs
 *
ef
;

1239 
	`KASSERT
(
fs
 !
NULL
);

1241 
ef
 = 
fs
->
fs_d©a
;

1243 
	`KASSERT
(
ef
 !
NULL
);

1244 
	`KASSERT
(
ef
->
ef_roŸ
 !
NULL
);

1246 
	`VOP_INCREF
(&
ef
->
ef_roŸ
->
ev_v
);

1247 *
ªt
 = &
ef
->
ef_roŸ
->
ev_v
;

1249 
	}
}

1256 
	$emufs_unmou¡
(
fs
 *fs)

1259 ()
fs
;

1260  
EBUSY
;

1261 
	}
}

1266 c⁄° 
fs_›s
 
	gemufs_fs›s
 = {

1267 .
fs›_sync
 = 
emufs_sync
,

1268 .
	gfs›_gëvﬁ«me
 = 
emufs_gëvﬁ«me
,

1269 .
	gfs›_gëroŸ
 = 
emufs_gëroŸ
,

1270 .
	gfs›_unmou¡
 = 
emufs_unmou¡
,

1272 .
	gfs›_ªadblock
 = 
NULL
,

1273 .
	gfs›_wrôeblock
 = 
NULL
,

1285 
	$emufs_addtovfs
(
emu_so·c
 *
sc
, c⁄° *
dev«me
)

1287 
emufs_fs
 *
ef
;

1288 
ªsu…
;

1290 
ef
 = 
	`kmÆloc
((
emufs_fs
));

1291 i‡(
ef
==
NULL
) {

1292  
ENOMEM
;

1295 
ef
->
ef_fs
.
fs_d©a
 =Éf;

1296 
ef
->
ef_fs
.
fs_›s
 = &
emufs_fs›s
;

1298 
ef
->
ef_emu
 = 
sc
;

1299 
ef
->
ef_roŸ
 = 
NULL
;

1300 
ef
->
ef_vnodes
 = 
	`vnodóºay_¸óã
();

1301 i‡(
ef
->
ef_vnodes
 =
NULL
) {

1302 
	`k‰ì
(
ef
);

1303  
ENOMEM
;

1306 
ªsu…
 = 
	`emufs_lﬂdvnode
(
ef
, 
EMU_ROOTHANDLE
, 1, &ef->
ef_roŸ
);

1307 i‡(
ªsu…
) {

1308 
	`k‰ì
(
ef
);

1309  
ªsu…
;

1312 
	`KASSERT
(
ef
->
ef_roŸ
!=
NULL
);

1314 
ªsu…
 = 
	`vfs_addfs
(
dev«me
, &
ef
->
ef_fs
);

1315 i‡(
ªsu…
) {

1316 
	`VOP_DECREF
(&
ef
->
ef_roŸ
->
ev_v
);

1317 
	`k‰ì
(
ef
);

1319  
ªsu…
;

1320 
	}
}

1331 
	$c⁄fig_emu
(
emu_so·c
 *
sc
, 
emuno
)

1333 
«me
[32];

1335 
sc
->
e_lock
 = 
	`lock_¸óã
("emufs-lock");

1336 i‡(
sc
->
e_lock
 =
NULL
) {

1337  
ENOMEM
;

1339 
sc
->
e_£m
 = 
	`£m_¸óã
("emufs-sem", 0);

1340 i‡(
sc
->
e_£m
 =
NULL
) {

1341 
	`lock_de°roy
(
sc
->
e_lock
);

1342 
sc
->
e_lock
 = 
NULL
;

1343  
ENOMEM
;

1345 
sc
->
e_iobuf
 = 
	`bus_m≠_¨ó
(sc->
e_busd©a
, sc->
e_bu•os
, 
EMU_BUFFER
);

1347 
	`¢¥ötf
(
«me
, “ame), "emu%d", 
emuno
);

1349  
	`emufs_addtovfs
(
sc
, 
«me
);

1350 
	}
}

	@dev/lamebus/emu.h

30 #i‚de‡
_LAMEBUS_EMU_H_


31 
	#_LAMEBUS_EMU_H_


	)

34 
	#EMU_MAXIO
 16384

	)

35 
	#EMU_ROOTHANDLE
 0

	)

43 
	semu_so·c
 {

45 *
	me_busd©a
;

46 
uöt32_t
 
	me_bu•os
;

47 
	me_unô
;

50 
lock
 *
	me_lock
;

51 
£m≠h‹e
 *
	me_£m
;

52 *
	me_iobuf
;

55 
uöt32_t
 
	me_ªsu…
;

59 
emu_úq
( *);

	@dev/lamebus/emu_att.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<œmebus/œmebus.h
>

37 
	~<œmebus/emu.h
>

38 
	~"autoc⁄f.h
"

41 
	#LOW_VERSION
 1

	)

43 
emu_so·c
 *

44 
	$©èch_emu_to_œmebus
(
emuno
, 
œmebus_so·c
 *
sc
)

46 
emu_so·c
 *
es
;

47 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_EMUFS
,

48 
LOW_VERSION
, 
NULL
);

49 i‡(
¶Ÿ
 < 0) {

50  
NULL
;

53 
es
 = 
	`kmÆloc
((
emu_so·c
));

54 i‡(
es
==
NULL
) {

55  
NULL
;

58 
es
->
e_busd©a
 = 
sc
;

59 
es
->
e_bu•os
 = 
¶Ÿ
;

60 
es
->
e_unô
 = 
emuno
;

62 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

63 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
es
, 
emu_úq
);

65  
es
;

66 
	}
}

	@dev/lamebus/lamebus.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<memb¨.h
>

38 
	~<•ölock.h
>

39 
	~<cuºít.h
>

40 
	~<œmebus/œmebus.h
>

43 
	#CFGREG_VID
 0

	)

44 
	#CFGREG_DID
 4

	)

45 
	#CFGREG_DRL
 8

	)

48 
	#CTLREG_RAMSZ
 0x200

	)

49 
	#CTLREG_IRQS
 0x204

	)

50 
	#CTLREG_PWR
 0x208

	)

51 
	#CTLREG_IRQE
 0x20c

	)

52 
	#CTLREG_CPUS
 0x210

	)

53 
	#CTLREG_CPUE
 0x214

	)

54 
	#CTLREG_SELF
 0x218

	)

57 
	#CTLCPU_CIRQE
 0x000

	)

58 
	#CTLCPU_CIPI
 0x004

	)

59 
	#CTLCPU_CRAM
 0x300

	)

66 
ölöe


67 
uöt32_t


68 
	$ªad_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
)

71 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

72  
	`œmebus_ªad_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

73 
	}
}

79 
ölöe


81 
	$wrôe_cfg_ªgi°î
(
œmebus_so·c
 *
lb
, 
¶Ÿ
, 
uöt32_t
 
off£t
,

82 
uöt32_t
 
vÆ
)

84 
off£t
 +
LB_CONFIG_SIZE
*
¶Ÿ
;

85 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

86 
	}
}

92 
ölöe


93 
uöt32_t


94 
	$ªad_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
)

97  
	`ªad_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
);

98 
	}
}

104 
ölöe


106 
	$wrôe_˘l_ªgi°î
(
œmebus_so·c
 *
lb
, 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

108 
	`wrôe_cfg_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

109 
	}
}

115 
ölöe


117 
	$wrôe_˘l˝u_ªgi°î
(
œmebus_so·c
 *
lb
, 
hw_˝unum
,

118 
uöt32_t
 
off£t
, uöt32_à
vÆ
)

120 
off£t
 +
LB_CTLCPU_OFFSET
 + 
hw_˝unum
 * 
LB_CTLCPU_SIZE
;

121 
	`œmebus_wrôe_ªgi°î
(
lb
, 
LB_CONTROLLER_SLOT
, 
off£t
, 
vÆ
);

122 
	}
}

128 
	$œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
)

130 
uöt32_t
 
maöbﬂrd_vid
, 
maöbﬂrd_did
;

131 
uöt32_t
 
˝umask
, 
£lf
, 
bô
, 
vÆ
;

132 
i
, 
num˝us
, 
boŸ˝u
;

133 
hwnum
[32];

135 
maöbﬂrd_vid
 = 
	`ªad_cfg_ªgi°î
(
œmebus
, 
LB_CONTROLLER_SLOT
,

136 
CFGREG_VID
);

137 
maöbﬂrd_did
 = 
	`ªad_cfg_ªgi°î
(
œmebus
, 
LB_CONTROLLER_SLOT
,

138 
CFGREG_DID
);

139 i‡(
maöbﬂrd_vid
 =
LB_VENDOR_CS161
 &&

140 
maöbﬂrd_did
 =
LBCS161_UPBUSCTL
) {

142 
œmebus
->
ls_unùro˚ss‹
 = 1;

146 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

147 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

149 
num˝us
 = 0;

150 
boŸ˝u
 = 0;

151 
i
=0; i<32; i++) {

152 
bô
 = (
uöt32_t
)1 << 
i
;

153 i‡((
˝umask
 & 
bô
) != 0) {

154 i‡(
£lf
 & 
bô
) {

155 
boŸ˝u
 = 
num˝us
;

156 
cur˝u
->
c_h¨dw¨e_numbî
 = 
i
;

158 
hwnum
[
num˝us
] = 
i
;

159 
num˝us
++;

163 
i
=0; i<
num˝us
; i++) {

164 i‡(
i
 !
boŸ˝u
) {

165 
	`˝u_¸óã
(
hwnum
[
i
]);

175 
i
=0; i<
num˝us
; i++) {

176 i‡(
i
 !
boŸ˝u
) {

177 
vÆ
 = 0;

180 
vÆ
 = 0xffffffff;

182 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
hwnum
[
i
], 
CTLCPU_CIRQE
, 
vÆ
);

184 
	}
}

197 
	$œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
)

199 
uöt32_t
 
˝umask
, 
£lf
, 
bô
;

200 
uöt32_t
 
˘l˝uoff£t
;

201 
uöt32_t
 *
¸am
;

202 
i
;

203 
˝unum
;

205 i‡(
œmebus
->
ls_unùro˚ss‹
) {

209 
˝umask
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUS
);

210 
£lf
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_SELF
);

213 
˝unum
 = 1;

214 
i
=0; i<32; i++) {

215 
bô
 = (
uöt32_t
)1 << 
i
;

216 i‡((
˝umask
 & 
bô
) != 0) {

217 i‡(
£lf
 & 
bô
) {

220 
˘l˝uoff£t
 = 
LB_CTLCPU_OFFSET
 + 
i
 * 
LB_CTLCPU_SIZE
;

221 
¸am
 = 
	`œmebus_m≠_¨ó
(
œmebus
,

222 
LB_CONTROLLER_SLOT
,

223 
˘l˝uoff£t
 + 
CTLCPU_CRAM
);

224 
¸am
[0] = (
uöt32_t
)
˝u_°¨t_£c⁄d¨y
;

225 
¸am
[1] = 
˝unum
++;

229 
	`memb¨_°‹e_°‹e
();

232 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_CPUE
, 
˝umask
);

233 
	}
}

251 
	$œmebus_¥obe
(
œmebus_so·c
 *
sc
,

252 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

253 
uöt32_t
 
lowvî
, uöt32_à*
vîsi⁄_ªt
)

255 
¶Ÿ
;

256 
uöt32_t
 
vÆ
;

263 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

265 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; slot++) {

266 i‡(
sc
->
ls_¶Ÿsöu£
 & (1<<
¶Ÿ
)) {

271 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_VID
);

272 i‡(
vÆ
!=
víd‹id
) {

277 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DID
);

278 i‡(
vÆ
 !
devi˚id
) {

283 
vÆ
 = 
	`ªad_cfg_ªgi°î
(
sc
, 
¶Ÿ
, 
CFGREG_DRL
);

284 i‡(
vÆ
 < 
lowvî
) {

288 i‡(
vîsi⁄_ªt
 !
NULL
) {

289 *
vîsi⁄_ªt
 = 
vÆ
;

294 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

295  
¶Ÿ
;

300 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

302 
	}
}

310 
	$œmebus_m¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

312 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

313 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

315 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

317 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)!=0) {

318 
	`∑nic
("œmebus_m¨k: slŸ %dáÃódy i¿u£\n", 
¶Ÿ
);

321 
sc
->
ls_¶Ÿsöu£
 |
mask
;

323 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

324 
	}
}

330 
	$œmebus_unm¨k
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

332 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

333 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

335 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

337 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

338 
	`∑nic
("œmebus_m¨k: slŸ %dÇŸ m¨ked i¿u£\n", 
¶Ÿ
);

341 
sc
->
ls_¶Ÿsöu£
 &~
mask
;

343 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

344 
	}
}

351 
œmebus_©èch_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
,

352 *
devd©a
,

353 (*
úqfunc
)(*
devd©a
))

355 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

356 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

358 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

360 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

361 
	`∑nic
("lamebus_attach_interrupt: slot %dÇot marked in use\n",

362 
¶Ÿ
);

365 
	`KASSERT
(
sc
->
ls_devd©a
[
¶Ÿ
]==
NULL
);

366 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
);

368 
sc
->
ls_devd©a
[
¶Ÿ
] = 
devd©a
;

369 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
úqfunc
;

371 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

372 
	}
}

379 
	$œmebus_dëach_öãºu±
(
œmebus_so·c
 *
sc
, 
¶Ÿ
)

381 
uöt32_t
 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

382 
	`KASSERT
(
¶Ÿ
>=0 && slŸ < 
LB_NSLOTS
);

384 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

386 i‡((
sc
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

387 
	`∑nic
("lamebus_detach_interrupt: slot %dÇot marked in use\n",

388 
¶Ÿ
);

391 
	`KASSERT
(
sc
->
ls_úqfuncs
[
¶Ÿ
]!=
NULL
);

393 
sc
->
ls_devd©a
[
¶Ÿ
] = 
NULL
;

394 
sc
->
ls_úqfuncs
[
¶Ÿ
] = 
NULL
;

396 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

397 
	}
}

403 
	$œmebus_mask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

405 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

406 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

408 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

409 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

410 
bôs
 &~
mask
;

411 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

412 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

413 
	}
}

416 
	$œmebus_unmask_öãºu±
(
œmebus_so·c
 *
œmebus
, 
¶Ÿ
)

418 
uöt32_t
 
bôs
, 
mask
 = ((uöt32_t)1Ë<< 
¶Ÿ
;

419 
	`KASSERT
(
¶Ÿ
 >0 && slŸ < 
LB_NSLOTS
);

421 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

422 
bôs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
);

423 
bôs
 |
mask
;

424 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQE
, 
bôs
);

425 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

426 
	}
}

433 
	$œmebus_öãºu±
(
œmebus_so·c
 *
œmebus
)

446 
¶Ÿ
;

447 
uöt32_t
 
mask
;

448 
uöt32_t
 
úqs
;

449 (*
h™dÀr
)(*);

450 *
d©a
;

453 
duds
 = 0;

454 
duds_this_time
 = 0;

457 
	`KASSERT
(
œmebus
 !
NULL
);

460 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

466 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

468 i‡(
úqs
 == 0) {

472 
	`k¥ötf
("lamebus: stray interrupt on cpu %u\n",

473 
cur˝u
->
c_numbî
);

474 
duds
++;

475 
duds_this_time
++;

495 
mask
=1, 
¶Ÿ
=0; slŸ<
LB_NSLOTS
; mask<<=1, slot++) {

496 i‡((
úqs
 & 
mask
) == 0) {

505 i‡((
œmebus
->
ls_¶Ÿsöu£
 & 
mask
)==0) {

509 
duds
++;

510 
duds_this_time
++;

514 i‡(
œmebus
->
ls_úqfuncs
[
¶Ÿ
]==
NULL
) {

519 
duds
++;

520 
duds_this_time
++;

529 
h™dÀr
 = 
œmebus
->
ls_úqfuncs
[
¶Ÿ
];

530 
d©a
 = 
œmebus
->
ls_devd©a
[
¶Ÿ
];

531 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

533 
	`h™dÀr
(
d©a
);

535 
	`•ölock_acquúe
(&
œmebus
->
ls_lock
);

543 
úqs
 = 
	`ªad_˘l_ªgi°î
(
œmebus
, 
CTLREG_IRQS
);

565 i‡(
duds_this_time
 =0 && 
duds
 > 0) {

566 
	`k¥ötf
("œmebus: %d dud i¡îru±s\n", 
duds
);

567 
duds
 = 0;

570 i‡(
duds
 > 10000) {

571 
	`∑nic
("œmebus:Åoÿm™y (%dËdud i¡îru±s\n", 
duds
);

575 
	`•ölock_ªÀa£
(&
œmebus
->
ls_lock
);

576 
	}
}

582 
	$œmebus_powîoff
(
œmebus_so·c
 *
œmebus
)

588 
	`˝u_úqoff
();

589 
	`wrôe_˘l_ªgi°î
(
œmebus
, 
CTLREG_PWR
, 0);

592 
	`˝u_hÆt
();

593 
	}
}

598 
uöt32_t


599 
	$œmebus_ømsize
()

608  
	`ªad_˘l_ªgi°î
(
NULL
, 
CTLREG_RAMSZ
);

609 
	}
}

615 
	$œmebus_as£π_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

617 i‡(
œmebus
->
ls_unùro˚ss‹
) {

620 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

621 
CTLCPU_CIPI
, 1);

622 
	}
}

625 
	$œmebus_˛ór_ùi
(
œmebus_so·c
 *
œmebus
, 
˝u
 *
èrgë
)

627 i‡(
œmebus
->
ls_unùro˚ss‹
) {

630 
	`wrôe_˘l˝u_ªgi°î
(
œmebus
, 
èrgë
->
c_h¨dw¨e_numbî
,

631 
CTLCPU_CIPI
, 0);

632 
	}
}

638 
œmebus_so·c
 *

639 
	$œmebus_öô
()

641 
œmebus_so·c
 *
œmebus
;

642 
i
;

645 
œmebus
 = 
	`kmÆloc
((
œmebus_so·c
));

646 i‡(
œmebus
==
NULL
) {

647 
	`∑nic
("lamebus_init: Out of memory\n");

650 
	`•ölock_öô
(&
œmebus
->
ls_lock
);

655 
œmebus
->
ls_¶Ÿsöu£
 = 1 << 
LB_CONTROLLER_SLOT
;

657 
i
=0; i<
LB_NSLOTS
; i++) {

658 
œmebus
->
ls_devd©a
[
i
] = 
NULL
;

659 
œmebus
->
ls_úqfuncs
[
i
] = 
NULL
;

662 
œmebus
->
ls_unùro˚ss‹
 = 0;

664  
œmebus
;

665 
	}
}

	@dev/lamebus/lamebus.h

30 #i‚de‡
_LAMEBUS_H_


31 
	#_LAMEBUS_H_


	)

33 
	~<˝u.h
>

34 
	~<•ölock.h
>

44 
	#LB_VENDOR_CS161
 1

	)

47 
	#LBCS161_UPBUSCTL
 1

	)

48 
	#LBCS161_TIMER
 2

	)

49 
	#LBCS161_DISK
 3

	)

50 
	#LBCS161_SERIAL
 4

	)

51 
	#LBCS161_SCREEN
 5

	)

52 
	#LBCS161_NET
 6

	)

53 
	#LBCS161_EMUFS
 7

	)

54 
	#LBCS161_TRACE
 8

	)

55 
	#LBCS161_RANDOM
 9

	)

56 
	#LBCS161_MPBUSCTL
 10

	)

59 
	#LB_CONTROLLER_SLOT
 31

	)

62 
	#LB_NSLOTS
 32

	)

65 
	#LB_CONFIG_SIZE
 1024

	)

68 
	#LB_CTLCPU_SIZE
 1024

	)

71 
	#LB_CTLCPU_OFFSET
 32768

	)

74 
	#LB_SLOT_SIZE
 65536

	)

77 (*
	tlb_úqfunc
)(*
	tdevd©a
);

82 
	sœmebus_so·c
 {

83 
•ölock
 
ls_lock
;

86 
uöt32_t
 
ls_¶Ÿsöu£
;

87 *
ls_devd©a
[
LB_NSLOTS
];

88 
lb_úqfunc
 
ls_úqfuncs
[
LB_NSLOTS
];

91 
ls_unùro˚ss‹
;

97 
œmebus_so·c
 *
	`œmebus_öô
();

102 
	`œmebus_föd_˝us
(
œmebus_so·c
 *
œmebus
);

107 
	`œmebus_°¨t_˝us
(
œmebus_so·c
 *
œmebus
);

116 
	`œmebus_¥obe
(
œmebus_so·c
 *,

117 
uöt32_t
 
víd‹id
, uöt32_à
devi˚id
,

118 
uöt32_t
 
lowvî
, uöt32_à*
vîsi⁄_ªt
);

125 
	`œmebus_m¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

126 
	`œmebus_unm¨k
(
œmebus_so·c
 *, 
¶Ÿ
);

131 
	`œmebus_©èch_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
,

132 *
devd©a
,

133 (*
úqfunc
)(*
devd©a
));

137 
	`œmebus_dëach_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

142 
	`œmebus_mask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

143 
	`œmebus_unmask_öãºu±
(
œmebus_so·c
 *, 
¶Ÿ
);

148 
	`œmebus_öãºu±
(
œmebus_so·c
 *);

153 
	`œmebus_powîoff
(
œmebus_so·c
 *);

158 
size_t
 
	`œmebus_ømsize
();

163 
	`œmebus_as£π_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

164 
	`œmebus_˛ór_ùi
(
œmebus_so·c
 *, 
˝u
 *
èrgë˝u
);

170 
uöt32_t
 
	`œmebus_ªad_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

171 
uöt32_t
 
off£t
);

172 
	`œmebus_wrôe_ªgi°î
(
œmebus_so·c
 *, 
¶Ÿ
,

173 
uöt32_t
 
off£t
, uöt32_à
vÆ
);

178 *
	`œmebus_m≠_¨ó
(
œmebus_so·c
 *, 
¶Ÿ
,

179 
uöt32_t
 
off£t
);

	@dev/lamebus/lhd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<memb¨.h
>

39 
	~<synch.h
>

40 
	~<∂©f‹m/bus.h
>

41 
	~<vfs.h
>

42 
	~<œmebus/lhd.h
>

43 
	~"autoc⁄f.h
"

46 
	#LHD_REG_NSECT
 0

	)

47 
	#LHD_REG_STAT
 4

	)

48 
	#LHD_REG_SECT
 8

	)

49 
	#LHD_REG_RPM
 12

	)

52 
	#LHD_IDLE
 0

	)

53 
	#LHD_WORKING
 1

	)

54 
	#LHD_OK
 4

	)

55 
	#LHD_INVSECT
 12

	)

56 
	#LHD_MEDIA
 20

	)

57 
	#LHD_ISWRITE
 2

	)

58 
	#LHD_STATEMASK
 0x1d

	)

61 
	#LHD_BUFFER
 32768

	)

67 
ölöe


68 
uöt32_t
 
	$lhd_rdªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
)

70  
	`bus_ªad_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
);

71 
	}
}

77 
ölöe


78 
	$lhd_wªg
(
lhd_so·c
 *
lh
, 
uöt32_t
 
ªg
, uöt32_à
vÆ
)

80 
	`bus_wrôe_ªgi°î
(
lh
->
lh_busd©a
,Üh->
lh_bu•os
, 
ªg
, 
vÆ
);

81 
	}
}

87 
	$lhd_code_to_î∫o
(
lhd_so·c
 *
lh
, 
code
)

89 
code
 & 
LHD_STATEMASK
) {

90 
LHD_OK
:  0;

91 
LHD_INVSECT
:  
EINVAL
;

92 
LHD_MEDIA
:  
EIO
;

94 
	`k¥ötf
("lhd%d: Unknow¿ªsu… codê%d\n", 
lh
->
lh_unô
, 
code
);

95  
EAGAIN
;

96 
	}
}

104 
	$lhd_iod⁄e
(
lhd_so·c
 *
lh
, 
îr
)

106 
lh
->
lh_ªsu…
 = 
îr
;

107 
	`V
(
lh
->
lh_d⁄e
);

108 
	}
}

116 
	$lhd_úq
(*
vlh
)

118 
lhd_so·c
 *
lh
 = 
vlh
;

119 
uöt32_t
 
vÆ
;

121 
vÆ
 = 
	`lhd_rdªg
(
lh
, 
LHD_REG_STAT
);

123 
vÆ
 & 
LHD_STATEMASK
) {

124 
LHD_IDLE
:

125 
LHD_WORKING
:

127 
LHD_OK
:

128 
LHD_INVSECT
:

129 
LHD_MEDIA
:

130 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

131 
	`lhd_iod⁄e
(
lh
, 
	`lhd_code_to_î∫o
÷h, 
vÆ
));

134 
	}
}

141 
	$lhd_óch›í
(
devi˚
 *
d
, 
›íÊags
)

146 ()
d
;

147 ()
›íÊags
;

150 
	}
}

157 
	$lhd_io˘l
(
devi˚
 *
d
, 
›
, 
u£Ωå_t
 
d©a
)

162 ()
d
;

163 ()
›
;

164 ()
d©a
;

165  
EIOCTL
;

166 
	}
}

176 
	$lhd_ª£t
(
lhd_so·c
 *
lh
)

178 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 0);

179 
	}
}

187 
	$lhd_io
(
devi˚
 *
d
, 
uio
 *uio)

189 
lhd_so·c
 *
lh
 = 
d
->
d_d©a
;

191 
uöt32_t
 
£˘‹
 = 
uio
->
uio_off£t
 / 
LHD_SECTSIZE
;

192 
uöt32_t
 
£˘off
 = 
uio
->
uio_off£t
 % 
LHD_SECTSIZE
;

193 
uöt32_t
 
Àn
 = 
uio
->
uio_ªsid
 / 
LHD_SECTSIZE
;

194 
uöt32_t
 
Ànoff
 = 
uio
->
uio_ªsid
 % 
LHD_SECTSIZE
;

195 
uöt32_t
 
i
;

196 
uöt32_t
 
°©vÆ
 = 
LHD_WORKING
;

197 
ªsu…
;

200 i‡(
£˘off
 !0 || 
Ànoff
 != 0) {

201  
EINVAL
;

206 i‡(
£˘‹
+
Àn
 > 
lh
->
lh_dev
.
d_blocks
) {

207  
EINVAL
;

211 i‡(
uio
->
uio_rw
==
UIO_WRITE
) {

212 
°©vÆ
 |
LHD_ISWRITE
;

216 
i
=0; i<
Àn
; i++) {

219 
	`P
(
lh
->
lh_˛ór
);

225 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

226 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

227 
	`memb¨_°‹e_°‹e
();

228 i‡(
ªsu…
) {

229 
	`V
(
lh
->
lh_˛ór
);

230  
ªsu…
;

235 
	`lhd_wªg
(
lh
, 
LHD_REG_SECT
, 
£˘‹
+
i
);

238 
	`lhd_wªg
(
lh
, 
LHD_REG_STAT
, 
°©vÆ
);

241 
	`P
(
lh
->
lh_d⁄e
);

244 
ªsu…
 = 
lh
->
lh_ªsu…
;

250 i‡(
ªsu…
==0 && 
uio
->
uio_rw
==
UIO_READ
) {

251 
	`memb¨_lﬂd_lﬂd
();

252 
ªsu…
 = 
	`uiomove
(
lh
->
lh_buf
, 
LHD_SECTSIZE
, 
uio
);

256 
	`V
(
lh
->
lh_˛ór
);

259 i‡(
ªsu…
) {

260  
ªsu…
;

265 
	}
}

267 c⁄° 
devi˚_›s
 
	glhd_dev›s
 = {

268 .
dev›_óch›í
 = 
lhd_óch›í
,

269 .
	gdev›_io
 = 
lhd_io
,

270 .
	gdev›_io˘l
 = 
lhd_io˘l
,

277 
	$c⁄fig_lhd
(
lhd_so·c
 *
lh
, 
lhdno
)

279 
«me
[32];

282 
	`¢¥ötf
(
«me
, “ame), "lhd%d", 
lhdno
);

285 
lh
->
lh_buf
 = 
	`bus_m≠_¨ó
÷h->
lh_busd©a
,Üh->
lh_bu•os
, 
LHD_BUFFER
);

288 
lh
->
lh_˛ór
 = 
	`£m_¸óã
("lhd-clear", 1);

289 i‡(
lh
->
lh_˛ór
 =
NULL
) {

290  
ENOMEM
;

292 
lh
->
lh_d⁄e
 = 
	`£m_¸óã
("lhd-done", 0);

293 i‡(
lh
->
lh_d⁄e
 =
NULL
) {

294 
	`£m_de°roy
(
lh
->
lh_˛ór
);

295 
lh
->
lh_˛ór
 = 
NULL
;

296  
ENOMEM
;

300 
lh
->
lh_dev
.
d_›s
 = &
lhd_dev›s
;

301 
lh
->
lh_dev
.
d_blocks
 = 
	`bus_ªad_ªgi°î
÷h->
lh_busd©a
,Üh->
lh_bu•os
,

302 
LHD_REG_NSECT
);

303 
lh
->
lh_dev
.
d_blocksize
 = 
LHD_SECTSIZE
;

304 
lh
->
lh_dev
.
d_d©a
 =Üh;

307  
	`vfs_adddev
(
«me
, &
lh
->
lh_dev
, 1);

308 
	}
}

	@dev/lamebus/lhd.h

30 #i‚de‡
_LAMEBUS_LHD_H_


31 
	#_LAMEBUS_LHD_H_


	)

33 
	~<devi˚.h
>

38 
	#LHD_SECTSIZE
 512

	)

43 
	slhd_so·c
 {

45 *
	mlh_busd©a
;

46 
uöt32_t
 
	mlh_bu•os
;

47 
	mlh_unô
;

53 *
	mlh_buf
;

54 
	mlh_ªsu…
;

55 
£m≠h‹e
 *
	mlh_˛ór
;

56 
£m≠h‹e
 *
	mlh_d⁄e
;

58 
devi˚
 
	mlh_dev
;

62 
lhd_úq
( *);

	@dev/lamebus/lhd_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/lhd.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 2

	)

42 
lhd_so·c
 *

43 
	$©èch_lhd_to_œmebus
(
lhdno
, 
œmebus_so·c
 *
sc
)

45 
lhd_so·c
 *
lh
;

46 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_DISK
,

47 
LOW_VERSION
, 
NULL
);

48 i‡(
¶Ÿ
 < 0) {

50  
NULL
;

53 
lh
 = 
	`kmÆloc
((
lhd_so·c
));

54 i‡(
lh
==
NULL
) {

56  
NULL
;

60 
lh
->
lh_busd©a
 = 
sc
;

61 
lh
->
lh_bu•os
 = 
¶Ÿ
;

62 
lh
->
lh_unô
 = 
lhdno
;

65 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

66 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
lh
, 
lhd_úq
);

68  
lh
;

69 
	}
}

	@dev/lamebus/lnet.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

34 
	~"autoc⁄f.h
"

37 
	$c⁄fig_ ë
(
 ë_so·c
 *
sc
, 
 ëno
)

39 ()
sc
;

41 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

43  
ENODEV
;

44 
	}
}

	@dev/lamebus/lnet_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~"autoc⁄f.h
"

36 
	#LOW_VERSION
 1

	)

38 
	#HIGH_VERSION
 1

	)

40 
 ë_so·c
 *

41 
	$©èch_ ë_to_œmebus
(
 ëno
, 
œmebus_so·c
 *
sc
)

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_NET
,

44 
LOW_VERSION
, 
HIGH_VERSION
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
	`k¥ötf
(" ë%d: Nÿ√tw‹k suµ‹àö sy°em\n", 
 ëno
);

51  
NULL
;

52 
	}
}

	@dev/lamebus/lrandom.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<uio.h
>

36 
	~<∂©f‹m/bus.h
>

37 
	~<œmebus/Ã™dom.h
>

38 
	~"autoc⁄f.h
"

41 
	#LR_REG_RAND
 0

	)

44 
	#LR_RANDMAX
 0xffffffff

	)

47 
	$c⁄fig_Ã™dom
(
Ã™dom_so·c
 *
Ã
, 
Ã™domno
)

49 ()
Ã™domno
;

50 ()
Ã
;

52 
	}
}

54 
uöt32_t


55 
	$Ã™dom_øndom
(*
devd©a
)

57 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

58  
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
, 
LR_REG_RAND
);

59 
	}
}

61 
uöt32_t


62 
	$Ã™dom_øndmax
(*
devd©a
)

64 ()
devd©a
;

65  
LR_RANDMAX
;

66 
	}
}

69 
	$Ã™dom_ªad
(*
devd©a
, 
uio
 *uio)

71 
Ã™dom_so·c
 *
Ã
 = 
devd©a
;

72 
uöt32_t
 
vÆ
;

73 
ªsu…
;

75 
uio
->
uio_ªsid
 > 0) {

76 
vÆ
 = 
	`bus_ªad_ªgi°î
(
Ã
->
Ã_bus
,Ür->
Ã_bu•os
,

77 
LR_REG_RAND
);

78 
ªsu…
 = 
	`uiomove
(&
vÆ
, (vÆ), 
uio
);

79 i‡(
ªsu…
) {

80  
ªsu…
;

85 
	}
}

	@dev/lamebus/lrandom.h

30 #i‚de‡
_LAMEBUS_LRANDOM_H_


31 
	#_LAMEBUS_LRANDOM_H_


	)

33 
	guio
;

35 
	sÃ™dom_so·c
 {

37 *
	mÃ_bus
;

38 
uöt32_t
 
	mÃ_bu•os
;

42 
uöt32_t
 
Ã™dom_øndom
–*
devd©a
);

43 
uöt32_t
 
Ã™dom_øndmax
–*
devd©a
);

44 
Ã™dom_ªad
–*, 
uio
 *);

	@dev/lamebus/lrandom_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/Ã™dom.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
Ã™dom_so·c
 *

40 
	$©èch_Ã™dom_to_œmebus
(
Ã™domno
, 
œmebus_so·c
 *
sc
)

42 
Ã™dom_so·c
 *
Ã
;

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_RANDOM
,

44 
LOW_VERSION
, 
NULL
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
Ã
 = 
	`kmÆloc
((
Ã™dom_so·c
));

50 i‡(
Ã
==
NULL
) {

51  
NULL
;

54 ()
Ã™domno
;

56 
Ã
->
Ã_bus
 = 
sc
;

57 
Ã
->
Ã_bu•os
 = 
¶Ÿ
;

59 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

61  
Ã
;

62 
	}
}

	@dev/lamebus/lscreen.c

36 
	~<ty≥s.h
>

37 
	~<lib.h
>

38 
	~<•ölock.h
>

39 
	~<∂©f‹m/bus.h
>

40 
	~<œmebus/ls¸ìn.h
>

41 
	~"autoc⁄f.h
"

44 
	#LSCR_REG_POSN
 0

	)

45 
	#LSCR_REG_SIZE
 4

	)

46 
	#LSCR_REG_CHAR
 8

	)

47 
	#LSCR_REG_RIRQ
 12

	)

50 
	#LSCR_IRQ_ENABLE
 1

	)

51 
	#LSCR_IRQ_ACTIVE
 2

	)

54 
	#LSCR_SCREEN
 32768

	)

58 
ölöe


60 
	$•lôxy
(
uöt32_t
 
xy
, *
x
, *
y
)

62 *
x
 = 
xy
 >> 16;

63 *
y
 = 
xy
 & 0xffff;

64 
	}
}

68 
ölöe


69 
uöt32_t


70 
	$mîgexy
(
x
, 
y
)

72 
uöt32_t
 
vÆ
 = 
x
;

74  (
vÆ
 << 16Ë| 
y
;

75 
	}
}

83 
	$ls¸ìn_úq
(*
vsc
)

85 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

86 
uöt32_t
 
ch
, 
x
;

88 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

90 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSCR_REG_RIRQ
);

91 i‡(
x
 & 
LSCR_IRQ_ACTIVE
) {

92 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

93 
LSCR_REG_CHAR
);

94 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

95 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

97 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

98 i‡(
sc
->
ls_öput
) {

99 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

103 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

105 
	}
}

114 
	$ls¸ìn_√wlöe
(
ls¸ìn_so·c
 *
sc
)

116 i‡(
sc
->
ls_cy
 >sc->
ls_height
-1) {

121 
	`memmove
(
sc
->
ls_s¸ìn
, sc->ls_s¸ì¿+ sc->
ls_width
,

122 
sc
->
ls_width
 * (sc->
ls_height
-1));

123 
	`bzîo
(
sc
->
ls_s¸ìn
 + sc->
ls_width
 * (sc->
ls_height
-1),

124 
sc
->
ls_width
);

127 
sc
->
ls_cy
++;

129 
sc
->
ls_cx
=0;

130 
	}
}

137 
	$ls¸ìn_ch¨
(
ls¸ìn_so·c
 *
sc
, 
ch
)

139 i‡(
sc
->
ls_cx
 >sc->
ls_width
) {

140 
	`ls¸ìn_√wlöe
(
sc
);

143 
sc
->
ls_s¸ìn
[sc->
ls_cy
*sc->
ls_width
 + sc->
ls_cx
] = 
ch
;

144 
sc
->
ls_cx
++;

145 
	}
}

152 
	$ls¸ìn_wrôe
(*
vsc
, 
ch
)

154 
ls¸ìn_so·c
 *
sc
 = 
vsc
;

155 
ccx
, 
ccy
;

157 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

159 
ch
) {

160 '\n': 
	`ls¸ìn_√wlöe
(
sc
); ;

161 : 
	`ls¸ìn_ch¨
(
sc
, 
ch
); ;

169 
ccx
 = 
sc
->
ls_cx
;

170 
ccy
 = 
sc
->
ls_cy
;

171 i‡(
ccx
==
sc
->
ls_width
) {

172 
ccx
--;

176 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

177 
LSCR_REG_POSN
, 
	`mîgexy
(
ccx
, 
ccy
));

179 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

180 
	}
}

188 
	$c⁄fig_ls¸ìn
(
ls¸ìn_so·c
 *
sc
, 
ls¸ì¬o
)

190 
uöt32_t
 
vÆ
;

192 ()
ls¸ì¬o
;

194 
	`•ölock_öô
(&
sc
->
ls_lock
);

200 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

201 
LSCR_REG_RIRQ
, 
LSCR_IRQ_ENABLE
);

206 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

207 
LSCR_REG_SIZE
);

208 
	`•lôxy
(
vÆ
, &
sc
->
ls_width
, &sc->
ls_height
);

213 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

214 
LSCR_REG_POSN
);

215 
	`•lôxy
(
vÆ
, &
sc
->
ls_cx
, &sc->
ls_cy
);

220 
sc
->
ls_s¸ìn
 = 
	`bus_m≠_¨ó
(sc->
ls_busd©a
, sc->
ls_bu•os
,

221 
LSCR_SCREEN
);

224 
	}
}

	@dev/lamebus/lscreen.h

30 #i‚de‡
_LAMEBUS_LSCREEN_H_


31 
	#_LAMEBUS_LSCREEN_H_


	)

36 
	sls¸ìn_so·c
 {

38 
•ölock
 
	mls_lock
;

39 
	mls_width
, 
	mls_height
;

40 
	mls_cx
, 
	mls_cy
;

41 *
	mls_s¸ìn
;

44 *
	mls_busd©a
;

45 
uöt32_t
 
	mls_bu•os
;

48 *
	mls_devd©a
;

49 (*
	mls_°¨t
)(*
	mdevd©a
);

50 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

54 
ls¸ìn_úq
–*
sc
);

57 
ls¸ìn_wrôe
–*
sc
, 
ch
);

	@dev/lamebus/lscreen_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/ls¸ìn.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
	#HIGH_VERSION
 1

	)

44 
ls¸ìn_so·c
 *

45 
	$©èch_ls¸ìn_to_œmebus
(
ls¸ì¬o
, 
œmebus_so·c
 *
sc
)

47 
ls¸ìn_so·c
 *
ls
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SCREEN
,

49 
LOW_VERSION
, 
HIGH_VERSION
);

50 i‡(
¶Ÿ
 < 0) {

52  
NULL
;

55 
ls
 = 
	`kmÆloc
((
ls¸ìn_so·c
));

56 i‡(
ls
==
NULL
) {

58  
NULL
;

62 
ls
->
ls_busd©a
 = 
sc
;

63 
ls
->
ls_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
ls¸ìn_úq
);

69  
ls
;

70 
	}
}

	@dev/lamebus/lser.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<∂©f‹m/bus.h
>

34 
	~<œmebus/l£r.h
>

35 
	~"autoc⁄f.h
"

38 
	#LSER_REG_CHAR
 0

	)

39 
	#LSER_REG_WIRQ
 4

	)

40 
	#LSER_REG_RIRQ
 8

	)

43 
	#LSER_IRQ_ENABLE
 1

	)

44 
	#LSER_IRQ_ACTIVE
 2

	)

45 
	#LSER_IRQ_FORCE
 4

	)

48 
	$l£r_úq
(*
vsc
)

50 
l£r_so·c
 *
sc
 = 
vsc
;

51 
uöt32_t
 
x
;

52 
boﬁ
 
˛ór_to_wrôe
 = 
Ál£
;

53 
boﬁ
 
gŸ_a_ªad
 = 
Ál£
;

54 
uöt32_t
 
ch
 = 0;

56 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

58 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

59 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

60 
x
 = 
LSER_IRQ_ENABLE
;

61 
sc
->
ls_wbusy
 = 0;

62 
˛ór_to_wrôe
 = 
åue
;

63 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

64 
LSER_REG_WIRQ
, 
x
);

67 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

68 i‡(
x
 & 
LSER_IRQ_ACTIVE
) {

69 
x
 = 
LSER_IRQ_ENABLE
;

70 
ch
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

71 
LSER_REG_CHAR
);

72 
gŸ_a_ªad
 = 
åue
;

73 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

74 
LSER_REG_RIRQ
, 
x
);

77 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

79 i‡(
˛ór_to_wrôe
 && 
sc
->
ls_°¨t
 !
NULL
) {

80 
sc
->
	`ls_°¨t
(sc->
ls_devd©a
);

82 i‡(
gŸ_a_ªad
 && 
sc
->
ls_öput
 !
NULL
) {

83 
sc
->
	`ls_öput
(sc->
ls_devd©a
, 
ch
);

85 
	}
}

88 
	$l£r_wrôe
(*
vls
, 
ch
)

90 
l£r_so·c
 *
ls
 = 
vls
;

92 
	`•ölock_acquúe
(&
ls
->
ls_lock
);

94 i‡(
ls
->
ls_wbusy
) {

106 
	`∑nic
("lser: Not clearÅo write\n");

108 
ls
->
ls_wbusy
 = 
åue
;

110 
	`bus_wrôe_ªgi°î
(
ls
->
ls_busd©a
,Üs->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

112 
	`•ölock_ªÀa£
(&
ls
->
ls_lock
);

113 
	}
}

117 
	$l£r_pﬁl_u¡û_wrôe
(
l£r_so·c
 *
sc
)

119 
uöt32_t
 
vÆ
;

121 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
sc
->
ls_lock
));

124 
vÆ
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

125 
LSER_REG_WIRQ
);

127 (
vÆ
 & 
LSER_IRQ_ACTIVE
) == 0);

128 
	}
}

131 
	$l£r_wrôïﬁÀd
(*
vsc
, 
ch
)

133 
l£r_so·c
 *
sc
 = 
vsc
;

134 
boﬁ
 
úq≥ndög
;

136 
	`•ölock_acquúe
(&
sc
->
ls_lock
);

138 i‡(
sc
->
ls_wbusy
) {

139 
úq≥ndög
 = 
åue
;

140 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

142 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

143 
LSER_REG_WIRQ
,

144 
LSER_IRQ_FORCE
|
LSER_IRQ_ENABLE
);

147 
úq≥ndög
 = 
Ál£
;

149 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

150 
LSER_REG_WIRQ
, 0);

154 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_CHAR
, 
ch
);

157 
	`l£r_pﬁl_u¡û_wrôe
(
sc
);

166 i‡(!
úq≥ndög
) {

167 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

168 
LSER_REG_WIRQ
, 
LSER_IRQ_ENABLE
);

171 
	`•ölock_ªÀa£
(&
sc
->
ls_lock
);

172 
	}
}

175 
	$c⁄fig_l£r
(
l£r_so·c
 *
sc
, 
l£∫o
)

177 
uöt32_t
 
x
;

179 ()
l£∫o
;

185 
	`•ölock_öô
(&
sc
->
ls_lock
);

186 
sc
->
ls_wbusy
 = 
Ál£
;

188 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_RIRQ
);

189 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

190 
LSER_REG_RIRQ
, 
x
 | 
LSER_IRQ_ENABLE
);

191 
x
 = 
	`bus_ªad_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
, 
LSER_REG_WIRQ
);

192 
	`bus_wrôe_ªgi°î
(
sc
->
ls_busd©a
, sc->
ls_bu•os
,

193 
LSER_REG_WIRQ
, 
x
 | 
LSER_IRQ_ENABLE
);

196 
	}
}

	@dev/lamebus/lser.h

30 #i‚de‡
_LAMEBUS_LSER_H_


31 
	#_LAMEBUS_LSER_H_


	)

33 
	~<•ölock.h
>

35 
	sl£r_so·c
 {

37 
•ölock
 
	mls_lock
;

38 vﬁ©ûê
boﬁ
 
	mls_wbusy
;

41 *
	mls_busd©a
;

42 
uöt32_t
 
	mls_bu•os
;

45 *
	mls_devd©a
;

46 (*
	mls_°¨t
)(*
	mdevd©a
);

47 (*
	mls_öput
)(*
	mdevd©a
, 
	mch
);

51 
l£r_úq
–*
sc
);

54 
l£r_wrôe
–*
sc
, 
ch
);

55 
l£r_wrôïﬁÀd
–*
sc
, 
ch
);

	@dev/lamebus/lser_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/l£r.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
l£r_so·c
 *

40 
	$©èch_l£r_to_œmebus
(
l£∫o
, 
œmebus_so·c
 *
sc
)

42 
l£r_so·c
 *
ls
;

43 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_SERIAL
,

44 
LOW_VERSION
, 
NULL
);

45 i‡(
¶Ÿ
 < 0) {

46  
NULL
;

49 
ls
 = 
	`kmÆloc
((
l£r_so·c
));

50 i‡(
ls
==
NULL
) {

51  
NULL
;

54 ()
l£∫o
;

56 
ls
->
ls_busd©a
 = 
sc
;

57 
ls
->
ls_bu•os
 = 
¶Ÿ
;

59 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

60 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
ls
, 
l£r_úq
);

62  
ls
;

63 
	}
}

	@dev/lamebus/ltimer.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<•l.h
>

36 
	~<˛ock.h
>

37 
	~<∂©f‹m/bus.h
>

38 
	~<œmebus/…imî.h
>

39 
	~"autoc⁄f.h
"

42 
	#LT_REG_SEC
 0

	)

43 
	#LT_REG_NSEC
 4

	)

44 
	#LT_REG_ROE
 8

	)

45 
	#LT_REG_IRQ
 12

	)

46 
	#LT_REG_COUNT
 16

	)

47 
	#LT_REG_SPKR
 20

	)

50 
	#LT_GRANULARITY
 1000000

	)

52 
boﬁ
 
	ghavëimî˛ock
;

58 
	$c⁄fig_…imî
(
…imî_so·c
 *
…
, 
…imîno
)

83 ()
…imîno
;

84 
…
->
…_h¨d˛ock
 = 0;

90 i‡(!
havëimî˛ock
) {

91 
havëimî˛ock
 = 
åue
;

92 
…
->
…_timî˛ock
 = 1;

95 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_ROE
, 1);

96 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_COUNT
,

97 
LT_GRANULARITY
);

101 
	}
}

107 
	$…imî_úq
(*
v…
)

109 
…imî_so·c
 *
…
 = 
v…
;

110 
uöt32_t
 
vÆ
;

112 
vÆ
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_IRQ
);

113 i‡(
vÆ
) {

118 i‡(
…
->
…_h¨d˛ock
) {

119 
	`h¨d˛ock
();

124 i‡(
…
->
…_timî˛ock
) {

125 
	`timî˛ock
();

128 
	}
}

136 
	$…imî_bìp
(*
v…
)

138 
…imî_so·c
 *
…
 = 
v…
;

140 
	`bus_wrôe_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
, 
LT_REG_SPKR
, 440);

141 
	}
}

149 
	$…imî_gëtime
(*
v…
, 
time•ec
 *
ts
)

151 
…imî_so·c
 *
…
 = 
v…
;

152 
uöt32_t
 
£cs1
, 
£cs2
;

153 
•l
;

170 
•l
 = 
	`•lhigh
();

172 
£cs1
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

173 
LT_REG_SEC
);

174 
ts
->
tv_n£c
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

175 
LT_REG_NSEC
);

176 
£cs2
 = 
	`bus_ªad_ªgi°î
(
…
->
…_bus
,Üt->
…_bu•os
,

177 
LT_REG_SEC
);

179 
	`•lx
(
•l
);

181 i‡(
ts
->
tv_n£c
 < 5000000) {

182 
ts
->
tv_£c
 = 
£cs2
;

185 
ts
->
tv_£c
 = 
£cs1
;

187 
	}
}

	@dev/lamebus/ltimer.h

30 #i‚de‡
_LAMEBUS_LTIMER_H_


31 
	#_LAMEBUS_LTIMER_H_


	)

33 
	gtime•ec
;

38 
	s…imî_so·c
 {

40 
	m…_h¨d˛ock
;

41 
	m…_timî˛ock
;

44 *
	m…_bus
;

45 
uöt32_t
 
	m…_bu•os
;

49 
…imî_úq
–*
…
);

52 
…imî_bìp
–*
devd©a
);

53 
…imî_gëtime
–*
devd©a
,

54 
time•ec
 *
ts
);

	@dev/lamebus/ltimer_att.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<œmebus/œmebus.h
>

36 
	~<œmebus/…imî.h
>

37 
	~"autoc⁄f.h
"

40 
	#LOW_VERSION
 1

	)

42 
…imî_so·c
 *

43 
	$©èch_…imî_to_œmebus
(
…imîno
, 
œmebus_so·c
 *
sc
)

45 
…imî_so·c
 *
…
;

46 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TIMER
,

47 
LOW_VERSION
, 
NULL
);

48 i‡(
¶Ÿ
 < 0) {

50  
NULL
;

53 
…
 = 
	`kmÆloc
((
…imî_so·c
));

54 i‡(
…
==
NULL
) {

56  
NULL
;

59 ()
…imîno
;

62 
…
->
…_bus
 = 
sc
;

63 
…
->
…_bu•os
 = 
¶Ÿ
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

67 
	`œmebus_©èch_öãºu±
(
sc
, 
¶Ÿ
, 
…
, 
…imî_úq
);

69  
…
;

70 
	}
}

	@dev/lamebus/ltrace.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<∂©f‹m/bus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LTRACE_REG_TRON
 0

	)

38 
	#LTRACE_REG_TROFF
 4

	)

39 
	#LTRACE_REG_DEBUG
 8

	)

40 
	#LTRACE_REG_DUMP
 12

	)

41 
	#LTRACE_REG_STOP
 16

	)

42 
	#LTRACE_REG_PROFEN
 20

	)

43 
	#LTRACE_REG_PROFCL
 24

	)

45 
…ø˚_so·c
 *
	gthe_åa˚
;

48 
	$…ø˚_⁄
(
uöt32_t
 
code
)

50 i‡(
the_åa˚
 !
NULL
) {

51 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

52 
LTRACE_REG_TRON
, 
code
);

54 
	}
}

57 
	$…ø˚_off
(
uöt32_t
 
code
)

59 i‡(
the_åa˚
 !
NULL
) {

60 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

61 
LTRACE_REG_TROFF
, 
code
);

63 
	}
}

66 
	$…ø˚_debug
(
uöt32_t
 
code
)

68 i‡(
the_åa˚
 !
NULL
) {

69 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

70 
LTRACE_REG_DEBUG
, 
code
);

72 
	}
}

75 
	$…ø˚_dump
(
uöt32_t
 
code
)

77 i‡(
the_åa˚
 !
NULL
) {

78 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

79 
LTRACE_REG_DUMP
, 
code
);

81 
	}
}

84 
	$…ø˚_°›
(
uöt32_t
 
code
)

86 i‡(
the_åa˚
 !
NULL
 &&Åhe_åa˚->
…_ˇn°›
) {

87 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

88 
LTRACE_REG_STOP
, 
code
);

90 
	}
}

93 
	$…ø˚_£çrof
(
uöt32_t
 
⁄off
)

95 i‡(
the_åa˚
 !
NULL
 &&Åhe_åa˚->
…_ˇ≈rof
) {

96 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

97 
LTRACE_REG_PROFEN
, 
⁄off
);

99 
	}
}

102 
	$…ø˚_îa£¥of
()

104 i‡(
the_åa˚
 !
NULL
 &&Åhe_åa˚->
…_ˇ≈rof
) {

105 
	`bus_wrôe_ªgi°î
(
the_åa˚
->
…_busd©a
,Åhe_åa˚->
…_bu•os
,

106 
LTRACE_REG_PROFCL
, 1);

108 
	}
}

111 
	$c⁄fig_…ø˚
(
…ø˚_so·c
 *
sc
, 
…ø˚no
)

113 ()
…ø˚no
;

114 
the_åa˚
 = 
sc
;

116 
	}
}

	@dev/lamebus/ltrace.h

30 #i‚de‡
_LAMEBUS_LTRACE_H_


31 
	#_LAMEBUS_LTRACE_H_


	)

33 
	s…ø˚_so·c
 {

35 *
	m…_busd©a
;

36 
uöt32_t
 
	m…_bu•os
;

37 
boﬁ
 
	m…_ˇn°›
;

38 
boﬁ
 
	m…_ˇ≈rof
;

82 
…ø˚_⁄
(
uöt32_t
 
code
);

83 
…ø˚_off
(
uöt32_t
 
code
);

84 
…ø˚_debug
(
uöt32_t
 
code
);

85 
…ø˚_dump
(
uöt32_t
 
code
);

86 
…ø˚_°›
(
uöt32_t
 
code
);

87 
…ø˚_£çrof
(
uöt32_t
 
⁄off
);

88 
…ø˚_îa£¥of
();

	@dev/lamebus/ltrace_att.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<œmebus/œmebus.h
>

33 
	~<œmebus/…ø˚.h
>

34 
	~"autoc⁄f.h
"

37 
	#LOW_VERSION
 1

	)

39 
	#STOP_VERSION
 2

	)

41 
	#PROF_VERSION
 3

	)

43 
…ø˚_so·c
 *

44 
	$©èch_…ø˚_to_œmebus
(
…ø˚no
, 
œmebus_so·c
 *
sc
)

46 
…ø˚_so·c
 *
…
;

47 
uöt32_t
 
dæ
;

48 
¶Ÿ
 = 
	`œmebus_¥obe
(
sc
, 
LB_VENDOR_CS161
, 
LBCS161_TRACE
,

49 
LOW_VERSION
, &
dæ
);

50 i‡(
¶Ÿ
 < 0) {

51  
NULL
;

54 
…
 = 
	`kmÆloc
((
…ø˚_so·c
));

55 i‡(
…
==
NULL
) {

56  
NULL
;

59 ()
…ø˚no
;

61 
…
->
…_busd©a
 = 
sc
;

62 
…
->
…_bu•os
 = 
¶Ÿ
;

63 
…
->
…_ˇn°›
 = 
dæ
 >
STOP_VERSION
;

64 
…
->
…_ˇ≈rof
 = 
dæ
 >
PROF_VERSION
;

66 
	`œmebus_m¨k
(
sc
, 
¶Ÿ
);

68  
…
;

69 
	}
}

	@dev/lamebus/random_lrandom.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<gíîic/øndom.h
>

38 
	~<œmebus/Ã™dom.h
>

39 
	~"autoc⁄f.h
"

41 
øndom_so·c
 *

42 
	$©èch_øndom_to_Ã™dom
(
øndomno
, 
Ã™dom_so·c
 *
ls
)

44 
øndom_so·c
 *
rs
 = 
	`kmÆloc
((random_softc));

45 i‡(
rs
==
NULL
) {

46  
NULL
;

49 ()
øndomno
;

51 
rs
->
rs_devd©a
 = 
ls
;

52 
rs
->
rs_øndom
 = 
Ã™dom_øndom
;

53 
rs
->
rs_øndmax
 = 
Ã™dom_øndmax
;

54 
rs
->
rs_ªad
 = 
Ã™dom_ªad
;

56  
rs
;

57 
	}
}

	@dev/lamebus/rtclock_ltimer.c

41 
	~<ty≥s.h
>

42 
	~<lib.h
>

43 
	~<gíîic/π˛ock.h
>

44 
	~<œmebus/…imî.h
>

45 
	~"autoc⁄f.h
"

47 
π˛ock_so·c
 *

48 
	$©èch_π˛ock_to_…imî
(
π˛ockno
, 
…imî_so·c
 *
ls
)

54 
π˛ock_so·c
 *
πc
 = 
	`kmÆloc
((rtclock_softc));

55 i‡(
πc
==
NULL
) {

57  
NULL
;

60 ()
π˛ockno
;

62 
πc
->
πc_devd©a
 = 
ls
;

63 
πc
->
πc_gëtime
 = 
…imî_gëtime
;

65  
πc
;

66 
	}
}

	@fs/semfs/semfs.h

30 #i‚de‡
SEMFS_H


31 
	#SEMFS_H


	)

33 
	~<¨øy.h
>

34 
	~<fs.h
>

35 
	~<vnode.h
>

37 #i‚de‡
SEMFS_INLINE


38 
	#SEMFS_INLINE
 
INLINE


	)

45 
	#SEMFS_ROOTDIR
 0xffffffffU

	)

54 
	s£mfs_£m
 {

55 
lock
 *
	m£ms_lock
;

56 
cv
 *
	m£ms_cv
;

57 
	m£ms_cou¡
;

58 
boﬁ
 
	m£ms_hasvnode
;

59 
boﬁ
 
	m£ms_löked
;

61 
DECLARRAY
(
£mfs_£m
, 
SEMFS_INLINE
);

66 
	s£mfs_dúíåy
 {

67 *
	m£md_«me
;

68 
	m£md_£mnum
;

70 
DECLARRAY
(
£mfs_dúíåy
, 
SEMFS_INLINE
);

79 
	s£mfs_vnode
 {

80 
vnode
 
	m£mv_absvn
;

81 
£mfs
 *
	m£mv_£mfs
;

82 
	m£mv_£mnum
;

89 
	s£mfs
 {

90 
fs
 
	m£mfs_absfs
;

92 
lock
 *
	m£mfs_èbÀlock
;

93 
vnodóºay
 *
	m£mfs_vnodes
;

94 
£mfs_£m¨øy
 *
	m£mfs_£ms
;

96 
lock
 *
	m£mfs_dúlock
;

97 
£mfs_dúíåy¨øy
 *
	m£mfs_díts
;

104 
DEFARRAY
(
£mfs_£m
, 
SEMFS_INLINE
);

105 
DEFARRAY
(
£mfs_dúíåy
, 
SEMFS_INLINE
);

113 
£mfs_£m
 *
£mfs_£m_¸óã
(c⁄° *
«me
);

114 
£mfs_£m_ö£π
(
£mfs
 *, 
£mfs_£m
 *, *);

115 
£mfs_£m_de°roy
(
£mfs_£m
 *);

116 
£mfs_dúíåy
 *
£mfs_dúíåy_¸óã
(c⁄° *
«me
, 
£mno
);

117 
£mfs_dúíåy_de°roy
(
£mfs_dúíåy
 *);

120 
£mfs_gëvnode
(
£mfs
 *, , 
vnode
 **
ªt
);

	@fs/semfs/semfs_fsops.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<synch.h
>

33 
	~<vfs.h
>

34 
	~<fs.h
>

35 
	~<vnode.h
>

37 
	~"£mfs.h
"

47 
	$£mfs_sync
(
fs
 *fs)

49 ()
fs
;

51 
	}
}

58 
	$£mfs_gëvﬁ«me
(
fs
 *fs)

60 ()
fs
;

62 
	}
}

69 
	$£mfs_gëroŸ
(
fs
 *fs, 
vnode
 **
ªt
)

71 
£mfs
 *£mf†
fs
->
fs_d©a
;

72 
vnode
 *
vn
;

73 
ªsu…
;

75 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
SEMFS_ROOTDIR
, &
vn
);

76 i‡(
ªsu…
) {

77 
	`k¥ötf
("semfs: couldn'tÜoadÑoot vnode: %s\n",

78 
	`°ªº‹
(
ªsu…
));

79  
ªsu…
;

81 *
ªt
 = 
vn
;

83 
	}
}

94 
	$£mfs_de°roy
(
£mfs
 *semfs)

96 
£mfs_£m
 *
£m
;

97 
£mfs_dúíåy
 *
dít
;

98 
i
, 
num
;

100 
num
 = 
	`£mfs_£m¨øy_num
(
£mfs
->
£mfs_£ms
);

101 
i
=0; i<
num
; i++) {

102 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
i
);

103 
	`£mfs_£m_de°roy
(
£m
);

105 
	`£mfs_£m¨øy_£tsize
(
£mfs
->
£mfs_£ms
, 0);

107 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

108 
i
=0; i<
num
; i++) {

109 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

110 
	`£mfs_dúíåy_de°roy
(
dít
);

112 
	`£mfs_dúíåy¨øy_£tsize
(
£mfs
->
£mfs_díts
, 0);

114 
	`£mfs_dúíåy¨øy_de°roy
(
£mfs
->
£mfs_díts
);

115 
	`lock_de°roy
(
£mfs
->
£mfs_dúlock
);

116 
	`£mfs_£m¨øy_de°roy
(
£mfs
->
£mfs_£ms
);

117 
	`vnodóºay_de°roy
(
£mfs
->
£mfs_vnodes
);

118 
	`lock_de°roy
(
£mfs
->
£mfs_èbÀlock
);

119 
	`k‰ì
(
£mfs
);

120 
	}
}

128 
	$£mfs_unmou¡
(
fs
 *fs)

130 
£mfs
 *£mf†
fs
->
fs_d©a
;

132 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

133 i‡(
	`vnodóºay_num
(
£mfs
->
£mfs_vnodes
) > 0) {

134 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

135  
EBUSY
;

138 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

139 
	`£mfs_de°roy
(
£mfs
);

142 
	}
}

147 c⁄° 
fs_›s
 
	g£mfs_fs›s
 = {

148 .
fs›_sync
 = 
£mfs_sync
,

149 .
	gfs›_gëvﬁ«me
 = 
£mfs_gëvﬁ«me
,

150 .
	gfs›_gëroŸ
 = 
£mfs_gëroŸ
,

151 .
	gfs›_unmou¡
 = 
£mfs_unmou¡
,

158 
£mfs
 *

159 
	$£mfs_¸óã
()

161 
£mfs
 *semfs;

163 
£mfs
 = 
	`kmÆloc
((*semfs));

164 i‡(
£mfs
 =
NULL
) {

165 
Áû_tŸÆ
;

168 
£mfs
->
£mfs_èbÀlock
 = 
	`lock_¸óã
("semfs_table");

169 i‡(
£mfs
->
£mfs_èbÀlock
 =
NULL
) {

170 
Áû_£mfs
;

172 
£mfs
->
£mfs_vnodes
 = 
	`vnodóºay_¸óã
();

173 i‡(
£mfs
->
£mfs_vnodes
 =
NULL
) {

174 
Áû_èbÀlock
;

176 
£mfs
->
£mfs_£ms
 = 
	`£mfs_£m¨øy_¸óã
();

177 i‡(
£mfs
->
£mfs_£ms
 =
NULL
) {

178 
Áû_vnodes
;

181 
£mfs
->
£mfs_dúlock
 = 
	`lock_¸óã
("semfs_dir");

182 i‡(
£mfs
->
£mfs_dúlock
 =
NULL
) {

183 
Áû_£ms
;

185 
£mfs
->
£mfs_díts
 = 
	`£mfs_dúíåy¨øy_¸óã
();

186 i‡(
£mfs
->
£mfs_díts
 =
NULL
) {

187 
Áû_dúlock
;

190 
£mfs
->
£mfs_absfs
.
fs_d©a
 = semfs;

191 
£mfs
->
£mfs_absfs
.
fs_›s
 = &
£mfs_fs›s
;

192  
£mfs
;

194 
Áû_dúlock
:

195 
	`lock_de°roy
(
£mfs
->
£mfs_dúlock
);

196 
Áû_£ms
:

197 
	`£mfs_£m¨øy_de°roy
(
£mfs
->
£mfs_£ms
);

198 
Áû_vnodes
:

199 
	`vnodóºay_de°roy
(
£mfs
->
£mfs_vnodes
);

200 
Áû_èbÀlock
:

201 
	`lock_de°roy
(
£mfs
->
£mfs_èbÀlock
);

202 
Áû_£mfs
:

203 
	`k‰ì
(
£mfs
);

204 
Áû_tŸÆ
:

205  
NULL
;

206 
	}
}

213 
	$£mfs_boŸ°øp
()

215 
£mfs
 *semfs;

216 
ªsu…
;

218 
£mfs
 = 
	`£mfs_¸óã
();

219 i‡(
£mfs
 =
NULL
) {

220 
	`∑nic
("Out of memory creating semfs\n");

222 
ªsu…
 = 
	`vfs_addfs
("£m", &
£mfs
->
£mfs_absfs
);

223 i‡(
ªsu…
) {

224 
	`∑nic
("Aâachög semfs: %s\n", 
	`°ªº‹
(
ªsu…
));

226 
	}
}

	@fs/semfs/semfs_obj.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<synch.h
>

34 
	#SEMFS_INLINE


	)

35 
	~"£mfs.h
"

43 
£mfs_£m
 *

44 
	$£mfs_£m_¸óã
(c⁄° *
«me
)

46 
£mfs_£m
 *
£m
;

47 
lock«me
[32];

48 
cv«me
[32];

50 
	`¢¥ötf
(
lock«me
, ÷ock«me), "£m:l.%s", 
«me
);

51 
	`¢¥ötf
(
cv«me
, (cv«me), "£m:%s", 
«me
);

53 
£m
 = 
	`kmÆloc
((*sem));

54 i‡(
£m
 =
NULL
) {

55 
Áû_ªtu∫
;

57 
£m
->
£ms_lock
 = 
	`lock_¸óã
(
lock«me
);

58 i‡(
£m
->
£ms_lock
 =
NULL
) {

59 
Áû_£m
;

61 
£m
->
£ms_cv
 = 
	`cv_¸óã
(
cv«me
);

62 i‡(
£m
->
£ms_cv
 =
NULL
) {

63 
Áû_lock
;

65 
£m
->
£ms_cou¡
 = 0;

66 
£m
->
£ms_hasvnode
 = 
Ál£
;

67 
£m
->
£ms_löked
 = 
Ál£
;

68  
£m
;

70 
Áû_lock
:

71 
	`lock_de°roy
(
£m
->
£ms_lock
);

72 
Áû_£m
:

73 
	`k‰ì
(
£m
);

74 
Áû_ªtu∫
:

75  
NULL
;

76 
	}
}

82 
	$£mfs_£m_de°roy
(
£mfs_£m
 *
£m
)

84 
	`cv_de°roy
(
£m
->
£ms_cv
);

85 
	`lock_de°roy
(
£m
->
£ms_lock
);

86 
	`k‰ì
(
£m
);

87 
	}
}

93 
	$£mfs_£m_ö£π
(
£mfs
 *£mfs, 
£mfs_£m
 *
£m
, *
ªt
)

95 
i
, 
num
;

97 
	`KASSERT
(
	`lock_do_i_hﬁd
(
£mfs
->
£mfs_èbÀlock
));

98 
num
 = 
	`£mfs_£m¨øy_num
(
£mfs
->
£mfs_£ms
);

99 i‡(
num
 =
SEMFS_ROOTDIR
) {

101  
ENOSPC
;

103 
i
=0; i<
num
; i++) {

104 i‡(
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
i
Ë=
NULL
) {

105 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
, 
i
, 
£m
);

106 *
ªt
 = 
i
;

110  
	`£mfs_£m¨øy_add
(
£mfs
->
£mfs_£ms
, 
£m
, 
ªt
);

111 
	}
}

119 
£mfs_dúíåy
 *

120 
	$£mfs_dúíåy_¸óã
(c⁄° *
«me
, 
£mnum
)

122 
£mfs_dúíåy
 *
dít
;

124 
dít
 = 
	`kmÆloc
((*dent));

125 i‡(
dít
 =
NULL
) {

126  
NULL
;

128 
dít
->
£md_«me
 = 
	`k°rdup
(
«me
);

129 i‡(
dít
->
£md_«me
 =
NULL
) {

130 
	`k‰ì
(
dít
);

131  
NULL
;

133 
dít
->
£md_£mnum
 = 
£mnum
;

134  
dít
;

135 
	}
}

141 
	$£mfs_dúíåy_de°roy
(
£mfs_dúíåy
 *
dít
)

143 
	`k‰ì
(
dít
->
£md_«me
);

144 
	`k‰ì
(
dít
);

145 
	}
}

	@fs/semfs/semfs_vnops.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/f˙é.h
>

33 
	~<°©.h
>

34 
	~<uio.h
>

35 
	~<synch.h
>

36 
	~<thªad.h
>

37 
	~<¥oc.h
>

38 
	~<cuºít.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

42 
	~"£mfs.h
"

49 
	$£mfs_óch›í
(
vnode
 *
vn
, 
›íÊags
)

51 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

53 i‡(
£mv
->
£mv_£mnum
 =
SEMFS_ROOTDIR
) {

54 i‡((
›íÊags
 & 
O_ACCMODE
Ë!
O_RDONLY
) {

55  
EISDIR
;

57 i‡(
›íÊags
 & 
O_APPEND
) {

58  
EISDIR
;

63 
	}
}

67 
	$£mfs_io˘l
(
vnode
 *
vn
, 
›
, 
u£Ωå_t
 
d©a
)

69 ()
vn
;

70 ()
›
;

71 ()
d©a
;

72  
EINVAL
;

73 
	}
}

77 
	$£mfs_gëty≥
(
vnode
 *
vn
, 
mode_t
 *
ªt
)

79 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

81 *
ªt
 = 
£mv
->
£mv_£mnum
 =
SEMFS_ROOTDIR
 ? 
S_IFDIR
 : 
S_IFREG
;

83 
	}
}

86 
boﬁ


87 
	$£mfs_is£ekabÀ
(
vnode
 *
vn
)

89 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

91 i‡(
£mv
->
£mv_£mnum
 !
SEMFS_ROOTDIR
) {

93  
Ál£
;

95  
åue
;

96 
	}
}

100 
	$£mfs_fsync
(
vnode
 *
vn
)

102 ()
vn
;

104 
	}
}

114 
£mfs_£m
 *

115 
	$£mfs_gë£mbynum
(
£mfs
 *£mfs, 
£mnum
)

117 
£mfs_£m
 *
£m
;

119 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

120 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
£mnum
);

121 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

123  
£m
;

124 
	}
}

127 
£mfs_£m
 *

128 
	$£mfs_gë£m
(
£mfs_vnode
 *
£mv
)

130 
£mfs
 *£mf†
£mv
->
£mv_£mfs
;

132  
	`£mfs_gë£mbynum
(
£mfs
, 
£mv
->
£mv_£mnum
);

133 
	}
}

143 
	$£mfs_wakeup
(
£mfs_£m
 *
£m
, 
√wcou¡
)

145 i‡(
£m
->
£ms_cou¡
 > 0 || 
√wcou¡
 == 0) {

148 i‡(
√wcou¡
 == 1) {

149 
	`cv_sig«l
(
£m
->
£ms_cv
, sem->
£ms_lock
);

152 
	`cv_brﬂdˇ°
(
£m
->
£ms_cv
, sem->
£ms_lock
);

154 
	}
}

161 
	$£mfs_£m°©
(
vnode
 *
vn
, 
°©
 *
buf
)

163 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

164 
£mfs_£m
 *
£m
;

166 
£m
 = 
	`£mfs_gë£m
(
£mv
);

168 
	`bzîo
(
buf
, (*buf));

170 
	`lock_acquúe
(
£m
->
£ms_lock
);

171 
buf
->
°_size
 = 
£m
->
£ms_cou¡
;

172 
buf
->
°_∆ök
 = 
£m
->
£ms_löked
 ? 1 : 0;

173 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

175 
buf
->
°_mode
 = 
S_IFREG
 | 0666;

176 
buf
->
°_blocks
 = 0;

177 
buf
->
°_dev
 = 0;

178 
buf
->
°_öo
 = 
£mv
->
£mv_£mnum
;

181 
	}
}

189 
	$£mfs_ªad
(
vnode
 *
vn
, 
uio
 *uio)

191 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

192 
£mfs_£m
 *
£m
;

193 
size_t
 
c⁄sume
;

195 
£m
 = 
	`£mfs_gë£m
(
£mv
);

197 
	`lock_acquúe
(
£m
->
£ms_lock
);

198 
uio
->
uio_ªsid
 > 0) {

199 i‡(
£m
->
£ms_cou¡
 > 0) {

200 
c⁄sume
 = 
uio
->
uio_ªsid
;

201 i‡(
c⁄sume
 > 
£m
->
£ms_cou¡
) {

202 
c⁄sume
 = 
£m
->
£ms_cou¡
;

204 
	`DEBUG
(
DB_SEMFS
, "semfs: sem%u: P, count %u -> %u\n",

205 
£mv
->
£mv_£mnum
, 
£m
->
£ms_cou¡
,

206 
£m
->
£ms_cou¡
 - 
c⁄sume
);

207 
£m
->
£ms_cou¡
 -
c⁄sume
;

209 
uio
->
uio_off£t
 +
c⁄sume
;

210 
uio
->
uio_ªsid
 -
c⁄sume
;

212 i‡(
uio
->
uio_ªsid
 == 0) {

215 i‡(
£m
->
£ms_cou¡
 == 0) {

216 
	`DEBUG
(
DB_SEMFS
, "semfs: sem%u: blocking\n",

217 
£mv
->
£mv_£mnum
);

218 
	`cv_waô
(
£m
->
£ms_cv
, sem->
£ms_lock
);

221 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

223 
	}
}

231 
	$£mfs_wrôe
(
vnode
 *
vn
, 
uio
 *uio)

233 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

234 
£mfs_£m
 *
£m
;

235 
√wcou¡
;

237 
£m
 = 
	`£mfs_gë£m
(
£mv
);

239 
	`lock_acquúe
(
£m
->
£ms_lock
);

240 
uio
->
uio_ªsid
 > 0) {

241 
√wcou¡
 = 
£m
->
£ms_cou¡
 + 
uio
->
uio_ªsid
;

242 i‡(
√wcou¡
 < 
£m
->
£ms_cou¡
) {

244 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

245  
EFBIG
;

247 
	`DEBUG
(
DB_SEMFS
, "semfs: sem%u: V, count %u -> %u\n",

248 
£mv
->
£mv_£mnum
, 
£m
->
£ms_cou¡
, 
√wcou¡
);

249 
	`£mfs_wakeup
(
£m
, 
√wcou¡
);

250 
£m
->
£ms_cou¡
 = 
√wcou¡
;

251 
uio
->
uio_off£t
 +uio->
uio_ªsid
;

252 
uio
->
uio_ªsid
 = 0;

254 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

256 
	}
}

267 
	$£mfs_åunˇã
(
vnode
 *
vn
, 
off_t
 
Àn
)

270 c⁄° 
max
 = ()-1;

272 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

273 
£mfs_£m
 *
£m
;

274 
√wcou¡
;

276 i‡(
Àn
 < 0) {

277  
EINVAL
;

279 i‡(
Àn
 > (
off_t
)
max
) {

280  
EFBIG
;

282 
√wcou¡
 = 
Àn
;

284 
£m
 = 
	`£mfs_gë£m
(
£mv
);

286 
	`lock_acquúe
(
£m
->
£ms_lock
);

287 
	`£mfs_wakeup
(
£m
, 
√wcou¡
);

288 
£m
->
£ms_cou¡
 = 
√wcou¡
;

289 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

292 
	}
}

303 
	$£mfs_gëdúíåy
(
vnode
 *
dúvn
, 
uio
 *uio)

305 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

306 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

307 
£mfs_dúíåy
 *
dít
;

308 
num
, 
pos
;

309 
ªsu…
;

311 
	`KASSERT
(
uio
->
uio_off£t
 >= 0);

312 
pos
 = 
uio
->
uio_off£t
;

314 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

316 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

317 i‡(
pos
 >
num
) {

319 
ªsu…
 = 0;

322 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
pos
);

323 
ªsu…
 = 
	`uiomove
(
dít
->
£md_«me
, 
	`°æí
(dent->semd_name),

324 
uio
);

327 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

328  
ªsu…
;

329 
	}
}

336 
	$£mfs_dú°©
(
vnode
 *
vn
, 
°©
 *
buf
)

338 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

339 
£mfs
 *£mf†
£mv
->
£mv_£mfs
;

341 
	`bzîo
(
buf
, (*buf));

343 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

344 
buf
->
°_size
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

345 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

347 
buf
->
°_mode
 = 
S_IFDIR
 | 1777;

348 
buf
->
°_∆ök
 = 2;

349 
buf
->
°_blocks
 = 0;

350 
buf
->
°_dev
 = 0;

351 
buf
->
°_öo
 = 
SEMFS_ROOTDIR
;

354 
	}
}

362 
	$£mfs_«mefûe
(
vnode
 *
vn
, 
uio
 *uio)

364 ()
vn
;

365 ()
uio
;

367 
	}
}

374 
	$£mfs_¸ót
(
vnode
 *
dúvn
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

375 
vnode
 **
ªsu…vn
)

377 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

378 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

379 
£mfs_dúíåy
 *
dít
;

380 
£mfs_£m
 *
£m
;

381 
i
, 
num
, 
em±y
, 
£mnum
;

382 
ªsu…
;

384 ()
mode
;

385 i‡(!
	`°rcmp
(
«me
, ".") || !strcmp(name, "..")) {

386  
EEXIST
;

389 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

390 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

391 
em±y
 = 
num
;

392 
i
=0; i<
num
; i++) {

393 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

394 i‡(
dít
 =
NULL
) {

395 i‡(
em±y
 =
num
) {

396 
em±y
 = 
i
;

400 i‡(!
	`°rcmp
(
dít
->
£md_«me
, 
«me
)) {

402 i‡(
ex˛
) {

403 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

404  
EEXIST
;

406 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
dít
->
£md_£mnum
,

407 
ªsu…vn
);

408 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

409  
ªsu…
;

414 
£m
 = 
	`£mfs_£m_¸óã
(
«me
);

415 i‡(
£m
 =
NULL
) {

416 
ªsu…
 = 
ENOMEM
;

417 
Áû_u∆ock
;

419 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

420 
ªsu…
 = 
	`£mfs_£m_ö£π
(
£mfs
, 
£m
, &
£mnum
);

421 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

422 i‡(
ªsu…
) {

423 
Áû_un¸óã
;

426 
dít
 = 
	`£mfs_dúíåy_¸óã
(
«me
, 
£mnum
);

427 i‡(
dít
 =
NULL
) {

428 
Áû_unö£π
;

431 i‡(
em±y
 < 
num
) {

432 
	`£mfs_dúíåy¨øy_£t
(
£mfs
->
£mfs_díts
, 
em±y
, 
dít
);

435 
ªsu…
 = 
	`£mfs_dúíåy¨øy_add
(
£mfs
->
£mfs_díts
, 
dít
,

436 &
em±y
);

437 i‡(
ªsu…
) {

438 
Áû_undít
;

442 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
£mnum
, 
ªsu…vn
);

443 i‡(
ªsu…
) {

444 
Áû_undú
;

447 
£m
->
£ms_löked
 = 
åue
;

448 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

451 
Áû_undú
:

452 
	`£mfs_dúíåy¨øy_£t
(
£mfs
->
£mfs_díts
, 
em±y
, 
NULL
);

453 
Áû_undít
:

454 
	`£mfs_dúíåy_de°roy
(
dít
);

455 
Áû_unö£π
:

456 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

457 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
, 
£mnum
, 
NULL
);

458 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

459 
Áû_un¸óã
:

460 
	`£mfs_£m_de°roy
(
£m
);

461 
Áû_u∆ock
:

462 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

463  
ªsu…
;

464 
	}
}

472 
	$£mfs_ªmove
(
vnode
 *
dúvn
, c⁄° *
«me
)

474 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

475 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

476 
£mfs_dúíåy
 *
dít
;

477 
£mfs_£m
 *
£m
;

478 
i
, 
num
;

479 
ªsu…
;

481 i‡(!
	`°rcmp
(
«me
, ".") || !strcmp(name, "..")) {

482  
EINVAL
;

485 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

486 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

487 
i
=0; i<
num
; i++) {

488 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

489 i‡(
dít
 =
NULL
) {

492 i‡(!
	`°rcmp
(
«me
, 
dít
->
£md_«me
)) {

494 
£m
 = 
	`£mfs_gë£mbynum
(
£mfs
, 
dít
->
£md_£mnum
);

495 
	`lock_acquúe
(
£m
->
£ms_lock
);

496 
	`KASSERT
(
£m
->
£ms_löked
);

497 
£m
->
£ms_löked
 = 
Ál£
;

498 i‡(
£m
->
£ms_hasvnode
 =
Ál£
) {

499 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

500 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
,

501 
dít
->
£md_£mnum
, 
NULL
);

502 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

503 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

504 
	`£mfs_£m_de°roy
(
£m
);

507 
	`lock_ªÀa£
(
£m
->
£ms_lock
);

509 
	`£mfs_dúíåy¨øy_£t
(
£mfs
->
£mfs_díts
, 
i
, 
NULL
);

510 
	`£mfs_dúíåy_de°roy
(
dít
);

511 
ªsu…
 = 0;

512 
out
;

515 
ªsu…
 = 
ENOENT
;

516 
out
:

517 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

518  
ªsu…
;

519 
	}
}

526 
	$£mfs_lookup
(
vnode
 *
dúvn
, *
∑th
, vnodê**
ªsu…vn
)

528 
£mfs_vnode
 *
dú£mv
 = 
dúvn
->
vn_d©a
;

529 
£mfs
 *£mf†
dú£mv
->
£mv_£mfs
;

530 
£mfs_dúíåy
 *
dít
;

531 
i
, 
num
;

532 
ªsu…
;

534 i‡(!
	`°rcmp
(
∑th
, ".") || !strcmp(path, "..")) {

535 
	`VOP_INCREF
(
dúvn
);

536 *
ªsu…vn
 = 
dúvn
;

540 
	`lock_acquúe
(
£mfs
->
£mfs_dúlock
);

541 
num
 = 
	`£mfs_dúíåy¨øy_num
(
£mfs
->
£mfs_díts
);

542 
i
=0; i<
num
; i++) {

543 
dít
 = 
	`£mfs_dúíåy¨øy_gë
(
£mfs
->
£mfs_díts
, 
i
);

544 i‡(
dít
 =
NULL
) {

547 i‡(!
	`°rcmp
(
∑th
, 
dít
->
£md_«me
)) {

548 
ªsu…
 = 
	`£mfs_gëvnode
(
£mfs
, 
dít
->
£md_£mnum
,

549 
ªsu…vn
);

550 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

551  
ªsu…
;

554 
	`lock_ªÀa£
(
£mfs
->
£mfs_dúlock
);

555  
ENOENT
;

556 
	}
}

564 
	$£mfs_look∑ª¡
(
vnode
 *
dúvn
, *
∑th
,

565 
vnode
 **
ªsu…dúvn
, *
«mebuf
, 
size_t
 
bufmax
)

567 i‡(
	`°æí
(
∑th
)+1 > 
bufmax
) {

568  
ENAMETOOLONG
;

570 
	`°r˝y
(
«mebuf
, 
∑th
);

572 
	`VOP_INCREF
(
dúvn
);

573 *
ªsu…dúvn
 = 
dúvn
;

575 
	}
}

585 
	$£mfs_vnode_de°roy
(
£mfs_vnode
 *
£mv
)

587 
	`vnode_˛ónup
(&
£mv
->
£mv_absvn
);

588 
	`k‰ì
(
£mv
);

589 
	}
}

596 
	$£mfs_ª˛aim
(
vnode
 *
vn
)

598 
£mfs_vnode
 *
£mv
 = 
vn
->
vn_d©a
;

599 
£mfs
 *£mf†
£mv
->
£mv_£mfs
;

600 
vnode
 *
vn2
;

601 
£mfs_£m
 *
£m
;

602 
i
, 
num
;

604 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

607 
	`•ölock_acquúe
(&
vn
->
vn_cou¡lock
);

608 i‡(
vn
->
vn_ªfcou¡
 > 1) {

610 
vn
->
vn_ªfcou¡
--;

612 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

613 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

614  
EBUSY
;

617 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

620 
num
 = 
	`vnodóºay_num
(
£mfs
->
£mfs_vnodes
);

621 
i
=0; i<
num
; i++) {

622 
vn2
 = 
	`vnodóºay_gë
(
£mfs
->
£mfs_vnodes
, 
i
);

623 i‡(
vn2
 =
vn
) {

624 
	`vnodóºay_ªmove
(
£mfs
->
£mfs_vnodes
, 
i
);

629 i‡(
£mv
->
£mv_£mnum
 !
SEMFS_ROOTDIR
) {

630 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
£mv
->
£mv_£mnum
);

631 
	`KASSERT
(
£m
->
£ms_hasvnode
);

632 
£m
->
£ms_hasvnode
 = 
Ál£
;

633 i‡(
£m
->
£ms_löked
 =
Ál£
) {

634 
	`£mfs_£m¨øy_£t
(
£mfs
->
£mfs_£ms
,

635 
£mv
->
£mv_£mnum
, 
NULL
);

636 
	`£mfs_£m_de°roy
(
£m
);

641 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

644 
	`£mfs_vnode_de°roy
(
£mv
);

646 
	}
}

651 c⁄° 
vnode_›s
 
	g£mfs_dú›s
 = {

652 .
v›_magic
 = 
VOP_MAGIC
,

654 .
	gv›_óch›í
 = 
£mfs_óch›í
,

655 .
	gv›_ª˛aim
 = 
£mfs_ª˛aim
,

657 .
	gv›_ªad
 = 
v›Áû_uio_isdú
,

658 .
	gv›_ªadlök
 = 
v›Áû_uio_isdú
,

659 .
	gv›_gëdúíåy
 = 
£mfs_gëdúíåy
,

660 .
	gv›_wrôe
 = 
v›Áû_uio_isdú
,

661 .
	gv›_io˘l
 = 
£mfs_io˘l
,

662 .
	gv›_°©
 = 
£mfs_dú°©
,

663 .
	gv›_gëty≥
 = 
£mfs_gëty≥
,

664 .
	gv›_is£ekabÀ
 = 
£mfs_is£ekabÀ
,

665 .
	gv›_fsync
 = 
£mfs_fsync
,

666 .
	gv›_mm≠
 = 
v›Áû_mm≠_isdú
,

667 .
	gv›_åunˇã
 = 
v›Áû_åunˇã_isdú
,

668 .
	gv›_«mefûe
 = 
£mfs_«mefûe
,

670 .
	gv›_¸ót
 = 
£mfs_¸ót
,

671 .
	gv›_symlök
 = 
v›Áû_symlök_nosys
,

672 .
	gv›_mkdú
 = 
v›Áû_mkdú_nosys
,

673 .
	gv›_lök
 = 
v›Áû_lök_nosys
,

674 .
	gv›_ªmove
 = 
£mfs_ªmove
,

675 .
	gv›_rmdú
 = 
v›Áû_°rög_nosys
,

676 .
	gv›_ª«me
 = 
v›Áû_ª«me_nosys
,

677 .
	gv›_lookup
 = 
£mfs_lookup
,

678 .
	gv›_look∑ª¡
 = 
£mfs_look∑ª¡
,

684 c⁄° 
vnode_›s
 
	g£mfs_£m›s
 = {

685 .
v›_magic
 = 
VOP_MAGIC
,

687 .
	gv›_óch›í
 = 
£mfs_óch›í
,

688 .
	gv›_ª˛aim
 = 
£mfs_ª˛aim
,

690 .
	gv›_ªad
 = 
£mfs_ªad
,

691 .
	gv›_ªadlök
 = 
v›Áû_uio_övÆ
,

692 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nŸdú
,

693 .
	gv›_wrôe
 = 
£mfs_wrôe
,

694 .
	gv›_io˘l
 = 
£mfs_io˘l
,

695 .
	gv›_°©
 = 
£mfs_£m°©
,

696 .
	gv›_gëty≥
 = 
£mfs_gëty≥
,

697 .
	gv›_is£ekabÀ
 = 
£mfs_is£ekabÀ
,

698 .
	gv›_fsync
 = 
£mfs_fsync
,

699 .
	gv›_mm≠
 = 
v›Áû_mm≠_≥rm
,

700 .
	gv›_åunˇã
 = 
£mfs_åunˇã
,

701 .
	gv›_«mefûe
 = 
v›Áû_uio_nŸdú
,

703 .
	gv›_¸ót
 = 
v›Áû_¸ót_nŸdú
,

704 .
	gv›_symlök
 = 
v›Áû_symlök_nŸdú
,

705 .
	gv›_mkdú
 = 
v›Áû_mkdú_nŸdú
,

706 .
	gv›_lök
 = 
v›Áû_lök_nŸdú
,

707 .
	gv›_ªmove
 = 
v›Áû_°rög_nŸdú
,

708 .
	gv›_rmdú
 = 
v›Áû_°rög_nŸdú
,

709 .
	gv›_ª«me
 = 
v›Áû_ª«me_nŸdú
,

710 .
	gv›_lookup
 = 
v›Áû_lookup_nŸdú
,

711 .
	gv›_look∑ª¡
 = 
v›Áû_look∑ª¡_nŸdú
,

718 
£mfs_vnode
 *

719 
	$£mfs_vnode_¸óã
(
£mfs
 *£mfs, 
£mnum
)

721 c⁄° 
vnode_›s
 *
›èbÀ
;

722 
£mfs_vnode
 *
£mv
;

723 
ªsu…
;

725 i‡(
£mnum
 =
SEMFS_ROOTDIR
) {

726 
›èbÀ
 = &
£mfs_dú›s
;

729 
›èbÀ
 = &
£mfs_£m›s
;

732 
£mv
 = 
	`kmÆloc
((*semv));

733 i‡(
£mv
 =
NULL
) {

734  
NULL
;

737 
£mv
->
£mv_£mfs
 = 
£mfs
;

738 
£mv
->
£mv_£mnum
 = 
£mnum
;

740 
ªsu…
 = 
	`vnode_öô
(&
£mv
->
£mv_absvn
, 
›èbÀ
,

741 &
£mfs
->
£mfs_absfs
, 
£mv
);

743 
	`KASSERT
(
ªsu…
 == 0);

745  
£mv
;

746 
	}
}

753 
	$£mfs_gëvnode
(
£mfs
 *£mfs, 
£mnum
, 
vnode
 **
ªt
)

755 
vnode
 *
vn
;

756 
£mfs_vnode
 *
£mv
;

757 
£mfs_£m
 *
£m
;

758 
i
, 
num
;

759 
ªsu…
;

762 
	`lock_acquúe
(
£mfs
->
£mfs_èbÀlock
);

765 
num
 = 
	`vnodóºay_num
(
£mfs
->
£mfs_vnodes
);

766 
i
=0; i<
num
; i++) {

767 
vn
 = 
	`vnodóºay_gë
(
£mfs
->
£mfs_vnodes
, 
i
);

768 
£mv
 = 
vn
->
vn_d©a
;

769 i‡(
£mv
->
£mv_£mnum
 =
£mnum
) {

770 
	`VOP_INCREF
(
vn
);

771 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

772 *
ªt
 = 
vn
;

778 
£mv
 = 
	`£mfs_vnode_¸óã
(
£mfs
, 
£mnum
);

779 i‡(
£mv
 =
NULL
) {

780 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

781  
ENOMEM
;

783 
ªsu…
 = 
	`vnodóºay_add
(
£mfs
->
£mfs_vnodes
, &
£mv
->
£mv_absvn
, 
NULL
);

784 i‡(
ªsu…
) {

785 
	`£mfs_vnode_de°roy
(
£mv
);

786 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

787  
ENOMEM
;

789 i‡(
£mnum
 !
SEMFS_ROOTDIR
) {

790 
£m
 = 
	`£mfs_£m¨øy_gë
(
£mfs
->
£mfs_£ms
, 
£mnum
);

791 
	`KASSERT
(
£m
 !
NULL
);

792 
	`KASSERT
(
£m
->
£ms_hasvnode
 =
Ál£
);

793 
£m
->
£ms_hasvnode
 = 
åue
;

795 
	`lock_ªÀa£
(
£mfs
->
£mfs_èbÀlock
);

797 *
ªt
 = &
£mv
->
£mv_absvn
;

799 
	}
}

	@fs/sfs/sfs_balloc.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

38 
	~<synch.h
>

39 
	~<buf.h
>

40 
	~<sfs.h
>

41 
	~"sf•riv©e.h
"

50 
	$sfs_˛órblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
block
, 
buf
 **
bu‰ë
)

52 
buf
 *buf;

53 *
±r
;

54 
ªsu…
;

56 
ªsu…
 = 
	`buf„r_gë
(&
sfs
->
sfs_absfs
, 
block
, 
SFS_BLOCKSIZE
, &
buf
);

57 i‡(
ªsu…
) {

58  
ªsu…
;

61 
±r
 = 
	`buf„r_m≠
(
buf
);

62 
	`bzîo
(
±r
, 
SFS_BLOCKSIZE
);

63 
	`buf„r_m¨k_vÆid
(
buf
);

64 
	`buf„r_m¨k_dúty
(
buf
);

66 i‡(
bu‰ë
 !
NULL
) {

67 *
bu‰ë
 = 
buf
;

70 
	`buf„r_ªÀa£
(
buf
);

74 
	}
}

86 
	$sfs_bÆloc
(
sfs_fs
 *
sfs
, 
daddr_t
 *
diskblock
, 
buf
 **
bu‰ë
)

88 
ªsu…
;

90 
	`lock_acquúe
(
sfs
->
sfs_‰ìm≠lock
);

92 
ªsu…
 = 
	`bôm≠_Æloc
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

93 i‡(
ªsu…
) {

94 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

95  
ªsu…
;

97 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

99 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

101 i‡(*
diskblock
 >
sfs
->
sfs_sb
.
sb_nblocks
) {

102 
	`∑nic
("sfs: %s: balloc: invalid block %u\n",

103 
sfs
->
sfs_sb
.
sb_vﬁ«me
, *
diskblock
);

107 
ªsu…
 = 
	`sfs_˛órblock
(
sfs
, *
diskblock
, 
bu‰ë
);

108 i‡(
ªsu…
) {

109 
	`lock_acquúe
(
sfs
->
sfs_‰ìm≠lock
);

110 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, *
diskblock
);

111 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

113  
ªsu…
;

114 
	}
}

120 
	$sfs_b‰ì_¥ñocked
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
)

122 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sfs
->
sfs_‰ìm≠lock
));

124 
	`bôm≠_unm¨k
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

125 
sfs
->
sfs_‰ìm≠dúty
 = 
åue
;

126 
	}
}

137 
	$sfs_b‰ì
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
)

139 
	`lock_acquúe
(
sfs
->
sfs_‰ìm≠lock
);

140 
	`sfs_b‰ì_¥ñocked
(
sfs
, 
diskblock
);

141 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

142 
	}
}

148 
	$sfs_bu£d
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
)

150 
ªsu…
;

152 i‡(
diskblock
 >
sfs
->
sfs_sb
.
sb_nblocks
) {

153 
	`∑nic
("sfs: %s: sfs_bused called on out ofÑange block %u\n",

154 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
diskblock
);

157 
	`lock_acquúe
(
sfs
->
sfs_‰ìm≠lock
);

158 
ªsu…
 = 
	`bôm≠_is£t
(
sfs
->
sfs_‰ìm≠
, 
diskblock
);

159 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

161  
ªsu…
;

162 
	}
}

168 
	$sfs_lock_‰ìm≠
(
sfs_fs
 *
sfs
)

170 
	`lock_acquúe
(
sfs
->
sfs_‰ìm≠lock
);

171 
	}
}

174 
	$sfs_u∆ock_‰ìm≠
(
sfs_fs
 *
sfs
)

176 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

177 
	}
}

	@fs/sfs/sfs_bmap.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<vfs.h
>

40 
	~<buf.h
>

41 
	~<sfs.h
>

42 
	~"sf•riv©e.h
"

133 
	ssfs_subåìªf
 {

134 
	m°r_ödúÀvñ
;

135 
	m°r_ödúnum
;

141 
	ssfs_blockobj
 {

142 
boﬁ
 
	mbo_isöode
;

145 
sfs_vnode
 *
	mi_sv
;

146 
sfs_subåìªf
 
	mi_subåì
;

147 } 
	mbo_öode
;

149 
buf
 *
	mid_buf
;

150 } 
	mbo_idblock
;

161 c⁄° 
uöt32_t
 
	gsfs_maxblock
 =

162 
SFS_NDIRECT
 +

163 
SFS_NINDIRECT
 * 
SFS_DBPERIDB
 +

164 
SFS_NDINDIRECT
 * 
SFS_DBPERIDB
 * SFS_DBPERIDB +

165 
SFS_NTINDIRECT
 * 
SFS_DBPERIDB
 * SFS_DBPERIDB * SFS_DBPERIDB

194 
	$sfs_gë_ödúe˘i⁄
(
uöt32_t
 
fûeblock
, 
sfs_subåìªf
 *
subåì_ªt
,

195 
uöt32_t
 *
off£t_ªt
)

198 
num
;

199 
uöt32_t
 
block£ach
;

200 } 
öfo
[4] = {

201 { 
SFS_NDIRECT
, 1 },

202 { 
SFS_NINDIRECT
, 
SFS_DBPERIDB
 },

203 { 
SFS_NDINDIRECT
, 
SFS_DBPERIDB
 * SFS_DBPERIDB },

204 { 
SFS_NTINDIRECT
, 
SFS_DBPERIDB
 * SFS_DBPERIDB * SFS_DBPERIDB },

207 
ödú
;

208 
uöt32_t
 
max
;

210 
ödú
 = 0; indir < 4; indir++) {

211 
max
 = 
öfo
[
ödú
].
num
 * info[ödú].
block£ach
;

212 i‡(
fûeblock
 < 
max
) {

213 
subåì_ªt
->
°r_ödúÀvñ
 = 
ödú
;

214 
subåì_ªt
->
°r_ödúnum
 =

215 
fûeblock
 / 
öfo
[
ödú
].
block£ach
;

216 *
off£t_ªt
 = 
fûeblock
 % 
öfo
[
ödú
].
block£ach
;

219 
fûeblock
 -
max
;

221  
EFBIG
;

222 
	}
}

233 
	$sfs_blockobj_öô_öode
(
sfs_blockobj
 *
bo
,

234 
sfs_vnode
 *
sv
, 
sfs_subåìªf
 *
subåì
)

236 
bo
->
bo_isöode
 = 
åue
;

237 
bo
->
bo_öode
.
i_sv
 = 
sv
;

238 
bo
->
bo_öode
.
i_subåì
 = *
subåì
;

239 
	}
}

246 
	$sfs_blockobj_öô_idblock
(
sfs_blockobj
 *
bo
,

247 
buf
 *
idbuf
)

249 
bo
->
bo_isöode
 = 
Ál£
;

250 
bo
->
bo_idblock
.
id_buf
 = 
idbuf
;

251 
	}
}

259 
	$sfs_blockobj_˛ónup
(
sfs_blockobj
 *
bo
)

261 ()
bo
;

262 
	}
}

269 
uöt32_t


270 
	$sfs_blockobj_gë
(
sfs_blockobj
 *
bo
, 
uöt32_t
 
off£t
)

272 i‡(
bo
->
bo_isöode
) {

273 
sfs_vnode
 *
sv
 = 
bo
->
bo_öode
.
i_sv
;

274 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

275 
sfs_döode
 *
döo
;

276 
ödúÀvñ
, 
ödúnum
;

278 
	`KASSERT
(
off£t
 == 0);

280 
döo
 = 
	`sfs_döode_m≠
(
bo
->
bo_öode
.
i_sv
);

281 
ödúÀvñ
 = 
bo
->
bo_öode
.
i_subåì
.
°r_ödúÀvñ
;

282 
ödúnum
 = 
bo
->
bo_öode
.
i_subåì
.
°r_ödúnum
;

284 
ödúÀvñ
) {

286 
	`KASSERT
(
ödúnum
 < 
SFS_NDIRECT
);

287  
döo
->
sfi_dúe˘
[
ödúnum
];

289 
	`KASSERT
(
ödúnum
 == 0);

290  
döo
->
sfi_ödúe˘
;

292 
	`KASSERT
(
ödúnum
 == 0);

293  
döo
->
sfi_dödúe˘
;

295 
	`KASSERT
(
ödúnum
 == 0);

296  
döo
->
sfi_tödúe˘
;

298 
	`∑nic
("sfs: %s: sfs_blockobj_get: "

300 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

301 
ödúÀvñ
);

306 
uöt32_t
 *
id±r
;

308 
	`COMPILE_ASSERT
(
SFS_DBPERIDB
*(
id±r
[0]Ë=
SFS_BLOCKSIZE
);

309 
	`KASSERT
(
off£t
 < 
SFS_DBPERIDB
);

311 
id±r
 = 
	`buf„r_m≠
(
bo
->
bo_idblock
.
id_buf
);

312  
id±r
[
off£t
];

314 
	}
}

322 
	$sfs_blockobj_£t
(
sfs_blockobj
 *
bo
, 
uöt32_t
 
off£t
, uöt32_à
√wvÆ
)

324 i‡(
bo
->
bo_isöode
) {

325 
sfs_vnode
 *
sv
 = 
bo
->
bo_öode
.
i_sv
;

326 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

327 
sfs_döode
 *
döo
;

328 
ödúÀvñ
, 
ödúnum
;

330 
	`KASSERT
(
off£t
 == 0);

332 
döo
 = 
	`sfs_döode_m≠
(
bo
->
bo_öode
.
i_sv
);

333 
ödúÀvñ
 = 
bo
->
bo_öode
.
i_subåì
.
°r_ödúÀvñ
;

334 
ödúnum
 = 
bo
->
bo_öode
.
i_subåì
.
°r_ödúnum
;

336 
ödúÀvñ
) {

338 
	`KASSERT
(
ödúnum
 < 
SFS_NDIRECT
);

339 
döo
->
sfi_dúe˘
[
ödúnum
] = 
√wvÆ
;

342 
	`KASSERT
(
ödúnum
 == 0);

343 
döo
->
sfi_ödúe˘
 = 
√wvÆ
;

346 
	`KASSERT
(
ödúnum
 == 0);

347 
döo
->
sfi_dödúe˘
 = 
√wvÆ
;

350 
	`KASSERT
(
ödúnum
 == 0);

351 
döo
->
sfi_tödúe˘
 = 
√wvÆ
;

354 
	`∑nic
("sfs: %s: sfs_blockobj_get: "

356 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

357 
ödúÀvñ
);

359 
	`sfs_döode_m¨k_dúty
(
bo
->
bo_öode
.
i_sv
);

362 
uöt32_t
 *
id±r
;

364 
	`COMPILE_ASSERT
(
SFS_DBPERIDB
*(
id±r
[0]Ë=
SFS_BLOCKSIZE
);

365 
	`KASSERT
(
off£t
 < 
SFS_DBPERIDB
);

367 
id±r
 = 
	`buf„r_m≠
(
bo
->
bo_idblock
.
id_buf
);

368 
id±r
[
off£t
] = 
√wvÆ
;

369 
	`buf„r_m¨k_dúty
(
bo
->
bo_idblock
.
id_buf
);

371 
	}
}

382 
	$sfs_bm≠_gë
(
sfs_fs
 *
sfs
, 
sfs_blockobj
 *
bo
, 
uöt32_t
 
off£t
,

383 
boﬁ
 
dﬂŒoc
, 
daddr_t
 *
diskblock_ªt
)

385 
daddr_t
 
block
;

386 
ªsu…
;

391 
block
 = 
	`sfs_blockobj_gë
(
bo
, 
off£t
);

396 i‡(
block
==0 && 
dﬂŒoc
) {

397 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
block
, 
NULL
);

398 i‡(
ªsu…
) {

399  
ªsu…
;

403 
	`sfs_blockobj_£t
(
bo
, 
off£t
, 
block
);

409 *
diskblock_ªt
 = 
block
;

411 
	}
}

432 
	$sfs_bm≠_subåì
(
sfs_fs
 *
sfs
, 
sfs_blockobj
 *
öodeobj
,

433 
ödú
,

434 
uöt32_t
 
off£t
, 
boﬁ
 
dﬂŒoc
,

435 
daddr_t
 *
diskblock_ªt
)

437 
daddr_t
 
block
;

438 
buf
 *
idbuf
;

439 
uöt32_t
 
idoff
;

440 
uöt32_t
 
fûeblocks_≥r_íåy
;

441 
sfs_blockobj
 
idobj
;

442 
ªsu…
;

445 
ªsu…
 = 
	`sfs_bm≠_gë
(
sfs
, 
öodeobj
, 0, 
dﬂŒoc
, &
block
);

446 i‡(
ªsu…
) {

447  
ªsu…
;

450 
ödú
 > 0) {

453 i‡(
block
 == 0) {

454 
	`KASSERT
(
dﬂŒoc
 =
Ál£
);

455 *
diskblock_ªt
 = 0;

463 
ödú
) {

465 
fûeblocks_≥r_íåy
 = 
SFS_DBPERIDB
 * SFS_DBPERIDB;

468 
fûeblocks_≥r_íåy
 = 
SFS_DBPERIDB
;

471 
fûeblocks_≥r_íåy
 = 1;

474 
	`∑nic
("sfs: %s: sfs_bmap_subtree: "

476 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

477 
ödú
);

479 
idoff
 = 
off£t
 / 
fûeblocks_≥r_íåy
;

480 
off£t
 = off£à% 
fûeblocks_≥r_íåy
;

483 
ªsu…
 = 
	`buf„r_ªad
(&
sfs
->
sfs_absfs
, 
block
,

484 
SFS_BLOCKSIZE
, &
idbuf
);

485 i‡(
ªsu…
) {

486  
ªsu…
;

489 
	`sfs_blockobj_öô_idblock
(&
idobj
, 
idbuf
);

492 
ªsu…
 = 
	`sfs_bm≠_gë
(
sfs
, &
idobj
, 
idoff
, 
dﬂŒoc
, &
block
);

494 
	`sfs_blockobj_˛ónup
(&
idobj
);

495 
	`buf„r_ªÀa£
(
idbuf
);

497 i‡(
ªsu…
) {

498  
ªsu…
;

501 
ödú
--;

503 *
diskblock_ªt
 = 
block
;

505 
	}
}

519 
	$sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
, 
boﬁ
 
dﬂŒoc
,

520 
daddr_t
 *
diskblock
)

522 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

523 
sfs_subåìªf
 
subåì
;

524 
uöt32_t
 
off£t
;

525 
sfs_blockobj
 
öodeobj
;

526 
ªsu…
;

528 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

531 
ªsu…
 = 
	`sfs_gë_ödúe˘i⁄
(
fûeblock
, &
subåì
, &
off£t
);

532 i‡(
ªsu…
) {

533  
ªsu…
;

537 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

538 i‡(
ªsu…
) {

539  
ªsu…
;

543 
	`sfs_blockobj_öô_öode
(&
öodeobj
, 
sv
, &
subåì
);

546 
ªsu…
 = 
	`sfs_bm≠_subåì
(
sfs
, &
öodeobj
,

547 
subåì
.
°r_ödúÀvñ
,

548 
off£t
, 
dﬂŒoc
,

549 
diskblock
);

550 
	`sfs_blockobj_˛ónup
(&
öodeobj
);

551 
	`sfs_döode_u∆ﬂd
(
sv
);

553 i‡(
ªsu…
) {

554  
ªsu…
;

558 i‡(*
diskblock
 !0 && !
	`sfs_bu£d
(
sfs
, *diskblock)) {

559 
	`∑nic
("sfs: %s: Data block %u (block %u of file %u) "

561 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

562 *
diskblock
, 
fûeblock
, 
sv
->
sv_öo
);

565 
	}
}

574 
	sœyîöfo
 {

575 
daddr_t
 
	mblock
;

576 
buf
 *
	mbuf
;

577 
uöt32_t
 *
	md©a
;

578 
	mpos
;

579 
boﬁ
 
	mha¢⁄zîo
;

580 
boﬁ
 
	mmodifõd
;

588 
boﬁ


589 
	$sfs_öãr£˘_ønge
(
uöt32_t
 
a°¨t
, uöt32_à
´nd
,

590 
uöt32_t
 
b°¨t
, uöt32_à
bíd
,

591 
uöt32_t
 *
ªt_°¨t
, uöt32_à*
ªt_íd
)

593 
	`KASSERT
(
a°¨t
 <
´nd
);

594 
	`KASSERT
(
b°¨t
 <
bíd
);

596 i‡(
a°¨t
 =
´nd
 || 
b°¨t
 =
bíd
) {

597  
Ál£
;

600 i‡(
´nd
 <
b°¨t
) {

601  
Ál£
;

603 i‡(
bíd
 <
a°¨t
) {

604  
Ál£
;

607 i‡(
ªt_°¨t
 !
NULL
) {

608 *
ªt_°¨t
 = 
a°¨t
 > 
b°¨t
 ?ástart : bstart;

610 i‡(
ªt_íd
 !
NULL
) {

611 *
ªt_íd
 = 
´nd
 < 
bíd
 ?áend : bend;

613  
åue
;

614 
	}
}

627 
boﬁ


628 
	$sfs_skù_iblock_íåy
(
sfs_fs
 *
sfs
,

629 
œyîöfo
 *
œyîs
, 
œyî
,

630 
uöt32_t
 
°¨toff£t
, uöt32_à
ídoff£t
)

632 
uöt32_t
 
lo
, 
hi
;

634 
œyîs
[
œyî
 - 1].
block
 =Üayîs[œyî].
d©a
[œyîs[œyî].
pos
];

635 
œyî
) {

637 
lo
 = 
SFS_DBPERIDB
 * SFS_DBPERIDB * 
œyîs
[3].
pos
;

638 
hi
 = 
lo
 + 
SFS_DBPERIDB
 * SFS_DBPERIDB;

641 
lo
 = 
SFS_DBPERIDB
 * SFS_DBPERIDB * 
œyîs
[3].
pos


642 + 
SFS_DBPERIDB
 * 
œyîs
[2].
pos
;

643 
hi
 = 
lo
 + 
SFS_DBPERIDB
;

646 
lo
 = 
SFS_DBPERIDB
 * SFS_DBPERIDB * 
œyîs
[3].
pos


647 + 
SFS_DBPERIDB
 * 
œyîs
[2].
pos


648 + 
œyîs
[1].
pos
;

649 
hi
 = 
lo
 + 1;

652 
	`∑nic
("sfs: %s: sfs_skip_iblock_entry: "

654 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
œyî
);

656 i‡(!
	`sfs_öãr£˘_ønge
(
lo
, 
hi
, 
°¨toff£t
,

657 
ídoff£t
,

658 
NULL
, NULL)) {

663 i‡(
œyîs
[
œyî
 - 1].
block
 != 0) {

664 
œyîs
[
œyî
].
ha¢⁄zîo
 = 
åue
;

666  
åue
;

668 i‡(
œyîs
[
œyî
 - 1].
block
 == 0) {

670  
åue
;

673  
Ál£
;

674 
	}
}

682 
	$sfs_ôrunc_ªadödú
(
sfs_vnode
 *
sv
, 
œyîöfo
 *
œyîs
,

683 
œyî
)

685 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

686 
ªsu…
;

688 
ªsu…
 = 
	`buf„r_ªad
(
sv
->
sv_absvn
.
vn_fs
, 
œyîs
[
œyî
].
block
,

689 
SFS_BLOCKSIZE
, &
œyîs
[
œyî
].
buf
);

695 i‡(
ªsu…
) {

696 
	`k¥ötf
("sfs: %s: sfs_itrunc:ÉrrorÑeadingÜevel %u indirect "

698 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

699 
œyî
, 
œyîs
[œyî].
block
, 
	`°ªº‹
(
ªsu…
));

700  
ªsu…
;

702 
œyîs
[
œyî
].
modifõd
 = 
Ál£
;

704 
	}
}

718 
	$sfs_disˇrd_subåì
(
sfs_vnode
 *
sv
, 
uöt32_t
 *
roŸ±r
, 
ödú
,

719 
uöt32_t
 
°¨toff£t
, uöt32_à
ídoff£t
)

721 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

723 
œyîöfo
 
œyîs
[4];

724 
œyî
;

726 
ªsu…
 = 0, 
föÆ_ªsu…
 = 0;

728 
ii
;

730 
	`COMPILE_ASSERT
(
SFS_DBPERIDB
 * (
œyîs
[0].
d©a
[0])

731 =
SFS_BLOCKSIZE
);

733 i‡(*
roŸ±r
 == 0) {

738 
ii
=0; ii<4; ii++) {

739 
œyîs
[
ii
].
block
 = 0;

740 
œyîs
[
ii
].
buf
 = 
NULL
;

741 
œyîs
[
ii
].
d©a
 = 
NULL
;

742 
œyîs
[
ii
].
pos
 = 0;

743 
œyîs
[
ii
].
ha¢⁄zîo
 = 
Ál£
;

744 
œyîs
[
ii
].
modifõd
 = 
Ál£
;

753 
œyîs
[
ödú
].
block
 = *
roŸ±r
;

755 
	`KASSERT
(
œyîs
[
ödú
].
block
 != 0);

758 
ªsu…
 = 
	`sfs_ôrunc_ªadödú
(
sv
, 
œyîs
, 
ödú
);

759 i‡(
ªsu…
) {

760  
ªsu…
;

763 i‡(
ödú
 == 1) {

769 
ûevñ1
;

771 i‡(
ödú
 == 2) {

776 
ûevñ2
;

778 i‡(
ödú
 == 3) {

779 
ûevñ3
;

790 
ûevñ3
:

791 
œyî
 = 3;

792 
œyîs
[
œyî
].
d©a
 = 
	`buf„r_m≠
÷ayîs[œyî].
buf
);

793 
œyîs
[
œyî
].
pos
 = 0;Üayîs[œyî].po†< 
SFS_DBPERIDB
;Üayers[layer].pos++) {

794 i‡(
	`sfs_skù_iblock_íåy
(
sfs
, 
œyîs
, 
œyî
,

795 
°¨toff£t
, 
ídoff£t
)) {

802 
ªsu…
 = 
	`sfs_ôrunc_ªadödú
(
sv
, 
œyîs
, 
œyî
 - 1);

803 i‡(
ªsu…
) {

805 
föÆ_ªsu…
 = 
ªsu…
;

818 
ûevñ2
:

819 
œyî
 = 2;

820 
œyîs
[
œyî
].
d©a
 = 
	`buf„r_m≠
÷ayîs[œyî].
buf
);

821 
œyîs
[
œyî
].
pos
 = 0;Üayîs[œyî].po†< 
SFS_DBPERIDB
;Üayers[layer].pos++) {

826 i‡(
	`sfs_skù_iblock_íåy
(
sfs
, 
œyîs
, 
œyî
,

827 
°¨toff£t
, 
ídoff£t
)) {

834 
ªsu…
 = 
	`sfs_ôrunc_ªadödú
(
sv
, 
œyîs
, 
œyî
 - 1);

835 i‡(
ªsu…
) {

837 
föÆ_ªsu…
 = 
ªsu…
;

850 
ûevñ1
:

851 
œyî
 = 1;

852 
œyîs
[
œyî
].
d©a
 = 
	`buf„r_m≠
÷ayîs[œyî].
buf
);

853 
œyîs
[
œyî
].
pos
 = 0;Üayîs[œyî].po†< 
SFS_DBPERIDB
;Üayers[layer].pos++) {

859 i‡(
	`sfs_skù_iblock_íåy
(
sfs
, 
œyîs
, 
œyî
,

860 
°¨toff£t
,

861 
ídoff£t
)) {

864 
œyîs
[
œyî
].
d©a
[œyîs[œyî].
pos
] = 0;

865 
œyîs
[
œyî
].
modifõd
 = 
åue
;

867 
	`sfs_b‰ì_¥ñocked
(
sfs
, 
œyîs
[
œyî
 - 1].
block
);

871 i‡(!
œyîs
[1].
ha¢⁄zîo
) {

877 
	`sfs_b‰ì_¥ñocked
(
sfs
, 
œyîs
[1].
block
);

878 i‡(
ödú
 == 1) {

879 *
roŸ±r
 = 0;

880 
	`sfs_döode_m¨k_dúty
(
sv
);

882 i‡(
ödú
 != 1) {

883 
œyîs
[2].
modifõd
 = 
åue
;

884 
œyîs
[2].
d©a
[œyîs[2].
pos
] = 0;

886 
	`buf„r_ªÀa£_™d_övÆid©e
(
œyîs
[1].
buf
);

888 i‡(
œyîs
[1].
modifõd
) {

893 
	`buf„r_m¨k_dúty
(
œyîs
[1].
buf
);

894 i‡(
ödú
 != 1) {

895 
œyîs
[2].
ha¢⁄zîo
 = 
åue
;

897 
	`buf„r_ªÀa£
(
œyîs
[1].
buf
);

900 
	`buf„r_ªÀa£
(
œyîs
[1].
buf
);

908 i‡(
ödú
 == 1) {

913 
œyî
 = 2;

921 i‡(
ödú
 == 1) {

925 i‡(!
œyîs
[2].
ha¢⁄zîo
) {

930 
	`sfs_b‰ì_¥ñocked
(
sfs
, 
œyîs
[2].
block
);

931 i‡(
ödú
 == 2) {

932 *
roŸ±r
 = 0;

933 
	`sfs_döode_m¨k_dúty
(
sv
);

935 i‡(
ödú
 == 3) {

936 
œyîs
[3].
modifõd
 = 
åue
;

937 
œyîs
[3].
d©a
[œyîs[3].
pos
] = 0;

939 
	`buf„r_ªÀa£_™d_övÆid©e
(
œyîs
[2].
buf
);

941 i‡(
œyîs
[2].
modifõd
) {

946 
	`buf„r_m¨k_dúty
(
œyîs
[2].
buf
);

947 i‡(
ödú
 == 3) {

948 
œyîs
[3].
ha¢⁄zîo
 = 
åue
;

950 
	`buf„r_ªÀa£
(
œyîs
[2].
buf
);

953 
	`buf„r_ªÀa£
(
œyîs
[2].
buf
);

956 i‡(
ödú
 < 3) {

961 
œyî
 = 2;

964 i‡(
ödú
 < 3) {

965  
föÆ_ªsu…
;

967 i‡(!
œyîs
[3].
ha¢⁄zîo
) {

972 
	`sfs_b‰ì_¥ñocked
(
sfs
, 
œyîs
[3].
block
);

973 *
roŸ±r
 = 0;

974 
	`sfs_döode_m¨k_dúty
(
sv
);

975 
	`buf„r_ªÀa£_™d_övÆid©e
(
œyîs
[3].
buf
);

977 i‡(
œyîs
[3].
modifõd
) {

982 
	`buf„r_m¨k_dúty
(
œyîs
[3].
buf
);

983 
	`buf„r_ªÀa£
(
œyîs
[3].
buf
);

986 
	`buf„r_ªÀa£
(
œyîs
[3].
buf
);

989  
föÆ_ªsu…
;

990 
	}
}

998 
	$sfs_disˇrd
(
sfs_vnode
 *
sv
,

999 
uöt32_t
 
°¨tfûeblock
, uöt32_à
ídfûeblock
)

1001 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

1002 
sfs_döode
 *
öodïå
;

1003 
uöt32_t
 
i
;

1004 
daddr_t
 
block
;

1005 
uöt32_t
 
lo
, 
hi
, 
sub°¨t
, 
subíd
;

1006 
ªsu…
;

1008 
öodïå
 = 
	`sfs_döode_m≠
(
sv
);

1014 
i
=0; i<
SFS_NDIRECT
; i++) {

1015 
block
 = 
öodïå
->
sfi_dúe˘
[
i
];

1016 i‡(
i
 >
°¨tfûeblock
 && i < 
ídfûeblock
 && 
block
 != 0) {

1017 
	`sfs_b‰ì_¥ñocked
(
sfs
, 
block
);

1018 
öodïå
->
sfi_dúe˘
[
i
] = 0;

1019 
	`sfs_döode_m¨k_dúty
(
sv
);

1024 
lo
 = 
SFS_NDIRECT
;

1025 
hi
 = 
lo
 + 
SFS_DBPERIDB
;

1026 i‡(
	`sfs_öãr£˘_ønge
(
lo
, 
hi
, 
°¨tfûeblock
, 
ídfûeblock
,

1027 &
sub°¨t
, &
subíd
)) {

1028 
ªsu…
 = 
	`sfs_disˇrd_subåì
(
sv
, &
öodïå
->
sfi_ödúe˘
, 1,

1029 
sub°¨t
 - 
lo
, 
subíd
 -Üo);

1030 i‡(
ªsu…
) {

1031  
ªsu…
;

1036 
lo
 = 
hi
;

1037 
hi
 = 
lo
 + 
SFS_DBPERIDB
 * SFS_DBPERIDB;

1038 i‡(
	`sfs_öãr£˘_ønge
(
lo
, 
hi
, 
°¨tfûeblock
, 
ídfûeblock
,

1039 &
sub°¨t
, &
subíd
)) {

1040 
ªsu…
 = 
	`sfs_disˇrd_subåì
(
sv
, &
öodïå
->
sfi_dödúe˘
, 2,

1041 
sub°¨t
 - 
lo
, 
subíd
 -Üo);

1042 i‡(
ªsu…
) {

1043  
ªsu…
;

1048 
lo
 = 
hi
;

1049 
hi
 = 
lo
 + 
SFS_DBPERIDB
 * SFS_DBPERIDB * SFS_DBPERIDB;

1050 i‡(
	`sfs_öãr£˘_ønge
(
lo
, 
hi
, 
°¨tfûeblock
, 
ídfûeblock
,

1051 &
sub°¨t
, &
subíd
)) {

1052 
ªsu…
 = 
	`sfs_disˇrd_subåì
(
sv
, &
öodïå
->
sfi_tödúe˘
, 3,

1053 
sub°¨t
 - 
lo
, 
subíd
 -Üo);

1054 i‡(
ªsu…
) {

1055  
ªsu…
;

1060 
	}
}

1070 
	$sfs_ôrunc
(
sfs_vnode
 *
sv
, 
off_t
 
√wÀn
)

1072 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

1073 
sfs_döode
 *
öodïå
;

1074 
uöt32_t
 
ﬁdblockÀn
, 
√wblockÀn
;

1075 
ªsu…
;

1077 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

1079 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

1080 i‡(
ªsu…
) {

1081  
ªsu…
;

1083 
öodïå
 = 
	`sfs_döode_m≠
(
sv
);

1086 
ﬁdblockÀn
 = 
	`DIVROUNDUP
(
öodïå
->
sfi_size
, 
SFS_BLOCKSIZE
);

1087 
√wblockÀn
 = 
	`DIVROUNDUP
(
√wÀn
, 
SFS_BLOCKSIZE
);

1090 
	`sfs_lock_‰ìm≠
(
sfs
);

1092 i‡(
√wblockÀn
 < 
ﬁdblockÀn
) {

1093 
ªsu…
 = 
	`sfs_disˇrd
(
sv
, 
√wblockÀn
, 
ﬁdblockÀn
);

1094 i‡(
ªsu…
) {

1095 
	`sfs_u∆ock_‰ìm≠
(
sfs
);

1096 
	`sfs_döode_u∆ﬂd
(
sv
);

1097  
ªsu…
;

1102 
öodïå
->
sfi_size
 = 
√wÀn
;

1105 
	`sfs_döode_m¨k_dúty
(
sv
);

1108 
	`sfs_u∆ock_‰ìm≠
(
sfs
);

1111 
	`sfs_döode_u∆ﬂd
(
sv
);

1114 
	}
}

	@fs/sfs/sfs_dir.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<buf.h
>

40 
	~<sfs.h
>

41 
	~"sf•riv©e.h
"

52 
	$sfs_ªaddú
(
sfs_vnode
 *
sv
, 
¶Ÿ
, 
sfs_dúíåy
 *
sd
)

54 
off_t
 
a˘uÆpos
;

57 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dúíåy
);

59  
	`sfs_mëaio
(
sv
, 
a˘uÆpos
, 
sd
, (*sd), 
UIO_READ
);

60 
	}
}

69 
	$sfs_wrôedú
(
sfs_vnode
 *
sv
, 
¶Ÿ
, 
sfs_dúíåy
 *
sd
)

71 
off_t
 
a˘uÆpos
;

74 
	`KASSERT
(
¶Ÿ
>=0);

75 
a˘uÆpos
 = 
¶Ÿ
 * (
sfs_dúíåy
);

77  
	`sfs_mëaio
(
sv
, 
a˘uÆpos
, 
sd
, (*sd), 
UIO_WRITE
);

78 
	}
}

90 
	$sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
, *
ªt
)

92 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

93 
off_t
 
size
;

94 
sfs_döode
 *
öodïå
;

95 
ªsu…
;

97 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

98 
	`KASSERT
(
sv
->
sv_ty≥
 =
SFS_TYPE_DIR
);

100 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

101 i‡(
ªsu…
) {

102  
ªsu…
;

104 
öodïå
 = 
	`sfs_döode_m≠
(
sv
);

106 
size
 = 
öodïå
->
sfi_size
;

107 i‡(
size
 % (
sfs_dúíåy
) != 0) {

108 
	`∑nic
("sfs: %s: directory %u: Invalid size %llu\n",

109 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
sv
->
sv_öo
, 
size
);

112 
	`sfs_döode_u∆ﬂd
(
sv
);

114 *
ªt
 = 
size
 / (
sfs_dúíåy
);

116 
	}
}

128 
	$sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

129 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
)

131 
sfs_dúíåy
 
tsd
;

132 
found
, 
√¡rõs
, 
i
, 
ªsu…
;

134 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

136 
ªsu…
 = 
	`sfs_dú_√¡rõs
(
sv
, &
√¡rõs
);

137 i‡(
ªsu…
) {

138  
ªsu…
;

142 
found
 = 0;

143 
i
=0; i<
√¡rõs
; i++) {

146 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, 
i
, &
tsd
);

147 i‡(
ªsu…
) {

148  
ªsu…
;

150 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

152 i‡(
em±y¶Ÿ
 !
NULL
) {

153 *
em±y¶Ÿ
 = 
i
;

158 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

159 i‡(!
	`°rcmp
(
tsd
.
sfd_«me
, 
«me
)) {

162 
	`KASSERT
(
found
==0);

164 
found
 = 1;

165 i‡(
¶Ÿ
 !
NULL
) {

166 *
¶Ÿ
 = 
i
;

168 i‡(
öo
 !
NULL
) {

169 *
öo
 = 
tsd
.
sfd_öo
;

175  
found
 ? 0 : 
ENOENT
;

176 
	}
}

187 
	$sfs_dú_födöo
(
sfs_vnode
 *
sv
, 
uöt32_t
 
öo
,

188 
sfs_dúíåy
 *
ªtsd
, *
¶Ÿ
)

190 
sfs_dúíåy
 
tsd
;

191 
found
 = 0;

192 
√¡rõs
;

193 
i
, 
ªsu…
;

195 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

197 
ªsu…
 = 
	`sfs_dú_√¡rõs
(
sv
, &
√¡rõs
);

198 i‡(
ªsu…
) {

199  
ªsu…
;

203 
i
=0; i<
√¡rõs
 && !
found
; i++) {

206 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, 
i
, &
tsd
);

207 i‡(
ªsu…
) {

208  
ªsu…
;

210 i‡(
tsd
.
sfd_öo
 =
öo
) {

211 
found
 = 1;

212 i‡(
¶Ÿ
 !
NULL
) {

213 *
¶Ÿ
 = 
i
;

215 i‡(
ªtsd
 !
NULL
) {

217 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

218 *
ªtsd
 = 
tsd
;

223  
found
 ? 0 : 
ENOENT
;

224 
	}
}

235 
	$sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
, *
¶Ÿ
)

237 
em±y¶Ÿ
 = -1;

238 
ªsu…
;

239 
sfs_dúíåy
 
sd
;

241 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

244 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, 
NULL
, NULL, &
em±y¶Ÿ
);

245 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

246  
ªsu…
;

248 i‡(
ªsu…
==0) {

249  
EEXIST
;

252 i‡(
	`°æí
(
«me
)+1 > (
sd
.
sfd_«me
)) {

253  
ENAMETOOLONG
;

257 i‡(
em±y¶Ÿ
 < 0) {

258 
ªsu…
 = 
	`sfs_dú_√¡rõs
(
sv
, &
em±y¶Ÿ
);

259 i‡(
ªsu…
) {

260  
ªsu…
;

265 
	`bzîo
(&
sd
, (sd));

266 
sd
.
sfd_öo
 = 
öo
;

267 
	`°r˝y
(
sd
.
sfd_«me
, 
«me
);

270 i‡(
¶Ÿ
) {

271 *
¶Ÿ
 = 
em±y¶Ÿ
;

275  
	`sfs_wrôedú
(
sv
, 
em±y¶Ÿ
, &
sd
);

276 
	}
}

286 
	$sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
)

288 
sfs_dúíåy
 
sd
;

290 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

293 
	`bzîo
(&
sd
, (sd));

294 
sd
.
sfd_öo
 = 
SFS_NOINO
;

297  
	`sfs_wrôedú
(
sv
, 
¶Ÿ
, &
sd
);

298 
	}
}

314 
	$sfs_dú_checkem±y
(
sfs_vnode
 *
sv
)

316 
sfs_dúíåy
 
sd
;

317 
√¡rõs
;

318 
i
, 
ªsu…
;

320 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

322 
ªsu…
 = 
	`sfs_dú_√¡rõs
(
sv
, &
√¡rõs
);

323 i‡(
ªsu…
) {

324  
ªsu…
;

327 
i
=0; i<
√¡rõs
; i++) {

328 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, 
i
, &
sd
);

329 i‡(
ªsu…
) {

330  
ªsu…
;

332 i‡(
sd
.
sfd_öo
 =
SFS_NOINO
) {

338 
sd
.
sfd_«me
[(sd.sfd_name)-1] = 0;

340 i‡(!
	`°rcmp
(
sd
.
sfd_«me
, ".") || !strcmp(sd.sfd_name, "..")) {

345  
ENOTEMPTY
;

349 
	}
}

361 
	$sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
, sfs_vnodê**
ªt
,

362 *
¶Ÿ
)

364 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

365 
uöt32_t
 
öo
;

366 
ªsu…
, 
ªsu…2
;

367 
em±y¶Ÿ
 = -1;

369 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

371 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
¶Ÿ
, &
em±y¶Ÿ
);

372 i‡(
ªsu…
 =
ENOENT
) {

373 *
ªt
 = 
NULL
;

374 i‡(
¶Ÿ
 !
NULL
) {

375 i‡(
em±y¶Ÿ
 < 0) {

376 
ªsu…2
 = 
	`sfs_dú_√¡rõs
(
sv
, &
em±y¶Ÿ
);

377 i‡(
ªsu…2
) {

378  
ªsu…2
;

381 *
¶Ÿ
 = 
em±y¶Ÿ
;

383  
ªsu…
;

385 i‡(
ªsu…
) {

386  
ªsu…
;

389 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, 
ªt
);

390 i‡(
ªsu…
) {

391  
ªsu…
;

395 
	}
}

	@fs/sfs/sfs_fsops.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<bôm≠.h
>

41 
	~<synch.h
>

42 
	~<uio.h
>

43 
	~<vfs.h
>

44 
	~<buf.h
>

45 
	~<devi˚.h
>

46 
	~<sfs.h
>

47 
	~"sf•riv©e.h
"

51 
	#SFS_FS_NBLOCKS
(
sfs
Ë((sfs)->
sfs_sb
.
sb_nblocks
)

	)

52 
	#SFS_FS_FREEMAPBITS
(
sfs
Ë
	`SFS_FREEMAPBITS
(
	`SFS_FS_NBLOCKS
(sfs))

	)

53 
	#SFS_FS_FREEMAPBLOCKS
(
sfs
Ë
	`SFS_FREEMAPBLOCKS
(
	`SFS_FS_NBLOCKS
(sfs))

	)

77 
	$sfs_‰ìm≠io
(
sfs_fs
 *
sfs
, 
uio_rw
 
rw
)

79 
uöt32_t
 
j
, 
‰ìm≠blocks
;

80 *
‰ìm≠d©a
;

81 
ªsu…
;

83 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sfs
->
sfs_‰ìm≠lock
));

86 
‰ìm≠blocks
 = 
	`SFS_FS_FREEMAPBLOCKS
(
sfs
);

89 
‰ìm≠d©a
 = 
	`bôm≠_gëd©a
(
sfs
->
sfs_‰ìm≠
);

92 
j
=0; j<
‰ìm≠blocks
; j++) {

95 *
±r
 = 
‰ìm≠d©a
 + 
j
*
SFS_BLOCKSIZE
;

98 i‡(
rw
 =
UIO_READ
) {

99 
ªsu…
 = 
	`sfs_ªadblock
(&
sfs
->
sfs_absfs
,

100 
SFS_FREEMAP_START
 + 
j
,

101 
±r
, 
SFS_BLOCKSIZE
);

104 
ªsu…
 = 
	`sfs_wrôeblock
(&
sfs
->
sfs_absfs
,

105 
SFS_FREEMAP_START
 + 
j
, 
NULL
,

106 
±r
, 
SFS_BLOCKSIZE
);

110 i‡(
ªsu…
) {

111  
ªsu…
;

115 
	}
}

123 
	$sfs_sync_vnodes
(
sfs_fs
 *
sfs
)

125 
i
, 
num
;

128 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

129 
i
=0; i<
num
; i++) {

130 
vnode
 *
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

131 
	`VOP_FSYNC
(
v
);

134 
	}
}

143 
	$sfs_sync_‰ìm≠
(
sfs_fs
 *
sfs
)

145 
ªsu…
;

147 
	`lock_acquúe
(
sfs
->
sfs_‰ìm≠lock
);

149 i‡(
sfs
->
sfs_‰ìm≠dúty
) {

150 
ªsu…
 = 
	`sfs_‰ìm≠io
(
sfs
, 
UIO_WRITE
);

151 i‡(
ªsu…
) {

152 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

153  
ªsu…
;

155 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

158 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

160 
	}
}

169 
	$sfs_sync_su≥rblock
(
sfs_fs
 *
sfs
)

171 
ªsu…
;

173 
	`lock_acquúe
(
sfs
->
sfs_‰ìm≠lock
);

175 i‡(
sfs
->
sfs_su≥rdúty
) {

176 
ªsu…
 = 
	`sfs_wrôeblock
(&
sfs
->
sfs_absfs
, 
SFS_SUPER_BLOCK
,

177 
NULL
,

178 &
sfs
->
sfs_sb
, (sfs->sfs_sb));

179 i‡(
ªsu…
) {

180 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

181  
ªsu…
;

183 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

185 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

187 
	}
}

195 
	$sfs_sync
(
fs
 *fs)

197 
sfs_fs
 *
sfs
;

198 
ªsu…
;

231 
sfs
 = 
fs
->
fs_d©a
;

234 
ªsu…
 = 
	`sync_fs_buf„rs
(
fs
);

235 i‡(
ªsu…
) {

236  
ªsu…
;

240 
ªsu…
 = 
	`sfs_sync_‰ìm≠
(
sfs
);

241 i‡(
ªsu…
) {

242  
ªsu…
;

246 
ªsu…
 = 
	`sfs_sync_su≥rblock
(
sfs
);

247 i‡(
ªsu…
) {

248  
ªsu…
;

251 
ªsu…
 = 
	`sfs_jphys_ÊushÆl
(
sfs
);

252 i‡(
ªsu…
) {

253  
ªsu…
;

257 
	}
}

266 
	$sfs_©èchbuf
(
fs
 *fs, 
daddr_t
 
diskblock
, 
buf
 *buf)

268 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

269 *
ﬁdd©a
;

271 ()
sfs
;

272 ()
diskblock
;

275 
ﬁdd©a
 = 
	`buf„r_£t_fsd©a
(
buf
, 
NULL
);

278 
	`KASSERT
(
ﬁdd©a
 =
NULL
);

281 
	}
}

285 
	$sfs_dëachbuf
(
fs
 *fs, 
daddr_t
 
diskblock
, 
buf
 *buf)

287 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

288 *
bufd©a
;

290 ()
sfs
;

291 ()
diskblock
;

294 
bufd©a
 = 
	`buf„r_£t_fsd©a
(
buf
, 
NULL
);

297 
	`KASSERT
(
bufd©a
 =
NULL
);

298 
	}
}

307 
	$sfs_gëvﬁ«me
(
fs
 *fs)

309 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

319  
sfs
->
sfs_sb
.
sb_vﬁ«me
;

320 
	}
}

327 
	$sfs_fs_de°roy
(
sfs_fs
 *
sfs
)

329 
	`sfs_jphys_de°roy
(
sfs
->
sfs_jphys
);

330 
	`lock_de°roy
(
sfs
->
sfs_ª«mñock
);

331 
	`lock_de°roy
(
sfs
->
sfs_‰ìm≠lock
);

332 
	`lock_de°roy
(
sfs
->
sfs_v∆ock
);

333 i‡(
sfs
->
sfs_‰ìm≠
 !
NULL
) {

334 
	`bôm≠_de°roy
(
sfs
->
sfs_‰ìm≠
);

336 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

337 
	`KASSERT
(
sfs
->
sfs_devi˚
 =
NULL
);

338 
	`k‰ì
(
sfs
);

339 
	}
}

348 
	$sfs_unmou¡
(
fs
 *fs)

350 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

353 
	`lock_acquúe
(
sfs
->
sfs_v∆ock
);

354 
	`lock_acquúe
(
sfs
->
sfs_‰ìm≠lock
);

357 i‡(
	`vnodóºay_num
(
sfs
->
sfs_vnodes
) > 0) {

358 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

359 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

360  
EBUSY
;

363 
	`sfs_jphys_°›wrôög
(
sfs
);

365 
	`uƒe£rve_fsm™aged_buf„rs
(2, 
SFS_BLOCKSIZE
);

368 
	`KASSERT
(
sfs
->
sfs_su≥rdúty
 =
Ál£
);

369 
	`KASSERT
(
sfs
->
sfs_‰ìm≠dúty
 =
Ál£
);

372 
	`dr›_fs_buf„rs
(
fs
);

375 
sfs
->
sfs_devi˚
 = 
NULL
;

378 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

379 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

382 
	`sfs_fs_de°roy
(
sfs
);

386 
	}
}

391 c⁄° 
fs_›s
 
	gsfs_fs›s
 = {

392 .
fs›_sync
 = 
sfs_sync
,

393 .
	gfs›_gëvﬁ«me
 = 
sfs_gëvﬁ«me
,

394 .
	gfs›_gëroŸ
 = 
sfs_gëroŸ
,

395 .
	gfs›_unmou¡
 = 
sfs_unmou¡
,

396 .
	gfs›_ªadblock
 = 
sfs_ªadblock
,

397 .
	gfs›_wrôeblock
 = 
sfs_wrôeblock
,

398 .
	gfs›_©èchbuf
 = 
sfs_©èchbuf
,

399 .
	gfs›_dëachbuf
 = 
sfs_dëachbuf
,

408 
sfs_fs
 *

409 
	$sfs_fs_¸óã
()

411 
sfs_fs
 *
sfs
;

416 
	`COMPILE_ASSERT
((
sfs_su≥rblock
)==
SFS_BLOCKSIZE
);

417 
	`COMPILE_ASSERT
((
sfs_döode
)==
SFS_BLOCKSIZE
);

418 
	`COMPILE_ASSERT
(
SFS_BLOCKSIZE
 % (
sfs_dúíåy
) == 0);

421 
sfs
 = 
	`kmÆloc
((
sfs_fs
));

422 i‡(
sfs
==
NULL
) {

423 
Áû
;

431 
sfs
->
sfs_absfs
.
fs_d©a
 = sfs;

432 
sfs
->
sfs_absfs
.
fs_›s
 = &
sfs_fs›s
;

436 
sfs
->
sfs_su≥rdúty
 = 
Ál£
;

439 
sfs
->
sfs_devi˚
 = 
NULL
;

442 
sfs
->
sfs_vnodes
 = 
	`vnodóºay_¸óã
();

443 i‡(
sfs
->
sfs_vnodes
 =
NULL
) {

444 
˛ónup_obje˘
;

448 
sfs
->
sfs_‰ìm≠
 = 
NULL
;

449 
sfs
->
sfs_‰ìm≠dúty
 = 
Ál£
;

452 
sfs
->
sfs_v∆ock
 = 
	`lock_¸óã
("sfs_vnlock");

453 i‡(
sfs
->
sfs_v∆ock
 =
NULL
) {

454 
˛ónup_vnodes
;

456 
sfs
->
sfs_‰ìm≠lock
 = 
	`lock_¸óã
("sfs_freemaplock");

457 i‡(
sfs
->
sfs_‰ìm≠lock
 =
NULL
) {

458 
˛ónup_v∆ock
;

460 
sfs
->
sfs_ª«mñock
 = 
	`lock_¸óã
("sfs_renamelock");

461 i‡(
sfs
->
sfs_ª«mñock
 =
NULL
) {

462 
˛ónup_‰ìm≠lock
;

466 
sfs
->
sfs_jphys
 = 
	`sfs_jphys_¸óã
();

467 i‡(
sfs
->
sfs_jphys
 =
NULL
) {

468 
˛ónup_ª«mñock
;

471  
sfs
;

473 
˛ónup_ª«mñock
:

474 
	`lock_de°roy
(
sfs
->
sfs_ª«mñock
);

475 
˛ónup_‰ìm≠lock
:

476 
	`lock_de°roy
(
sfs
->
sfs_‰ìm≠lock
);

477 
˛ónup_v∆ock
:

478 
	`lock_de°roy
(
sfs
->
sfs_v∆ock
);

479 
˛ónup_vnodes
:

480 
	`vnodóºay_de°roy
(
sfs
->
sfs_vnodes
);

481 
˛ónup_obje˘
:

482 
	`k‰ì
(
sfs
);

483 
Áû
:

484  
NULL
;

485 
	}
}

502 
	$sfs_domou¡
(*
›ti⁄s
, 
devi˚
 *
dev
, 
fs
 **
ªt
)

504 
ªsu…
;

505 
sfs_fs
 *
sfs
;

508 ()
›ti⁄s
;

518 i‡(
dev
->
d_blocksize
 !
SFS_BLOCKSIZE
) {

519 
	`k¥ötf
("sfs: Cannot mount on device with blocksize %zu\n",

520 
dev
->
d_blocksize
);

521  
ENXIO
;

524 
sfs
 = 
	`sfs_fs_¸óã
();

525 i‡(
sfs
 =
NULL
) {

526  
ENOMEM
;

530 
sfs
->
sfs_devi˚
 = 
dev
;

533 
	`lock_acquúe
(
sfs
->
sfs_v∆ock
);

534 
	`lock_acquúe
(
sfs
->
sfs_‰ìm≠lock
);

537 
ªsu…
 = 
	`sfs_ªadblock
(&
sfs
->
sfs_absfs
, 
SFS_SUPER_BLOCK
,

538 &
sfs
->
sfs_sb
, (sfs->sfs_sb));

539 i‡(
ªsu…
) {

540 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

541 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

542 
sfs
->
sfs_devi˚
 = 
NULL
;

543 
	`sfs_fs_de°roy
(
sfs
);

544  
ªsu…
;

549 i‡(
sfs
->
sfs_sb
.
sb_magic
 !
SFS_MAGIC
) {

550 
	`k¥ötf
("sfs: Wrong magicÇumber in superblock "

552 
sfs
->
sfs_sb
.
sb_magic
,

553 
SFS_MAGIC
);

554 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

555 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

556 
sfs
->
sfs_devi˚
 = 
NULL
;

557 
	`sfs_fs_de°roy
(
sfs
);

558  
EINVAL
;

561 i‡(
sfs
->
sfs_sb
.
sb_jou∫Æblocks
 >sfs->sfs_sb.
sb_nblocks
) {

562 
	`k¥ötf
("sfs: warning - journalÅakes up whole volume\n");

565 i‡(
sfs
->
sfs_sb
.
sb_nblocks
 > 
dev
->
d_blocks
) {

566 
	`k¥ötf
("sfs: warning - fs has %u blocks, device has %u\n",

567 
sfs
->
sfs_sb
.
sb_nblocks
, 
dev
->
d_blocks
);

571 
sfs
->
sfs_sb
.
sb_vﬁ«me
[(sfs->sfs_sb.sb_volname)-1] = 0;

574 
sfs
->
sfs_‰ìm≠
 = 
	`bôm≠_¸óã
(
	`SFS_FS_FREEMAPBITS
(sfs));

575 i‡(
sfs
->
sfs_‰ìm≠
 =
NULL
) {

576 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

577 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

578 
sfs
->
sfs_devi˚
 = 
NULL
;

579 
	`sfs_fs_de°roy
(
sfs
);

580  
ENOMEM
;

582 
ªsu…
 = 
	`sfs_‰ìm≠io
(
sfs
, 
UIO_READ
);

583 i‡(
ªsu…
) {

584 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

585 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

586 
sfs
->
sfs_devi˚
 = 
NULL
;

587 
	`sfs_fs_de°roy
(
sfs
);

588  
ªsu…
;

592 *
ªt
 = &
sfs
->
sfs_absfs
;

594 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

595 
	`lock_ªÀa£
(
sfs
->
sfs_‰ìm≠lock
);

597 
	`ª£rve_fsm™aged_buf„rs
(2, 
SFS_BLOCKSIZE
);

603 
	`SAY
("*** Loading upÅhe jphys container ***\n");

604 
ªsu…
 = 
	`sfs_jphys_lﬂdup
(
sfs
);

605 i‡(
ªsu…
) {

606 
	`uƒe£rve_fsm™aged_buf„rs
(2, 
SFS_BLOCKSIZE
);

607 
	`dr›_fs_buf„rs
(&
sfs
->
sfs_absfs
);

608 
sfs
->
sfs_devi˚
 = 
NULL
;

609 
	`sfs_fs_de°roy
(
sfs
);

610  
ªsu…
;

618 
	`sfs_jphys_°¨åódög
(
sfs
);

620 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

626 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

629 
	`sfs_jphys_°›ªadög
(
sfs
);

632 
	`SAY
("*** Starting up ***\n");

633 
ªsu…
 = 
	`sfs_jphys_°¨twrôög
(
sfs
);

634 i‡(
ªsu…
) {

635 
	`uƒe£rve_fsm™aged_buf„rs
(2, 
SFS_BLOCKSIZE
);

636 
	`dr›_fs_buf„rs
(&
sfs
->
sfs_absfs
);

637 
sfs
->
sfs_devi˚
 = 
NULL
;

638 
	`sfs_fs_de°roy
(
sfs
);

639  
ªsu…
;

642 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

648 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

651 
	}
}

657 
	$sfs_mou¡
(c⁄° *
devi˚
)

659  
	`vfs_mou¡
(
devi˚
, 
NULL
, 
sfs_domou¡
);

660 
	}
}

	@fs/sfs/sfs_inode.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<thªad.h
>

40 
	~<cuºít.h
>

41 
	~<vfs.h
>

42 
	~<buf.h
>

43 
	~<sfs.h
>

44 
	~"sf•riv©e.h
"

51 
sfs_vnode
 *

52 
	$sfs_vnode_¸óã
(
uöt32_t
 
öo
, 
ty≥
)

54 
sfs_vnode
 *
sv
;

56 
sv
 = 
	`kmÆloc
((*sv));

57 i‡(
sv
 =
NULL
) {

58  
NULL
;

60 
sv
->
sv_lock
 = 
	`lock_¸óã
("sfs_vnode");

61 i‡(
sv
->
sv_lock
 =
NULL
) {

62 
	`k‰ì
(
sv
);

63  
NULL
;

65 
sv
->
sv_öo
 = 
öo
;

66 
sv
->
sv_ty≥
 = 
ty≥
;

67 
sv
->
sv_döobuf
 = 
NULL
;

68 
sv
->
sv_döobufcou¡
 = 0;

69  
sv
;

70 
	}
}

77 
	$sfs_vnode_de°roy
(
sfs_vnode
 *
vi˘im
)

79 
	`lock_de°roy
(
vi˘im
->
sv_lock
);

80 
	`k‰ì
(
vi˘im
);

81 
	}
}

96 
	$sfs_döode_lﬂd
(
sfs_vnode
 *
sv
)

98 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

99 
ªsu…
;

101 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

103 i‡(
sv
->
sv_döobufcou¡
 == 0) {

104 
	`KASSERT
(
sv
->
sv_döobuf
 =
NULL
);

105 
ªsu…
 = 
	`buf„r_ªad
(&
sfs
->
sfs_absfs
, 
sv
->
sv_öo
,
SFS_BLOCKSIZE
,

106 &
sv
->
sv_döobuf
);

107 i‡(
ªsu…
) {

108  
ªsu…
;

112 
	`KASSERT
(
sv
->
sv_döobuf
 !
NULL
);

114 
sv
->
sv_döobufcou¡
++;

117 
	}
}

129 
	$sfs_döode_u∆ﬂd
(
sfs_vnode
 *
sv
)

131 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

133 
	`KASSERT
(
sv
->
sv_döobuf
 !
NULL
);

134 
	`KASSERT
(
sv
->
sv_döobufcou¡
 > 0);

136 
sv
->
sv_döobufcou¡
--;

137 i‡(
sv
->
sv_döobufcou¡
 == 0) {

138 
	`buf„r_ªÀa£
(
sv
->
sv_döobuf
);

139 
sv
->
sv_döobuf
 = 
NULL
;

141 
	}
}

150 
sfs_döode
 *

151 
	$sfs_döode_m≠
(
sfs_vnode
 *
sv
)

153 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

155 
	`KASSERT
(
sv
->
sv_döobuf
 !
NULL
);

156  
	`buf„r_m≠
(
sv
->
sv_döobuf
);

157 
	}
}

166 
	$sfs_döode_m¨k_dúty
(
sfs_vnode
 *
sv
)

168 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

170 
	`KASSERT
(
sv
->
sv_döobuf
 !
NULL
);

171 
	`buf„r_m¨k_dúty
(
sv
->
sv_döobuf
);

172 
	}
}

186 
	$sfs_ª˛aim
(
vnode
 *
v
)

188 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

189 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

190 
sfs_döode
 *
ùå
;

191 
ix
, 
i
, 
num
;

192 
boﬁ
 
buf„rs_√eded
;

193 
ªsu…
;

195 
	`lock_acquúe
(
sv
->
sv_lock
);

196 
	`lock_acquúe
(
sfs
->
sfs_v∆ock
);

203 
	`•ölock_acquúe
(&
v
->
vn_cou¡lock
);

204 i‡(
v
->
vn_ªfcou¡
 != 1) {

207 
	`KASSERT
(
v
->
vn_ªfcou¡
>1);

208 
v
->
vn_ªfcou¡
--;

210 
	`•ölock_ªÀa£
(&
v
->
vn_cou¡lock
);

211 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

212 
	`lock_ªÀa£
(
sv
->
sv_lock
);

213  
EBUSY
;

215 
	`•ölock_ªÀa£
(&
v
->
vn_cou¡lock
);

223 
buf„rs_√eded
 = !
cuπhªad
->
t_did_ª£rve_buf„rs
;

224 i‡(
buf„rs_√eded
) {

225 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

229 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

230 i‡(
ªsu…
) {

235 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

236 
	`lock_ªÀa£
(
sv
->
sv_lock
);

237 i‡(
buf„rs_√eded
) {

238 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

240  
ªsu…
;

242 
ùå
 = 
	`sfs_döode_m≠
(
sv
);

245 i‡(
ùå
->
sfi_lökcou¡
 == 0) {

246 
ªsu…
 = 
	`sfs_ôrunc
(
sv
, 0);

247 i‡(
ªsu…
) {

248 
	`sfs_döode_u∆ﬂd
(
sv
);

249 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

250 
	`lock_ªÀa£
(
sv
->
sv_lock
);

251 i‡(
buf„rs_√eded
) {

252 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

254  
ªsu…
;

256 
	`sfs_döode_u∆ﬂd
(
sv
);

258 
	`buf„r_dr›
(&
sfs
->
sfs_absfs
, 
sv
->
sv_öo
, 
SFS_BLOCKSIZE
);

259 
	`sfs_b‰ì
(
sfs
, 
sv
->
sv_öo
);

262 
	`sfs_döode_u∆ﬂd
(
sv
);

265 i‡(
buf„rs_√eded
) {

266 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

270 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

271 
ix
 = 
num
;

272 
i
=0; i<
num
; i++) {

273 
vnode
 *
v2
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

274 
sfs_vnode
 *
sv2
 = 
v2
->
vn_d©a
;

275 i‡(
sv2
 =
sv
) {

276 
ix
 = 
i
;

280 i‡(
ix
 =
num
) {

281 
	`∑nic
("sfs: %s:Ñeclaim vnode %uÇot in vnodeÖool\n",

282 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
sv
->
sv_öo
);

284 
	`vnodóºay_ªmove
(
sfs
->
sfs_vnodes
, 
ix
);

286 
	`vnode_˛ónup
(&
sv
->
sv_absvn
);

288 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

289 
	`lock_ªÀa£
(
sv
->
sv_lock
);

291 
	`sfs_vnode_de°roy
(
sv
);

295 
	}
}

308 
	$sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

309 
sfs_vnode
 **
ªt
)

311 
vnode
 *
v
;

312 
sfs_vnode
 *
sv
;

313 
buf
 *
döobuf
;

314 
sfs_döode
 *
döo
;

315 c⁄° 
vnode_›s
 *
›s
;

316 
i
, 
num
;

317 
ªsu…
;

320 
	`lock_acquúe
(
sfs
->
sfs_v∆ock
);

323 
num
 = 
	`vnodóºay_num
(
sfs
->
sfs_vnodes
);

326 
i
=0; i<
num
; i++) {

327 
v
 = 
	`vnodóºay_gë
(
sfs
->
sfs_vnodes
, 
i
);

328 
sv
 = 
v
->
vn_d©a
;

331 i‡(!
	`sfs_bu£d
(
sfs
, 
sv
->
sv_öo
)) {

332 
	`∑nic
("sfs: %s: Found inode %u in unallocated block\n",

333 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
sv
->
sv_öo
);

336 i‡(
sv
->
sv_öo
==
öo
) {

340 
	`KASSERT
(
f‹˚ty≥
==
SFS_TYPE_INVAL
);

342 
	`VOP_INCREF
(&
sv
->
sv_absvn
);

343 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

345 *
ªt
 = 
sv
;

353 
sv
 = 
NULL
;

356 i‡(!
	`sfs_bu£d
(
sfs
, 
öo
)) {

357 
	`∑nic
("sfs: %s: TriedÅoÜoad inode %u from "

358 "u«Œoˇãd block\n", 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
öo
);

368 
ªsu…
 = 
	`buf„r_ªad
(&
sfs
->
sfs_absfs
, 
öo
, 
SFS_BLOCKSIZE
, &
döobuf
);

369 i‡(
ªsu…
) {

370 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

371  
ªsu…
;

373 
döo
 = 
	`buf„r_m≠
(
döobuf
);

380 i‡(
f‹˚ty≥
 !
SFS_TYPE_INVAL
) {

381 
	`KASSERT
(
döo
->
sfi_ty≥
 =
SFS_TYPE_INVAL
);

382 
döo
->
sfi_ty≥
 = 
f‹˚ty≥
;

383 
	`buf„r_m¨k_dúty
(
döobuf
);

390 
döo
->
sfi_ty≥
) {

391 
SFS_TYPE_FILE
:

392 
›s
 = &
sfs_fûe›s
;

394 
SFS_TYPE_DIR
:

395 
›s
 = &
sfs_dú›s
;

398 
	`∑nic
("sfs: %s:Üoadvnode: Invalid inodeÅype "

399 "(öodê%u,Åy≥ %u)\n", 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

400 
öo
, 
döo
->
sfi_ty≥
);

411 
sv
 = 
	`sfs_vnode_¸óã
(
öo
, 
döo
->
sfi_ty≥
);

412 i‡(
sv
==
NULL
) {

413 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

414  
ENOMEM
;

417 
	`buf„r_ªÀa£
(
döobuf
);

420 
ªsu…
 = 
	`vnode_öô
(&
sv
->
sv_absvn
, 
›s
, &
sfs
->
sfs_absfs
, sv);

421 i‡(
ªsu…
) {

422 
	`sfs_vnode_de°roy
(
sv
);

423 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

424  
ªsu…
;

428 
ªsu…
 = 
	`vnodóºay_add
(
sfs
->
sfs_vnodes
, &
sv
->
sv_absvn
, 
NULL
);

429 i‡(
ªsu…
) {

430 
	`vnode_˛ónup
(&
sv
->
sv_absvn
);

431 
	`sfs_vnode_de°roy
(
sv
);

432 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

433  
ªsu…
;

435 
	`lock_ªÀa£
(
sfs
->
sfs_v∆ock
);

438 *
ªt
 = 
sv
;

440 
	}
}

455 
	$sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
)

457 
uöt32_t
 
öo
;

458 
sfs_döode
 *
döo
;

459 
ªsu…
;

466 
ªsu…
 = 
	`sfs_bÆloc
(
sfs
, &
öo
, 
NULL
);

467 i‡(
ªsu…
) {

468  
ªsu…
;

475 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
ty≥
, 
ªt
);

476 i‡(
ªsu…
) {

477 
	`buf„r_dr›
(&
sfs
->
sfs_absfs
, 
öo
, 
SFS_BLOCKSIZE
);

478 
	`sfs_b‰ì
(
sfs
, 
öo
);

479  
ªsu…
;

483 
	`lock_acquúe
((*
ªt
)->
sv_lock
);

484 
ªsu…
 = 
	`sfs_döode_lﬂd
(*
ªt
);

485 i‡(
ªsu…
) {

486 
	`lock_ªÀa£
((*
ªt
)->
sv_lock
);

488 
	`VOP_DECREF
(&(*
ªt
)->
sv_absvn
);

489  
ªsu…
;

493 
döo
 = 
	`sfs_döode_m≠
(*
ªt
);

494 
	`KASSERT
(
döo
->
sfi_lökcou¡
 == 0);

496  
ªsu…
;

497 
	}
}

506 
	$sfs_gëroŸ
(
fs
 *fs, 
vnode
 **
ªt
)

508 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

509 
sfs_vnode
 *
sv
;

510 
ªsu…
;

512 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

514 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
SFS_ROOTDIR_INO
, 
SFS_TYPE_INVAL
, &
sv
);

515 i‡(
ªsu…
) {

516 
	`k¥ötf
("sfs: %s: getroot: CannotÜoadÑoot vnode\n",

517 
sfs
->
sfs_sb
.
sb_vﬁ«me
);

518 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

519  
ªsu…
;

522 i‡(
sv
->
sv_ty≥
 !
SFS_TYPE_DIR
) {

523 
	`k¥ötf
("sfs: %s: getroot:Çot directory (type %u)\n",

524 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
sv
->
sv_ty≥
);

525 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

526  
EINVAL
;

529 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

531 *
ªt
 = &
sv
->
sv_absvn
;

533 
	}
}

	@fs/sfs/sfs_io.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<synch.h
>

40 
	~<vfs.h
>

41 
	~<buf.h
>

42 
	~<devi˚.h
>

43 
	~<sfs.h
>

44 
	~"sf•riv©e.h
"

62 
	$sfs_rwblock
(
sfs_fs
 *
sfs
, 
uio
 *uio)

64 
ªsu…
;

65 
åõs
=0;

67 
	`DEBUG
(
DB_SFS
, "sfs: %s %llu\n",

68 
uio
->
uio_rw
 =
UIO_READ
 ? "read" : "write",

69 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

71 
ªåy
:

72 
ªsu…
 = 
	`DEVOP_IO
(
sfs
->
sfs_devi˚
, 
uio
);

73 i‡(
ªsu…
 =
EINVAL
) {

79 
	`∑nic
("sfs: %s: DEVOP_IOÑeturned EINVAL\n",

80 
sfs
->
sfs_sb
.
sb_vﬁ«me
);

82 i‡(
ªsu…
 =
EIO
) {

83 i‡(
åõs
 == 0) {

84 
åõs
++;

85 
	`k¥ötf
("sfs: %s: block %llu I/OÉrror,Ñetrying\n",

86 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

87 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
);

88 
ªåy
;

90 i‡(
åõs
 < 10) {

91 
åõs
++;

92 
ªåy
;

95 
	`k¥ötf
("sfs: %s: block %llu I/OÉrror, giving up "

97 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

98 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
, 
åõs
);

101  
ªsu…
;

102 
	}
}

108 
	$sfs_ªadblock
(
fs
 *fs, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
)

110 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

111 
iovec
 
iov
;

112 
uio
 
ku
;

114 
	`KASSERT
(
Àn
 =
SFS_BLOCKSIZE
);

116 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_READ
);

117  
	`sfs_rwblock
(
sfs
, &
ku
);

118 
	}
}

124 
	$sfs_wrôeblock
(
fs
 *fs, 
daddr_t
 
block
, *
fsbufd©a
,

125 *
d©a
, 
size_t
 
Àn
)

127 
sfs_fs
 *
sfs
 = 
fs
->
fs_d©a
;

128 
iovec
 
iov
;

129 
uio
 
ku
;

130 
boﬁ
 
isjou∫Æ
;

131 
ªsu…
;

133 ()
fsbufd©a
;

135 
	`KASSERT
(
Àn
 =
SFS_BLOCKSIZE
);

137 
isjou∫Æ
 = 
	`sfs_block_is_jou∫Æ
(
sfs
, 
block
);

139 i‡(
isjou∫Æ
) {

158 
ªsu…
 = 
	`sfs_jphys_Êushf‹jou∫Æblock
(
sfs
, 
block
);

159 i‡(
ªsu…
) {

160  
ªsu…
;

164 
	`SFSUIO
(&
iov
, &
ku
, 
d©a
, 
block
, 
UIO_WRITE
);

165 
ªsu…
 = 
	`sfs_rwblock
(
sfs
, &
ku
);

166 i‡(
ªsu…
) {

167  
ªsu…
;

170 i‡(
isjou∫Æ
) {

171 
	`sfs_wrŸe_jou∫Æ_block
(
sfs
, 
block
);

175 
	}
}

195 
	$sfs_∑πülio
(
sfs_vnode
 *
sv
, 
uio
 *uio,

196 
uöt32_t
 
skù°¨t
, uöt32_à
Àn
)

198 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

199 
buf
 *
iobuf„r
;

200 *
i›å
;

201 
daddr_t
 
diskblock
;

202 
uöt32_t
 
fûeblock
;

203 
ªsu…
;

206 
boﬁ
 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

208 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

209 
	`KASSERT
(
skù°¨t
 + 
Àn
 <
SFS_BLOCKSIZE
);

212 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

215 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

216 i‡(
ªsu…
) {

217  
ªsu…
;

220 i‡(
diskblock
 == 0) {

227 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

228  
	`uiomovezîos
(
Àn
, 
uio
);

234 
ªsu…
 = 
	`buf„r_ªad
(&
sfs
->
sfs_absfs
, 
diskblock
, 
SFS_BLOCKSIZE
,

235 &
iobuf„r
);

236 i‡(
ªsu…
) {

237  
ªsu…
;

244 
i›å
 = 
	`buf„r_m≠
(
iobuf„r
);

245 
ªsu…
 = 
	`uiomove
(
i›å
+
skù°¨t
, 
Àn
, 
uio
);

246 i‡(
ªsu…
) {

247 
	`buf„r_ªÀa£
(
iobuf„r
);

248  
ªsu…
;

254 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

255 
	`buf„r_m¨k_dúty
(
iobuf„r
);

258 
	`buf„r_ªÀa£
(
iobuf„r
);

260 
	}
}

271 
	$sfs_blockio
(
sfs_vnode
 *
sv
, 
uio
 *uio)

273 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

274 
buf
 *
iobuf
;

275 *
i›å
;

276 
daddr_t
 
diskblock
;

277 
uöt32_t
 
fûeblock
;

278 
ªsu…
;

279 
boﬁ
 
dﬂŒoc
 = (
uio
->
uio_rw
==
UIO_WRITE
);

281 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

284 
fûeblock
 = 
uio
->
uio_off£t
 / 
SFS_BLOCKSIZE
;

287 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
fûeblock
, 
dﬂŒoc
, &
diskblock
);

288 i‡(
ªsu…
) {

289  
ªsu…
;

292 i‡(
diskblock
 == 0) {

299 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

300  
	`uiomovezîos
(
SFS_BLOCKSIZE
, 
uio
);

303 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

304 
ªsu…
 = 
	`buf„r_ªad
(&
sfs
->
sfs_absfs
, 
diskblock
, 
SFS_BLOCKSIZE
,

305 &
iobuf
);

308 
ªsu…
 = 
	`buf„r_gë
(&
sfs
->
sfs_absfs
, 
diskblock
, 
SFS_BLOCKSIZE
,

309 &
iobuf
);

311 i‡(
ªsu…
) {

312  
ªsu…
;

318 
i›å
 = 
	`buf„r_m≠
(
iobuf
);

319 
ªsu…
 = 
	`uiomove
(
i›å
, 
SFS_BLOCKSIZE
, 
uio
);

320 i‡(
ªsu…
) {

321 
	`buf„r_ªÀa£
(
iobuf
);

322  
ªsu…
;

325 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

326 
	`buf„r_m¨k_vÆid
(
iobuf
);

327 
	`buf„r_m¨k_dúty
(
iobuf
);

330 
	`buf„r_ªÀa£
(
iobuf
);

332 
	}
}

342 
	$sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio)

344 
uöt32_t
 
blkoff
;

345 
uöt32_t
 
nblocks
, 
i
;

346 
ªsu…
 = 0;

347 
uöt32_t
 
‹igªsid
, 
exå¨esid
 = 0;

348 
sfs_döode
 *
öodïå
;

350 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

352 
‹igªsid
 = 
uio
->
uio_ªsid
;

354 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

355 i‡(
ªsu…
) {

356  
ªsu…
;

358 
öodïå
 = 
	`sfs_döode_m≠
(
sv
);

365 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

366 
off_t
 
size
, 
ídpos
;

368 
size
 = 
öodïå
->
sfi_size
;

369 
ídpos
 = 
uio
->
uio_off£t
 + uio->
uio_ªsid
;

371 i‡(
uio
->
uio_off£t
 >
size
) {

373 
	`sfs_döode_u∆ﬂd
(
sv
);

377 i‡(
ídpos
 > 
size
) {

378 
exå¨esid
 = 
ídpos
 - 
size
;

379 
	`KASSERT
(
uio
->
uio_ªsid
 > 
exå¨esid
);

380 
uio
->
uio_ªsid
 -
exå¨esid
;

387 
blkoff
 = 
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
;

388 i‡(
blkoff
 != 0) {

390 
uöt32_t
 
skù
 = 
blkoff
;

393 
uöt32_t
 
Àn
 = 
SFS_BLOCKSIZE
 - 
blkoff
;

396 i‡(
Àn
 > 
uio
->
uio_ªsid
) {

397 
Àn
 = 
uio
->
uio_ªsid
;

401 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 
skù
, 
Àn
);

402 i‡(
ªsu…
) {

403 
out
;

408 i‡(
uio
->
uio_ªsid
==0) {

409 
out
;

415 
	`KASSERT
(
uio
->
uio_off£t
 % 
SFS_BLOCKSIZE
 == 0);

416 
nblocks
 = 
uio
->
uio_ªsid
 / 
SFS_BLOCKSIZE
;

417 
i
=0; i<
nblocks
; i++) {

418 
ªsu…
 = 
	`sfs_blockio
(
sv
, 
uio
);

419 i‡(
ªsu…
) {

420 
out
;

427 
	`KASSERT
(
uio
->
uio_ªsid
 < 
SFS_BLOCKSIZE
);

429 i‡(
uio
->
uio_ªsid
 > 0) {

430 
ªsu…
 = 
	`sfs_∑πülio
(
sv
, 
uio
, 0, uio->
uio_ªsid
);

431 i‡(
ªsu…
) {

432 
out
;

436 
out
:

439 i‡(
uio
->
uio_ªsid
 !
‹igªsid
 &&

440 
uio
->
uio_rw
 =
UIO_WRITE
 &&

441 
uio
->
uio_off£t
 > (
off_t
)
öodïå
->
sfi_size
) {

442 
öodïå
->
sfi_size
 = 
uio
->
uio_off£t
;

443 
	`sfs_döode_m¨k_dúty
(
sv
);

445 
	`sfs_döode_u∆ﬂd
(
sv
);

448 
uio
->
uio_ªsid
 +
exå¨esid
;

451  
ªsu…
;

452 
	}
}

469 
	$sfs_mëaio
(
sfs_vnode
 *
sv
, 
off_t
 
a˘uÆpos
, *
d©a
, 
size_t
 
Àn
,

470 
uio_rw
 
rw
)

472 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

473 
sfs_döode
 *
döo
;

474 
off_t
 
ídpos
;

475 
uöt32_t
 
vnblock
;

476 
uöt32_t
 
blockoff£t
;

477 
daddr_t
 
diskblock
;

478 
buf
 *
iobuf
;

479 *
i›å
;

480 
boﬁ
 
dﬂŒoc
;

481 
ªsu…
;

483 
	`KASSERT
(
	`lock_do_i_hﬁd
(
sv
->
sv_lock
));

486 
vnblock
 = 
a˘uÆpos
 / 
SFS_BLOCKSIZE
;

487 
blockoff£t
 = 
a˘uÆpos
 % 
SFS_BLOCKSIZE
;

489 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

490 i‡(
ªsu…
) {

491  
ªsu…
;

493 
döo
 = 
	`sfs_döode_m≠
(
sv
);

496 
dﬂŒoc
 = (
rw
 =
UIO_WRITE
);

497 
ªsu…
 = 
	`sfs_bm≠
(
sv
, 
vnblock
, 
dﬂŒoc
, &
diskblock
);

498 i‡(
ªsu…
) {

499 
	`sfs_döode_u∆ﬂd
(
sv
);

500  
ªsu…
;

503 i‡(
diskblock
 == 0) {

505 
	`KASSERT
(
rw
 =
UIO_READ
);

508 
	`bzîo
(
d©a
, 
Àn
);

509 
	`sfs_döode_u∆ﬂd
(
sv
);

514 
ªsu…
 = 
	`buf„r_ªad
(&
sfs
->
sfs_absfs
, 
diskblock
, 
SFS_BLOCKSIZE
,

515 &
iobuf
);

516 i‡(
ªsu…
) {

521 
	`sfs_döode_u∆ﬂd
(
sv
);

522  
ªsu…
;

525 
i›å
 = 
	`buf„r_m≠
(
iobuf
);

526 i‡(
rw
 =
UIO_READ
) {

528 
	`mem˝y
(
d©a
, 
i›å
 + 
blockoff£t
, 
Àn
);

532 
	`mem˝y
(
i›å
 + 
blockoff£t
, 
d©a
, 
Àn
);

533 
	`buf„r_m¨k_dúty
(
iobuf
);

536 
ídpos
 = 
a˘uÆpos
 + 
Àn
;

537 i‡(
ídpos
 > (
off_t
)
döo
->
sfi_size
) {

538 
döo
->
sfi_size
 = 
ídpos
;

539 
	`sfs_döode_m¨k_dúty
(
sv
);

543 
	`buf„r_ªÀa£
(
iobuf
);

544 
	`sfs_döode_u∆ﬂd
(
sv
);

548 
	}
}

	@fs/sfs/sfs_jphys.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<wch™.h
>

34 
	~<synch.h
>

35 
	~<¥oc.h
>

36 
	~<cuºít.h
>

37 
	~<buf.h
>

38 
	~<sfs.h
>

39 
	~"sf•riv©e.h
"

55 
	ssfs_jposôi⁄
 {

56 
uöt32_t
 
	mjp_jblock
;

57 
uöt32_t
 
	mjp_blockoff£t
;

84 
	ssfs_jphys
 {

85 
boﬁ
 
	mjp_phy§ecovîed
;

86 
boﬁ
 
	mjp_ªadîmode
;

87 
boﬁ
 
	mjp_wrôîmode
;

89 
lock
 *
	mjp_lock
;

91 
buf
 *
	mjp_hódbuf
;

92 
buf
 *
	mjp_√xtbuf
;

93 
thªad
 *
	mjp_gëtög√xt
;

94 
cv
 *
	mjp_√xtcv
;

96 
uöt32_t
 
	mjp_hódjblock
;

97 
	mjp_hódbyã
;

98 
sfs_l¢_t
 
	mjp_hódfú°l¢
;

100 
sfs_l¢_t
 
	mjp_√xé¢
;

102 
uöt32_t
 
	mjp_odomëî
;

104 
•ölock
 
	mjp_l¢m≠lock
;

105 
sfs_l¢_t
 *
	mjp_fú°l¢s
;

106 
uöt32_t
 
	mjp_ﬁde°jblock
;

107 
uöt32_t
 
	mjp_memèûjblock
;

108 
sfs_l¢_t
 
	mjp_memèûl¢
;

111 
sfs_jposôi⁄
 
	mjp_ªcov_èûpos
;

112 
sfs_jposôi⁄
 
	mjp_ªcov_hódpos
;

121 
boﬁ


122 
	$sfs_block_is_jou∫Æ
(
sfs_fs
 *
sfs
, 
uöt32_t
 
block
)

124 i‡(
block
 >
sfs
->
sfs_sb
.
sb_jou∫Æ°¨t
 &&

125 
block
 < 
sfs
->
sfs_sb
.
sb_jou∫Æ°¨t
 +

126 
sfs
->
sfs_sb
.
sb_jou∫Æblocks
) {

127  
åue
;

129  
Ál£
;

130 
	}
}

135 #ifde‡
SFS_VERBOSE_RECOVERY


138 
	$sfs_jphys_ª˙ame
(
˛ass
, 
ty≥
)

140 i‡(
˛ass
 =
SFS_JPHYS_CONTAINER
) {

141 
ty≥
) {

142 
SFS_JPHYS_INVALID
:  "<invalid>";

143 
SFS_JPHYS_PAD
:  "pad";

144 
SFS_JPHYS_TRIM
:  "trim";

149  
	`sfs_jphys_˛õ¡_ª˙ame
(
ty≥
);

151 
	}
}

158 
boﬁ


159 
	$sfs_jposôi⁄_eq
(c⁄° 
sfs_jposôi⁄
 *
a
, c⁄° sfs_jposôi⁄ *
b
)

161  
a
->
jp_jblock
 =
b
->jp_jblock &&

162 
a
->
jp_blockoff£t
 =
b
->jp_blockoffset;

163 
	}
}

180 
	$sfs_adv™˚_jou∫Æ
(
sfs_fs
 *
sfs
)

182 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

190 
	`KASSERT
(
	`lock_do_i_hﬁd
(
jp
->
jp_lock
));

192 i‡(
jp
->
jp_hódbyã
 < 
SFS_BLOCKSIZE
) {

196 
	`KASSERT
(
jp
->
jp_hódbyã
 =
SFS_BLOCKSIZE
);

199 
	`•ölock_acquúe
(&
jp
->
jp_l¢m≠lock
);

200 
	`KASSERT
(
jp
->
jp_fú°l¢s
[jp->
jp_hódjblock
] =jp->
jp_hódfú°l¢
);

201 
	`•ölock_ªÀa£
(&
jp
->
jp_l¢m≠lock
);

204 
	`buf„r_ªÀa£
(
jp
->
jp_hódbuf
);

207 
jp
->
jp_hódjblock
++;

208 i‡(
jp
->
jp_hódjblock
 =
sfs
->
sfs_sb
.
sb_jou∫Æblocks
) {

209 
jp
->
jp_hódjblock
 = 0;

211 
	`KASSERT
(
jp
->
jp_hódjblock
 < 
sfs
->
sfs_sb
.
sb_jou∫Æblocks
);

212 
jp
->
jp_hódbyã
 = 0;

213 
jp
->
jp_hódfú°l¢
 = jp->
jp_√xé¢
;

227 
	`KASSERT
(
jp
->
jp_√xtbuf
 !
NULL
);

228 
	`KASSERT
(
jp
->
jp_gëtög√xt
 =
NULL
);

229 
jp
->
jp_hódbuf
 = jp->
jp_√xtbuf
;

230 
jp
->
jp_√xtbuf
 = 
NULL
;

231 
jp
->
jp_gëtög√xt
 = 
cuπhªad
;

232 
	`buf„r_m¨k_vÆid
(
jp
->
jp_hódbuf
);

235 
	`•ölock_acquúe
(&
jp
->
jp_l¢m≠lock
);

236 i‡(
jp
->
jp_hódjblock
 =jp->
jp_memèûjblock
) {

237 
	`∑nic
("sfs: %s: journal head overran journalÅail\n",

238 
sfs
->
sfs_sb
.
sb_vﬁ«me
);

240 
jp
->
jp_fú°l¢s
[jp->
jp_hódjblock
] = jp->
jp_hódfú°l¢
;

241 
	`•ölock_ªÀa£
(&
jp
->
jp_l¢m≠lock
);

242 
	}
}

271 
	$sfs_gë√xtbuf
(
sfs_fs
 *
sfs
)

273 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

274 
uöt32_t
 
√xtjblock
, 
√xtdiskblock
;

275 
buf
 *buf;

276 
ªsu…
;

278 
√xtjblock
 = 
jp
->
jp_hódjblock
 + 1;

279 i‡(
√xtjblock
 =
sfs
->
sfs_sb
.
sb_jou∫Æblocks
) {

280 
√xtjblock
 = 0;

282 
√xtdiskblock
 = 
√xtjblock
 + 
sfs
->
sfs_sb
.
sb_jou∫Æ°¨t
;

283 
	`lock_ªÀa£
(
jp
->
jp_lock
);

285 
ªsu…
 = 
	`buf„r_gë_fsm™aged
(&
sfs
->
sfs_absfs
, 
√xtdiskblock
,

286 
SFS_BLOCKSIZE
, &
buf
);

287 i‡(
ªsu…
) {

311 
	`∑nic
("sfs: %s:Åurning over journal: %s\n",

312 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
	`°ªº‹
(
ªsu…
));

314 
	`buf„r_m¨k_vÆid
(
buf
);

315 
	`lock_acquúe
(
jp
->
jp_lock
);

316 
jp
->
jp_√xtbuf
 = 
buf
;

317 
jp
->
jp_gëtög√xt
 = 
NULL
;

318 
jp
->
jp_odomëî
++;

319 
	`cv_brﬂdˇ°
(
jp
->
jp_√xtcv
, jp->
jp_lock
);

320 
	}
}

327 
	$sfs_put_jou∫Æ
(
sfs_fs
 *
sfs
, 
sfs_l¢_t
 
l¢
, c⁄° *
ªc
, 
size_t
 
Àn
)

329 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

330 *
buf
;

332 
	`KASSERT
(
	`lock_do_i_hﬁd
(
jp
->
jp_lock
));

333 
	`KASSERT
(
jp
->
jp_hódbyã
 + 
Àn
 <
SFS_BLOCKSIZE
);

335 
	`KASSERT
(
l¢
 >
jp
->
jp_hódfú°l¢
);

337 
buf
 = 
	`buf„r_m≠
(
jp
->
jp_hódbuf
);

338 
	`mem˝y
(
buf
 + 
jp
->
jp_hódbyã
, 
ªc
, 
Àn
);

339 
	`buf„r_m¨k_dúty
(
jp
->
jp_hódbuf
);

340 
jp
->
jp_hódbyã
 +
Àn
;

342 
	`sfs_adv™˚_jou∫Æ
(
sfs
);

343 
	}
}

350 
	$sfs_∑d_jou∫Æ
(
sfs_fs
 *
sfs
)

352 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

353 
sfs_jphys_hódî
 
hdr
;

354 
sfs_l¢_t
 
l¢
;

355 
size_t
 
Àn
;

357 
	`KASSERT
(
	`lock_do_i_hﬁd
(
jp
->
jp_lock
));

358 
	`KASSERT
(
jp
->
jp_hódbyã
 < 
SFS_BLOCKSIZE
);

360 
Àn
 = 
SFS_BLOCKSIZE
 - 
jp
->
jp_hódbyã
;

361 i‡(
Àn
 >(
hdr
)) {

362 
l¢
 = 
jp
->
jp_√xé¢
++;

363 
hdr
.
jh_c⁄öfo
 = 
	`SFS_MKCONINFO
(
SFS_JPHYS_CONTAINER
,

364 
SFS_JPHYS_PAD
, 
Àn
, 
l¢
);

365 
	`sfs_put_jou∫Æ
(
sfs
, 
l¢
, &
hdr
, (hdr));

366 
Àn
 -(
hdr
);

372 
jp
->
jp_hódbyã
 +
Àn
;

373 
	`sfs_adv™˚_jou∫Æ
(
sfs
);

374 
	}
}

395 
sfs_l¢_t


396 
sfs_jphys_wrôe_öã∫Æ
(
sfs_fs
 *
sfs
,

397 (*
ˇŒback
)(
sfs_fs
 *
sfs
,

398 
sfs_l¢_t
 
√wl¢
,

399 
sfs_jphys_wrôec⁄ãxt
 *
˘x
),

400 
sfs_jphys_wrôec⁄ãxt
 *
˘x
,

401 
˛ass
, 
ty≥
,

402 c⁄° *
ªc
, 
size_t
 
Àn
)

404 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

405 
sfs_jphys_hódî
 
hdr
;

406 
sfs_l¢_t
 
l¢
;

407 
size_t
 
tŸÆÀn
;

408 
boﬁ
 
Æªady_gëtög√xt
;

410 
	`KASSERT
(
Àn
 % 2 == 0);

413 
tŸÆÀn
 = 
Àn
 + (
hdr
);

416 
	`lock_acquúe
(
jp
->
jp_lock
);

427 
Æªady_gëtög√xt
 = 
jp
->
jp_√xtbuf
 =
NULL
 &&

428 
jp
->
jp_gëtög√xt
 =
cuπhªad
;

435 i‡(
Æªady_gëtög√xt
 =
Ál£
) {

436 
jp
->
jp_√xtbuf
 =
NULL
) {

437 
	`KASSERT
(
jp
->
jp_gëtög√xt
 !
cuπhªad
);

438 
	`cv_waô
(
jp
->
jp_√xtcv
, jp->
jp_lock
);

443 i‡(
jp
->
jp_hódbyã
 + 
tŸÆÀn
 > 
SFS_BLOCKSIZE
) {

444 i‡(
Æªady_gëtög√xt
) {

446 
	`∑nic
("sfs: %s: Journal head block full while "

448 
sfs
->
sfs_sb
.
sb_vﬁ«me
);

451 
	`sfs_∑d_jou∫Æ
(
sfs
);

457 
	`KASSERT
(
jp
->
jp_√xtbuf
 =
NULL
 &&

458 
jp
->
jp_gëtög√xt
 =
cuπhªad
);

478 
	`sfs_gë√xtbuf
(
sfs
);

483 
	`KASSERT
(
˛ass
 =
SFS_JPHYS_CONTAINER
 || cœs†=
SFS_JPHYS_CLIENT
);

484 
	`KASSERT
(
ty≥
 < 128);

485 
	`KASSERT
(
tŸÆÀn
 <
SFS_BLOCKSIZE
);

486 
	`KASSERT
(
tŸÆÀn
 % 2 == 0);

489 
l¢
 = 
jp
->
jp_√xé¢
++;

490 
hdr
.
jh_c⁄öfo
 = 
	`SFS_MKCONINFO
(
˛ass
, 
ty≥
, 
tŸÆÀn
, 
l¢
);

493 
	`sfs_put_jou∫Æ
(
sfs
, 
l¢
, &
hdr
, (hdr));

494 
	`sfs_put_jou∫Æ
(
sfs
, 
l¢
, 
ªc
, 
Àn
);

497 i‡(
ˇŒback
 !
NULL
) {

498 
	`ˇŒback
(
sfs
, 
l¢
, 
˘x
);

507 i‡(
Æªady_gëtög√xt
 =
Ál£
) {

508 i‡(
jp
->
jp_√xtbuf
 =
NULL
 &&

509 
jp
->
jp_gëtög√xt
 =
cuπhªad
) {

510 
	`sfs_gë√xtbuf
(
sfs
);

512 
	`KASSERT
(
jp
->
jp_√xtbuf
 !
NULL
);

516 
	`lock_ªÀa£
(
jp
->
jp_lock
);

519  
l¢
;

520 
	}
}

526 
sfs_l¢_t


527 
sfs_jphys_wrôe
(
sfs_fs
 *
sfs
,

528 (*
ˇŒback
)(
sfs_fs
 *
sfs
,

529 
sfs_l¢_t
 
√wl¢
,

530 
sfs_jphys_wrôec⁄ãxt
 *
˘x
),

531 
sfs_jphys_wrôec⁄ãxt
 *
˘x
,

532 
code
, c⁄° *
ªc
, 
size_t
 
Àn
)

534 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

537 
	`KASSERT
(
jp
->
jp_wrôîmode
);

539  
	`sfs_jphys_wrôe_öã∫Æ
(
sfs
, 
ˇŒback
, 
˘x
, 
SFS_JPHYS_CLIENT
,

540 
code
, 
ªc
, 
Àn
);

541 
	}
}

575 
	$sfs_jphys_Êush_u±o_jblock
(
sfs_fs
 *
sfs
, 
uöt32_t
 
ídjblock
)

577 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

578 
uöt32_t
 
myjblock
;

579 
uöt32_t
 
diskblock
;

580 
ªsu…
;

582 
	`KASSERT
(
jp
->
jp_wrôîmode
);

585 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
jp
->
jp_l¢m≠lock
));

588 
myjblock
 = 
jp
->
jp_ﬁde°jblock
;

590 i‡(
myjblock
 =
ídjblock
) {

613 i‡(
myjblock
 =
jp
->
jp_ﬁde°jblock
) {

620 
	`•ölock_ªÀa£
(&
jp
->
jp_l¢m≠lock
);

634 
diskblock
 = 
sfs
->
sfs_sb
.
sb_jou∫Æ°¨t
 + 
myjblock
;

635 
ªsu…
 = 
	`buf„r_Êush
(&
sfs
->
sfs_absfs
, 
diskblock
,

636 
SFS_BLOCKSIZE
);

637 i‡(
ªsu…
) {

639 
	`∑nic
("sfs: %s: writing journal buffer: %s\n",

640 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

641 
	`°ªº‹
(
ªsu…
));

645 
	`buf„r_dr›
(&
sfs
->
sfs_absfs
, 
diskblock
, 
SFS_BLOCKSIZE
);

648 
	`•ölock_acquúe
(&
jp
->
jp_l¢m≠lock
);

652 
myjblock
++;

653 i‡(
myjblock
 >
sfs
->
sfs_sb
.
sb_jou∫Æblocks
) {

654 
myjblock
 = 0;

657 
	}
}

690 
	$sfs_jphys_Êush
(
sfs_fs
 *
sfs
, 
sfs_l¢_t
 
l¢
)

692 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

693 
uöt32_t
 
jblock
, 
hódjblock
;

694 
sfs_l¢_t
 
hódfú°l¢
;

696 i‡(
l¢
 == 0) {

704 
	`lock_acquúe
(
jp
->
jp_lock
);

706 
	`KASSERT
(
l¢
 < 
jp
->
jp_√xé¢
);

708 i‡(
l¢
 >
jp
->
jp_hódfú°l¢
 && jp->
jp_hódbyã
 > 0) {

713 
	`sfs_∑d_jou∫Æ
(
sfs
);

714 i‡(
jp
->
jp_√xtbuf
 =
NULL
 && jp->
jp_gëtög√xt
 =
cuπhªad
){

715 
	`sfs_gë√xtbuf
(
sfs
);

724 
hódjblock
 = 
jp
->
jp_hódjblock
;

725 
hódfú°l¢
 = 
jp
->
jp_hódfú°l¢
;

726 
	`lock_ªÀa£
(
jp
->
jp_lock
);

729 
	`•ölock_acquúe
(&
jp
->
jp_l¢m≠lock
);

732 
jblock
 = 
jp
->
jp_ﬁde°jblock
;

734 i‡(
l¢
 < 
jp
->
jp_fú°l¢s
[
jblock
]) {

739 
	`KASSERT
(
jblock
 !
hódjblock
);

742 
jblock
++;

743 i‡(
jblock
 >
sfs
->
sfs_sb
.
sb_jou∫Æblocks
) {

744 
jblock
 = 0;

749 
	`sfs_jphys_Êush_u±o_jblock
(
sfs
, 
jblock
);

751 
	`KASSERT
(
l¢
 < 
hódfú°l¢
);

753 
	`•ölock_ªÀa£
(&
jp
->
jp_l¢m≠lock
);

755 
	}
}

769 
	$sfs_jphys_Êushf‹jou∫Æblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
)

771 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

772 
uöt32_t
 
jblock
;

775 
jblock
 = 
diskblock
 - 
sfs
->
sfs_sb
.
sb_jou∫Æ°¨t
;

776 
	`KASSERT
(
jblock
 < 
sfs
->
sfs_sb
.
sb_jou∫Æblocks
);

778 
	`•ölock_acquúe
(&
jp
->
jp_l¢m≠lock
);

779 
	`sfs_jphys_Êush_u±o_jblock
(
sfs
, 
jblock
);

780 
	`•ölock_ªÀa£
(&
jp
->
jp_l¢m≠lock
);

783 
	}
}

789 
	$sfs_jphys_ÊushÆl
(
sfs_fs
 *
sfs
)

791 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

792 
sfs_l¢_t
 
√xé¢
;

793 
ªsu…
;

795 
	`lock_acquúe
(
jp
->
jp_lock
);

796 
√xé¢
 = 
jp
->
jp_√xé¢
;

797 
	`lock_ªÀa£
(
jp
->
jp_lock
);

799 
ªsu…
 = 
	`sfs_jphys_Êush
(
sfs
, 
√xé¢
 - 1);

800 i‡(
ªsu…
) {

801  
ªsu…
;

805 
	}
}

814 
	$sfs_wrŸe_jou∫Æ_block
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
)

816 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

817 
uöt32_t
 
jblock
;

820 
jblock
 = 
diskblock
 - 
sfs
->
sfs_sb
.
sb_jou∫Æ°¨t
;

821 
	`KASSERT
(
jblock
 < 
sfs
->
sfs_sb
.
sb_jou∫Æblocks
);

823 
	`•ölock_acquúe
(&
jp
->
jp_l¢m≠lock
);

824 
	`KASSERT
(
jblock
 =
jp
->
jp_ﬁde°jblock
);

825 
jp
->
jp_ﬁde°jblock
++;

826 i‡(
jp
->
jp_ﬁde°jblock
 >
sfs
->
sfs_sb
.
sb_jou∫Æblocks
) {

827 
jp
->
jp_ﬁde°jblock
 = 0;

829 
	`•ölock_ªÀa£
(&
jp
->
jp_l¢m≠lock
);

830 
	}
}

842 
sfs_l¢_t


843 
	$sfs_jphys_≥ek√xé¢
(
sfs_fs
 *
sfs
)

845 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

846 
sfs_l¢_t
 
√xé¢
;

848 
	`lock_acquúe
(
jp
->
jp_lock
);

849 
√xé¢
 = 
jp
->
jp_√xé¢
;

850 
	`lock_ªÀa£
(
jp
->
jp_lock
);

852  
√xé¢
;

853 
	}
}

861 
	$sfs_jphys_åim
(
sfs_fs
 *
sfs
, 
sfs_l¢_t
 
èûl¢
)

863 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

864 
sfs_jphys_åim
 
ªc
;

865 
i
;

867 
	`KASSERT
(
jp
->
jp_wrôîmode
);

869 
ªc
.
jt_èûl¢
 = 
èûl¢
;

870 
	`sfs_jphys_wrôe_öã∫Æ
(
sfs
, 0, 
NULL
,

871 
SFS_JPHYS_CONTAINER
, 
SFS_JPHYS_TRIM
,

872 &
ªc
, (rec));

874 
	`•ölock_acquúe
(&
jp
->
jp_l¢m≠lock
);

875 
jp
->
jp_memèûl¢
 = 0;

876 
i
=0; i<
sfs
->
sfs_sb
.
sb_jou∫Æblocks
; i++) {

877 i‡(
èûl¢
 >
jp
->
jp_fú°l¢s
[
i
] &&

878 (
i
+1 =
sfs
->
sfs_sb
.
sb_jou∫Æblocks
 ||

879 
èûl¢
 < 
jp
->
jp_fú°l¢s
[
i
+1] ||

880 
jp
->
jp_fú°l¢s
[
i
] > jp->jp_firstlsns[i+1])) {

881 
jp
->
jp_memèûjblock
 = 
i
;

882 
jp
->
jp_memèûl¢
 = 
èûl¢
;

886 
	`KASSERT
(
jp
->
jp_memèûl¢
 != 0);

887 
	`•ölock_ªÀa£
(&
jp
->
jp_l¢m≠lock
);

888 
	}
}

895 
uöt32_t


896 
	$sfs_jphys_gëodomëî
(
sfs_jphys
 *
jp
)

898 
uöt32_t
 
ªt
;

900 
	`KASSERT
(
jp
->
jp_wrôîmode
);

906 
	`lock_acquúe
(
jp
->
jp_lock
);

907 
ªt
 = 
jp
->
jp_odomëî
;

908 
	`lock_ªÀa£
(
jp
->
jp_lock
);

910  
ªt
;

911 
	}
}

917 
	$sfs_jphys_˛órodomëî
(
sfs_jphys
 *
jp
)

919 
	`KASSERT
(
jp
->
jp_wrôîmode
);

921 
	`lock_acquúe
(
jp
->
jp_lock
);

922 
jp
->
jp_odomëî
 = 0;

923 
	`lock_ªÀa£
(
jp
->
jp_lock
);

924 
	}
}

959 
	ssfs_jôî
 {

961 
sfs_jposôi⁄
 
	mji_hódpos
;

962 
sfs_jposôi⁄
 
	mji_èûpos
;

965 
sfs_jposôi⁄
 
	mji_pos
;

968 
boﬁ
 
	mji_ªad
;

969 
boﬁ
 
	mji_d⁄e
;

970 
boﬁ
 
	mji_£óŒ
;

973 
buf
 *
	mji_buf
;

976 
	mji_˛ass
;

977 
	mji_ty≥
;

978 
	mji_Àn
;

979 
sfs_l¢_t
 
	mji_l¢
;

990 
sfs_jôî
 *

991 
	$sfs_jôî_¸óã
(
sfs_fs
 *
sfs
,

992 c⁄° 
sfs_jposôi⁄
 *
èûpos
,

993 c⁄° 
sfs_jposôi⁄
 *
hódpos
,

994 
boﬁ
 
£óŒ
)

996 
sfs_jôî
 *
ji
;

998 ()
sfs
;

1000 
ji
 = 
	`kmÆloc
((*ji));

1001 i‡(
ji
 =
NULL
) {

1002  
NULL
;

1005 
ji
->
ji_èûpos
 = *
èûpos
;

1006 
ji
->
ji_hódpos
 = *
hódpos
;

1009 
ji
->
ji_pos
 = *
èûpos
;

1011 
ji
->
ji_buf
 = 
NULL
;

1013 
ji
->
ji_ªad
 = 
Ál£
;

1014 
ji
->
ji_d⁄e
 = 
Ál£
;

1015 
ji
->
ji_£óŒ
 = 
£óŒ
;

1017 
ji
->
ji_˛ass
 = 
SFS_JPHYS_CONTAINER
;

1018 
ji
->
ji_ty≥
 = 
SFS_JPHYS_INVALID
;

1019 
ji
->
ji_Àn
 = 0;

1020 
ji
->
ji_l¢
 = 0;

1022  
ji
;

1023 
	}
}

1028 
boﬁ


1029 
	$sfs_jôî_d⁄e
(
sfs_jôî
 *
ji
)

1031  
ji
->
ji_d⁄e
;

1032 
	}
}

1039 
	$sfs_jôî_pos
(
sfs_jôî
 *
ji
, 
sfs_jposôi⁄
 *
jp
)

1041 *
jp
 = 
ji
->
ji_pos
;

1042 
	}
}

1049 
uöt32_t


1050 
	$sfs_jôî_jblock
(
sfs_jôî
 *
ji
)

1052  
ji
->
ji_pos
.
jp_jblock
;

1053 
	}
}

1060 
	$sfs_jôî_blockoff£t
(
sfs_jôî
 *
ji
)

1062  
ji
->
ji_pos
.
jp_blockoff£t
;

1063 
	}
}

1070 
	$sfs_jôî_˛ass
(
sfs_jôî
 *
ji
)

1072 
	`KASSERT
(!
ji
->
ji_d⁄e
);

1073 
	`KASSERT
(
ji
->
ji_ªad
);

1075  
ji
->
ji_˛ass
;

1076 
	}
}

1082 
	$sfs_jôî_ty≥
(
sfs_jôî
 *
ji
)

1084 
	`KASSERT
(!
ji
->
ji_d⁄e
);

1085 
	`KASSERT
(
ji
->
ji_ªad
);

1087  
ji
->
ji_ty≥
;

1088 
	}
}

1094 
sfs_l¢_t


1095 
	$sfs_jôî_l¢
(
sfs_jôî
 *
ji
)

1097 
	`KASSERT
(!
ji
->
ji_d⁄e
);

1098 
	`KASSERT
(
ji
->
ji_ªad
);

1100  
ji
->
ji_l¢
;

1101 
	}
}

1107 
	$sfs_jôî_ªc
(
sfs_jôî
 *
ji
, 
size_t
 *
Àn_ªt
)

1109 
off£t
;

1111 
	`KASSERT
(!
ji
->
ji_d⁄e
);

1112 
	`KASSERT
(
ji
->
ji_ªad
);

1113 
	`KASSERT
(
ji
->
ji_buf
 !
NULL
);

1114 
	`KASSERT
(
ji
->
ji_Àn
 >(
sfs_jphys_hódî
));

1116 *
Àn_ªt
 = 
ji
->
ji_Àn
 - (
sfs_jphys_hódî
);

1117 
off£t
 = 
ji
->
ji_pos
.
jp_blockoff£t
 + (
sfs_jphys_hódî
);

1118  (*)
	`buf„r_m≠
(
ji
->
ji_buf
Ë+ 
off£t
;

1119 
	}
}

1127 
	$sfs_jôî_gëbuf
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1129 
ªsu…
;

1131 i‡(
ji
->
ji_buf
 !
NULL
) {

1134 
ªsu…
 = 
	`buf„r_ªad
(&
sfs
->
sfs_absfs
,

1135 
sfs
->
sfs_sb
.
sb_jou∫Æ°¨t
 +

1136 
ji
->
ji_pos
.
jp_jblock
,

1137 
SFS_BLOCKSIZE
, &
ji
->
ji_buf
);

1138 i‡(
ªsu…
) {

1139 
	`SAY
("sfs_jiter_getbuf: buffer_read: %s\n",

1140 
	`°ªº‹
(
ªsu…
));

1142  
ªsu…
;

1143 
	}
}

1150 
	$sfs_jôî_ªad
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1152 *
±r
;

1153 
sfs_jphys_hódî
 
jh
;

1154 
ªsu…
;

1156 
	`KASSERT
(!
ji
->
ji_d⁄e
);

1158 i‡(
ji
->
ji_ªad
) {

1161 
ªsu…
 = 
	`sfs_jôî_gëbuf
(
sfs
, 
ji
);

1162 i‡(
ªsu…
) {

1163  
ªsu…
;

1165 
±r
 = 
	`buf„r_m≠
(
ji
->
ji_buf
);

1166 
	`KASSERT
(
ji
->
ji_pos
.
jp_blockoff£t
 + (
jh
Ë<
SFS_BLOCKSIZE
);

1167 
	`mem˝y
(&
jh
, 
±r
 + 
ji
->
ji_pos
.
jp_blockoff£t
, (jh));

1168 i‡(
jh
.
jh_c⁄öfo
 == 0) {

1169 
ji
->
ji_˛ass
 = 
SFS_JPHYS_CONTAINER
;

1170 
ji
->
ji_ty≥
 = 
SFS_JPHYS_PAD
;

1171 
ji
->
ji_Àn
 = (
jh
);

1172 
ji
->
ji_l¢
 = 0;

1175 
ji
->
ji_˛ass
 = 
	`SFS_CONINFO_CLASS
(
jh
.
jh_c⁄öfo
);

1176 
ji
->
ji_ty≥
 = 
	`SFS_CONINFO_TYPE
(
jh
.
jh_c⁄öfo
);

1177 
ji
->
ji_Àn
 = 
	`SFS_CONINFO_LEN
(
jh
.
jh_c⁄öfo
);

1178 
ji
->
ji_l¢
 = 
	`SFS_CONINFO_LSN
(
jh
.
jh_c⁄öfo
);

1180 
ji
->
ji_ªad
 = 
åue
;

1182 i‡(
ji
->
ji_Àn
 < (
jh
)) {

1183 
	`k¥ötf
("sfs: %s:Ñunt journalÑecord,Üength %u, "

1185 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
ji
->
ji_Àn
,

1186 
ji
->
ji_pos
.
jp_jblock
, ji->ji_pos.
jp_blockoff£t
);

1187  
EFTYPE
;

1190 i‡(
ji
->
ji_pos
.
jp_blockoff£t
 + ji->
ji_Àn
 > 
SFS_BLOCKSIZE
) {

1191 
	`k¥ötf
("sfs: %s: journalÑecordÑuns offÉnd of block, "

1193 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

1194 
ji
->
ji_pos
.
jp_jblock
, ji->ji_pos.
jp_blockoff£t
);

1195  
EFTYPE
;

1198 i‡(
ji
->
ji_˛ass
 =
SFS_JPHYS_CONTAINER
 &&

1199 
ji
->
ji_ty≥
 =
SFS_JPHYS_INVALID
) {

1200 
	`k¥ötf
("sfs: %s: invalidÉntry in journal, "

1202 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

1203 
ji
->
ji_pos
.
jp_jblock
, ji->ji_pos.
jp_blockoff£t
);

1204  
EFTYPE
;

1208 
	}
}

1220 
	$sfs_jôî_⁄e_√xt
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1222 
sfs_jposôi⁄
 
pos
;

1223 
boﬁ
 
ch™gebuf
;

1224 
ªsu…
;

1226 
	`KASSERT
(
ji
->
ji_ªad
);

1227 
pos
 = 
ji
->
ji_pos
;

1228 
ch™gebuf
 = 
Ál£
;

1232 
pos
.
jp_blockoff£t
 +
ji
->
ji_Àn
;

1233 
	`KASSERT
(
pos
.
jp_blockoff£t
 <
SFS_BLOCKSIZE
);

1235 i‡(
pos
.
jp_blockoff£t
 + (
sfs_jphys_hódî
) >

1236 
SFS_BLOCKSIZE
) {

1238 
pos
.
jp_blockoff£t
 = 
SFS_BLOCKSIZE
;

1241 i‡(
pos
.
jp_blockoff£t
 =
SFS_BLOCKSIZE
) {

1242 
pos
.
jp_blockoff£t
 = 0;

1243 
pos
.
jp_jblock
++;

1244 i‡(
pos
.
jp_jblock
 =
sfs
->
sfs_sb
.
sb_jou∫Æblocks
) {

1245 
pos
.
jp_jblock
 = 0;

1247 
ch™gebuf
 = 
åue
;

1251 i‡(
	`sfs_jposôi⁄_eq
(&
pos
, &
ji
->
ji_hódpos
)) {

1252 
ji
->
ji_d⁄e
 = 
åue
;

1257 
ji
->
ji_ªad
 = 
Ál£
;

1258 
ji
->
ji_pos
 = 
pos
;

1259 i‡(
ch™gebuf
 && 
ji
->
ji_buf
 !
NULL
) {

1260 
	`buf„r_ªÀa£
(
ji
->
ji_buf
);

1261 
ji
->
ji_buf
 = 
NULL
;

1265 
ji
->
ji_d⁄e
 = 
Ál£
;

1268 
ªsu…
 = 
	`sfs_jôî_ªad
(
sfs
, 
ji
);

1269 i‡(
ªsu…
) {

1270  
ªsu…
;

1274 
	}
}

1280 
	$sfs_jôî_√xt
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1282 
ªsu…
;

1285 
ªsu…
 = 
	`sfs_jôî_⁄e_√xt
(
sfs
, 
ji
);

1286 i‡(
ªsu…
) {

1287  
ªsu…
;

1289 } !
ji
->
ji_d⁄e
 &&

1290 !
ji
->
ji_£óŒ
 && ji->
ji_˛ass
 =
SFS_JPHYS_CONTAINER
);

1292 
	}
}

1311 
	$sfs_jôî_⁄e_¥ev
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1313 *
±r
;

1314 
sfs_jphys_hódî
 
jh
;

1315 
off£t
, 
¥evoff£t
;

1316 
size_t
 
Àn
;

1317 
ªsu…
;

1319 
	`KASSERT
(
ji
->
ji_pos
.
jp_blockoff£t
 < 
SFS_BLOCKSIZE
);

1322 
¥evoff£t
 = 0;

1324 i‡(
ji
->
ji_pos
.
jp_blockoff£t
 == 0) {

1325 
ji
->
ji_pos
.
jp_blockoff£t
 = 
SFS_BLOCKSIZE
;

1326 i‡(
ji
->
ji_pos
.
jp_jblock
 == 0) {

1327 
ji
->
ji_pos
.
jp_jblock
 = 
sfs
->
sfs_sb
.
sb_jou∫Æblocks
;

1329 
ji
->
ji_pos
.
jp_jblock
--;

1330 i‡(
ji
->
ji_buf
 !
NULL
) {

1331 
	`buf„r_ªÀa£
(
ji
->
ji_buf
);

1332 
ji
->
ji_buf
 = 
NULL
;

1336 
ªsu…
 = 
	`sfs_jôî_gëbuf
(
sfs
, 
ji
);

1337 i‡(
ªsu…
) {

1338  
ªsu…
;

1340 
±r
 = 
	`buf„r_m≠
(
ji
->
ji_buf
);

1343 
off£t
 = 0;

1344 
	`KASSERT
(
ji
->
ji_pos
.
jp_blockoff£t
 > 0);

1345 
off£t
 < 
ji
->
ji_pos
.
jp_blockoff£t
) {

1346 i‡(
off£t
 + (
jh
Ë> 
SFS_BLOCKSIZE
) {

1354 
¥evoff£t
 = 
off£t
;

1355 
	`mem˝y
(&
jh
, 
±r
 + 
off£t
, (jh));

1356 
Àn
 = 
	`SFS_CONINFO_LEN
(
jh
.
jh_c⁄öfo
);

1357 i‡(
Àn
 == 0) {

1358 
	`KASSERT
(
jh
.
jh_c⁄öfo
 == 0);

1359 
Àn
 = (
jh
);

1361 
off£t
 +
Àn
;

1363 
ji
->
ji_pos
.
jp_blockoff£t
 = 
¥evoff£t
;

1364 
ji
->
ji_ªad
 = 
Ál£
;

1367 
ji
->
ji_d⁄e
 = 
Ál£
;

1370 
ªsu…
 = 
	`sfs_jôî_ªad
(
sfs
, 
ji
);

1371 i‡(
ªsu…
) {

1372  
ªsu…
;

1376 
	}
}

1388 
	$sfs_jôî_d›ªv
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1390 
ªsu…
;

1393 
ªsu…
 = 
	`sfs_jôî_⁄e_¥ev
(
sfs
, 
ji
);

1394 i‡(
ªsu…
) {

1395  
ªsu…
;

1398 i‡(
ji
->
ji_£óŒ
 || ji->
ji_˛ass
 !
SFS_JPHYS_CONTAINER
) {

1402 i‡(
	`sfs_jposôi⁄_eq
(&
ji
->
ji_pos
, &ji->
ji_èûpos
)) {

1403 
ji
->
ji_d⁄e
 = 
åue
;

1408 
	}
}

1415 
	$sfs_jôî_¥ev
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1418 i‡(
	`sfs_jposôi⁄_eq
(&
ji
->
ji_pos
, &ji->
ji_èûpos
)) {

1419 
ji
->
ji_d⁄e
 = 
åue
;

1423  
	`sfs_jôî_d›ªv
(
sfs
, 
ji
);

1424 
	}
}

1430 
	$sfs_jôî_£ekhód
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1432 
ªsu…
;

1434 
ji
->
ji_pos
 = ji->
ji_hódpos
;

1437 
ji
->
ji_d⁄e
 = 
Ál£
;

1440 
ji
->
ji_ªad
 = 
Ál£
;

1443 i‡(
ji
->
ji_buf
 !
NULL
) {

1444 
	`buf„r_ªÀa£
(
ji
->
ji_buf
);

1445 
ji
->
ji_buf
 = 
NULL
;

1454 
ªsu…
 = 
	`sfs_jôî_d›ªv
(
sfs
, 
ji
);

1455 i‡(
ªsu…
) {

1456  
ªsu…
;

1460 
	}
}

1466 
	$sfs_jôî_£ekèû
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1468 
ªsu…
;

1470 
ji
->
ji_pos
 = ji->
ji_èûpos
;

1473 
ji
->
ji_d⁄e
 = 
Ál£
;

1476 
ji
->
ji_ªad
 = 
Ál£
;

1479 i‡(
ji
->
ji_buf
 !
NULL
) {

1480 
	`buf„r_ªÀa£
(
ji
->
ji_buf
);

1481 
ji
->
ji_buf
 = 
NULL
;

1485 
ªsu…
 = 
	`sfs_jôî_ªad
(
sfs
, 
ji
);

1486 i‡(
ªsu…
) {

1487  
ªsu…
;

1491 i‡(!
ji
->
ji_£óŒ
 && ji->
ji_˛ass
 =
SFS_JPHYS_CONTAINER
) {

1492 
ªsu…
 = 
	`sfs_jôî_√xt
(
sfs
, 
ji
);

1493 i‡(
ªsu…
) {

1494  
ªsu…
;

1499 
	}
}

1506 
	$sfs_jôî_fwd¸óã
(
sfs_fs
 *
sfs
, 
sfs_jôî
 **
ji_ªt
)

1508 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

1509 
sfs_jôî
 *
ji
;

1510 
ªsu…
;

1512 
	`KASSERT
(
jp
->
jp_ªadîmode
);

1514 
ji
 = 
	`sfs_jôî_¸óã
(
sfs
,

1515 &
jp
->
jp_ªcov_èûpos
, &jp->
jp_ªcov_hódpos
,

1516 
Ál£
 );

1517 i‡(
ji
 =
NULL
) {

1518  
ENOMEM
;

1521 
ªsu…
 = 
	`sfs_jôî_£ekèû
(
sfs
, 
ji
);

1522 i‡(
ªsu…
) {

1523 
	`sfs_jôî_de°roy
(
ji
);

1524  
ªsu…
;

1527 *
ji_ªt
 = 
ji
;

1529 
	}
}

1536 
	$sfs_jôî_ªv¸óã
(
sfs_fs
 *
sfs
, 
sfs_jôî
 **
ji_ªt
)

1538 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

1539 
sfs_jôî
 *
ji
;

1540 
ªsu…
;

1542 
	`KASSERT
(
jp
->
jp_ªadîmode
);

1544 
ji
 = 
	`sfs_jôî_¸óã
(
sfs
,

1545 &
jp
->
jp_ªcov_èûpos
, &jp->
jp_ªcov_hódpos
,

1546 
Ál£
 );

1547 i‡(
ji
 =
NULL
) {

1548  
ENOMEM
;

1551 
ªsu…
 = 
	`sfs_jôî_£ekhód
(
sfs
, 
ji
);

1552 i‡(
ªsu…
) {

1553 
	`sfs_jôî_de°roy
(
ji
);

1554  
ªsu…
;

1557 *
ji_ªt
 = 
ji
;

1559 
	}
}

1565 
	$sfs_jôî_de°roy
(
sfs_jôî
 *
ji
)

1567 i‡(
ji
->
ji_buf
 !
NULL
) {

1568 
	`buf„r_ªÀa£
(
ji
->
ji_buf
);

1569 
ji
->
ji_buf
 = 
NULL
;

1571 
	`k‰ì
(
ji
);

1572 
	}
}

1584 
	$sfs_ßve_fú°l¢
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
)

1586 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

1587 
uöt32_t
 
jblock
;

1588 
sfs_l¢_t
 
l¢
;

1590 
jblock
 = 
	`sfs_jôî_jblock
(
ji
);

1591 
l¢
 = 
	`sfs_jôî_l¢
(
ji
);

1592 i‡(
jp
->
jp_fú°l¢s
[
jblock
] =0 || 
l¢
 < jp->jp_firstlsns[jblock]) {

1593 
jp
->
jp_fú°l¢s
[
jblock
] = 
l¢
;

1595 
	}
}

1608 
	$sfs_sˇn_f‹_hód
(
sfs_fs
 *
sfs
,

1609 
sfs_jposôi⁄
 *
èû£¨chpos_ªt
,

1610 
sfs_l¢_t
 *
èûl¢_ªt
,

1611 
sfs_jposôi⁄
 *
hódpos_ªt
,

1612 
sfs_l¢_t
 *
hódl¢_ªt
)

1614 
sfs_jôî
 *
ji
;

1615 
sfs_jposôi⁄
 
°¨ços
;

1616 
boﬁ
 
fú°
;

1617 
sfs_l¢_t
 
fú°l¢
;

1618 
sfs_l¢_t
 
¥evl¢
;

1619 
sfs_l¢_t
 
thi¶¢
;

1620 
˛ass
, 
ty≥
;

1621 *
ªc
;

1622 
size_t
 
ª˛í
;

1623 
sfs_jphys_åim
 
jt
;

1624 
ªsu…
;

1627 
fú°
 = 
åue
;

1628 
fú°l¢
 = 0;

1629 
¥evl¢
 = 0;

1630 *
èûl¢_ªt
 = 0;

1631 
°¨ços
.
jp_jblock
 = 0;

1632 
°¨ços
.
jp_blockoff£t
 = 0;

1634 
ji
 = 
	`sfs_jôî_¸óã
(
sfs
, &
°¨ços
, &°¨ços, 
åue
 );

1635 i‡(
ji
 =
NULL
) {

1636  
ENOMEM
;

1639 
ªsu…
 = 
	`sfs_jôî_£ekèû
(
sfs
, 
ji
);

1640 i‡(
ªsu…
) {

1641 
	`sfs_jôî_de°roy
(
ji
);

1642  
ªsu…
;

1645 !
	`sfs_jôî_d⁄e
(
ji
)) {

1646 
ªsu…
 = 
	`sfs_jôî_ªad
(
sfs
, 
ji
);

1647 i‡(
ªsu…
) {

1648 
	`sfs_jôî_de°roy
(
ji
);

1649  
ªsu…
;

1652 
	`sfs_ßve_fú°l¢
(
sfs
, 
ji
);

1654 
˛ass
 = 
	`sfs_jôî_˛ass
(
ji
);

1655 
ty≥
 = 
	`sfs_jôî_ty≥
(
ji
);

1656 
thi¶¢
 = 
	`sfs_jôî_l¢
(
ji
);

1657 
ªc
 = 
	`sfs_jôî_ªc
(
ji
, &
ª˛í
);

1659 
	`SAY
("[%u.%u] %Œu: %†ty≥ %u (%s)\n", 
ji
->
ji_pos
.
jp_jblock
,

1660 
ji
->
ji_pos
.
jp_blockoff£t
, 
thi¶¢
,

1661 
˛ass
 =
SFS_JPHYS_CONTAINER
 ? "container" : "client",

1662 
ty≥
, 
	`sfs_jphys_ª˙ame
(
˛ass
,Åype));

1664 i‡(
fú°
 && 
thi¶¢
 != 0) {

1665 
fú°l¢
 = 
thi¶¢
;

1666 
fú°
 = 
Ál£
;

1669 i‡(
¥evl¢
 !0 && 
thi¶¢
 <Örevlsn) {

1671 i‡(
	`sfs_jôî_blockoff£t
(
ji
) != 0) {

1672 
	`k¥ötf
("sfs: %s: journal head within block, "

1674 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

1675 
	`sfs_jôî_jblock
(
ji
),

1676 
	`sfs_jôî_blockoff£t
(
ji
));

1677 
	`sfs_jôî_de°roy
(
ji
);

1678  
EFTYPE
;

1680 
	`sfs_jôî_pos
(
ji
, 
hódpos_ªt
);

1681 *
hódl¢_ªt
 = 
¥evl¢
 + 1;

1682 
	`sfs_jôî_de°roy
(
ji
);

1686 i‡(
˛ass
 =
SFS_JPHYS_CONTAINER
 && 
ty≥
 =
SFS_JPHYS_TRIM
) {

1687 i‡(
ª˛í
 !(
jt
)) {

1688 
	`k¥ötf
("sfs: %s: wrong sizeÅrim "

1690 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

1691 
	`sfs_jôî_jblock
(
ji
),

1692 
	`sfs_jôî_blockoff£t
(
ji
));

1693 
	`sfs_jôî_de°roy
(
ji
);

1694  
EFTYPE
;

1696 
	`mem˝y
(&
jt
, 
ªc
, (jt));

1703 
ªsu…
 = 
	`sfs_jôî_√xt
(
sfs
, 
ji
);

1704 i‡(
ªsu…
) {

1705 
	`sfs_jôî_de°roy
(
ji
);

1706  
ªsu…
;

1709 i‡(
jt
.
jt_èûl¢
 < 
fú°l¢
) {

1710 
èû£¨chpos_ªt
->
jp_jblock
 = 0;

1711 
èû£¨chpos_ªt
->
jp_blockoff£t
 = 0;

1714 
	`sfs_jôî_pos
(
ji
, 
èû£¨chpos_ªt
);

1716 *
èûl¢_ªt
 = 
jt
.
jt_èûl¢
;

1719 
ªsu…
 = 
	`sfs_jôî_√xt
(
sfs
, 
ji
);

1720 i‡(
ªsu…
) {

1721 
	`sfs_jôî_de°roy
(
ji
);

1722  
ªsu…
;

1726 
¥evl¢
 = 
thi¶¢
;

1728 
	`sfs_jôî_de°roy
(
ji
);

1734 
hódpos_ªt
->
jp_jblock
 = 0;

1735 
hódpos_ªt
->
jp_blockoff£t
 = 0;

1736 *
hódl¢_ªt
 = 
¥evl¢
 + 1;

1738 
	}
}

1746 
	$sfs_sˇn_f‹_åim
(
sfs_fs
 *
sfs
,

1747 
sfs_jposôi⁄
 *
èû£¨chpos_ªt
,

1748 
sfs_l¢_t
 *
èûl¢_ªt
)

1750 
sfs_jposôi⁄
 
°¨ços
;

1751 
sfs_jôî
 *
ji
;

1752 
˛ass
, 
ty≥
;

1753 
sfs_l¢_t
 
thi¶¢
;

1754 *
ªc
;

1755 
size_t
 
ª˛í
;

1756 
sfs_jphys_åim
 
jt
;

1757 
ªsu…
;

1764 
°¨ços
.
jp_jblock
 = 0;

1765 
°¨ços
.
jp_blockoff£t
 = 0;

1766 
ji
 = 
	`sfs_jôî_¸óã
(
sfs
, &
°¨ços
, &°¨ços, 
åue
 );

1767 i‡(
ji
 =
NULL
) {

1768  
ENOMEM
;

1771 
ªsu…
 = 
	`sfs_jôî_£ekhód
(
sfs
, 
ji
);

1772 i‡(
ªsu…
) {

1773 
	`sfs_jôî_de°roy
(
ji
);

1774  
ªsu…
;

1777 !
	`sfs_jôî_d⁄e
(
ji
)) {

1778 
ªsu…
 = 
	`sfs_jôî_ªad
(
sfs
, 
ji
);

1779 i‡(
ªsu…
) {

1780 
	`sfs_jôî_de°roy
(
ji
);

1781  
ªsu…
;

1784 
	`sfs_ßve_fú°l¢
(
sfs
, 
ji
);

1786 
˛ass
 = 
	`sfs_jôî_˛ass
(
ji
);

1787 
ty≥
 = 
	`sfs_jôî_ty≥
(
ji
);

1788 
thi¶¢
 = 
	`sfs_jôî_l¢
(
ji
);

1789 
ªc
 = 
	`sfs_jôî_ªc
(
ji
, &
ª˛í
);

1791 
	`SAY
("[%u.%u] %Œu: %†ty≥ %u (%s)\n", 
ji
->
ji_pos
.
jp_jblock
,

1792 
ji
->
ji_pos
.
jp_blockoff£t
, 
thi¶¢
,

1793 
˛ass
 =
SFS_JPHYS_CONTAINER
 ? "container" : "client",

1794 
ty≥
, 
	`sfs_jphys_ª˙ame
(
˛ass
,Åype));

1795 
	`UNSAID
(
thi¶¢
);

1797 i‡(
˛ass
 =
SFS_JPHYS_CONTAINER
 && 
ty≥
 =
SFS_JPHYS_TRIM
) {

1798 i‡(
ª˛í
 !(
jt
)) {

1799 
	`k¥ötf
("sfs: %s: wrong sizeÅrim "

1801 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

1802 
	`sfs_jôî_jblock
(
ji
),

1803 
	`sfs_jôî_blockoff£t
(
ji
));

1804 
	`sfs_jôî_de°roy
(
ji
);

1805  
EFTYPE
;

1808 
	`mem˝y
(&
jt
, 
ªc
, (jt));

1809 *
èûl¢_ªt
 = 
jt
.
jt_èûl¢
;

1810 
	`sfs_jôî_pos
(
ji
, 
èû£¨chpos_ªt
);

1812 
	`sfs_jôî_de°roy
(
ji
);

1816 
ªsu…
 = 
	`sfs_jôî_¥ev
(
sfs
, 
ji
);

1817 i‡(
ªsu…
) {

1818 
	`sfs_jôî_de°roy
(
ji
);

1819  
ªsu…
;

1822 
	`sfs_jôî_de°roy
(
ji
);

1824 
	`k¥ötf
("sfs: %s:ÇoÅrimÑecord found\n",

1825 
sfs
->
sfs_sb
.
sb_vﬁ«me
);

1826  
EFTYPE
;

1827 
	}
}

1835 
	$sfs_sˇn_f‹_èû
(
sfs_fs
 *
sfs
,

1836 c⁄° 
sfs_jposôi⁄
 *
èû£¨chpos
,

1837 
sfs_l¢_t
 
èûl¢
,

1838 
sfs_jposôi⁄
 *
èûpos_ªt
)

1840 
sfs_jôî
 *
ji
;

1841 
˛ass
, 
ty≥
;

1842 
sfs_l¢_t
 
thi¶¢
;

1843 
ªsu…
;

1845 
ji
 = 
	`sfs_jôî_¸óã
(
sfs
, 
èû£¨chpos
,Åailsearchpos,

1846 
åue
 );

1847 i‡(
ji
 =
NULL
) {

1848  
ENOMEM
;

1851 
ªsu…
 = 
	`sfs_jôî_£ekhód
(
sfs
, 
ji
);

1852 i‡(
ªsu…
) {

1853 
	`sfs_jôî_de°roy
(
ji
);

1854  
ªsu…
;

1857 !
	`sfs_jôî_d⁄e
(
ji
)) {

1858 
ªsu…
 = 
	`sfs_jôî_ªad
(
sfs
, 
ji
);

1859 i‡(
ªsu…
) {

1860 
	`sfs_jôî_de°roy
(
ji
);

1861  
ªsu…
;

1864 
	`sfs_ßve_fú°l¢
(
sfs
, 
ji
);

1866 
˛ass
 = 
	`sfs_jôî_˛ass
(
ji
);

1867 
ty≥
 = 
	`sfs_jôî_ty≥
(
ji
);

1868 
thi¶¢
 = 
	`sfs_jôî_l¢
(
ji
);

1870 
	`SAY
("[%u.%u] %Œu: %†ty≥ %u (%s)\n", 
ji
->
ji_pos
.
jp_jblock
,

1871 
ji
->
ji_pos
.
jp_blockoff£t
, 
thi¶¢
,

1872 
˛ass
 =
SFS_JPHYS_CONTAINER
 ? "container" : "client",

1873 
ty≥
, 
	`sfs_jphys_ª˙ame
(
˛ass
,Åype));

1874 
	`UNSAID
(
˛ass
);

1875 
	`UNSAID
(
ty≥
);

1877 i‡(
thi¶¢
 =
èûl¢
) {

1878 
	`sfs_jôî_pos
(
ji
, 
èûpos_ªt
);

1879 
	`sfs_jôî_de°roy
(
ji
);

1883 
ªsu…
 = 
	`sfs_jôî_¥ev
(
sfs
, 
ji
);

1884 i‡(
ªsu…
) {

1885 
	`sfs_jôî_de°roy
(
ji
);

1886  
ªsu…
;

1889 
	`sfs_jôî_de°roy
(
ji
);

1891 
	`k¥ötf
("sfs: %s:Åail LSN %lluÇot found -- overwritten?\n",

1892 
sfs
->
sfs_sb
.
sb_vﬁ«me
, ()
èûl¢
);

1893  
EFTYPE
;

1894 
	}
}

1901 
	$sfs_jphys_lﬂdup
(
sfs_fs
 *
sfs
)

1903 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

1904 
sfs_jposôi⁄
 
èû£¨chpos
;

1905 
sfs_l¢_t
 
hódl¢
, 
èûl¢
;

1906 
i
, 
jou∫Æblocks
;

1907 
ªsu…
;

1909 
	`KASSERT
(!
jp
->
jp_phy§ecovîed
);

1911 
	`KASSERT
(
jp
->
jp_fú°l¢s
 =
NULL
);

1912 
jou∫Æblocks
 = 
sfs
->
sfs_sb
.
sb_jou∫Æblocks
;

1913 
jp
->
jp_fú°l¢s
 = 
	`kmÆloc
((
sfs_l¢_t
Ë* 
jou∫Æblocks
);

1914 i‡(
jp
->
jp_fú°l¢s
 =
NULL
) {

1915  
ENOMEM
;

1917 
i
=0; i<
jou∫Æblocks
; i++) {

1918 
jp
->
jp_fú°l¢s
[
i
] = 0;

1921 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

1923 
	`SAY
("sfs_jphys: ScanningÅo findÅhe journal head...\n");

1924 
ªsu…
 = 
	`sfs_sˇn_f‹_hód
(
sfs
, &
èû£¨chpos
, &
èûl¢
,

1925 &
jp
->
jp_ªcov_hódpos
, &
hódl¢
);

1926 i‡(
ªsu…
) {

1927 
out
;

1930 
	`SAY
("[%u.%u] %llu: HEAD\n",

1931 
jp
->
jp_ªcov_hódpos
.
jp_jblock
,

1932 
jp
->
jp_ªcov_hódpos
.
jp_blockoff£t
,

1933 
hódl¢
);

1936 
	`KASSERT
(
hódl¢
 != 0);

1939 i‡(
èûl¢
 == 0) {

1940 
	`SAY
("sfs_jphys: ScanningÅo findáÅrimÑecord...\n");

1941 
ªsu…
 = 
	`sfs_sˇn_f‹_åim
(
sfs
, &
èû£¨chpos
, &
èûl¢
);

1942 i‡(
ªsu…
) {

1943 
out
;

1947 
	`SAY
("[?.?] %Œu: TAIL\n", 
èûl¢
);

1950 
	`KASSERT
(
èûl¢
 != 0);

1953 
	`SAY
("sfs_jphys: ScanningÅo findÅheÅailÖosition...\n");

1954 
ªsu…
 = 
	`sfs_sˇn_f‹_èû
(
sfs
, &
èû£¨chpos
, 
èûl¢
,

1955 &
jp
->
jp_ªcov_èûpos
);

1956 i‡(
ªsu…
) {

1957 
out
;

1960 
	`SAY
("[%u.%u] %llu: TAIL\n",

1961 
jp
->
jp_ªcov_èûpos
.
jp_jblock
,

1962 
jp
->
jp_ªcov_èûpos
.
jp_blockoff£t
,

1963 
èûl¢
);

1966 
	`KASSERT
(
jp
->
jp_ªcov_hódpos
.
jp_blockoff£t
 == 0);

1968 
jp
->
jp_hódjblock
 = jp->
jp_ªcov_hódpos
.
jp_jblock
;

1969 
jp
->
jp_hódbyã
 = jp->
jp_ªcov_hódpos
.
jp_blockoff£t
;

1970 
jp
->
jp_hódfú°l¢
 = 
hódl¢
;

1972 
jp
->
jp_memèûjblock
 = jp->
jp_ªcov_èûpos
.
jp_jblock
;

1973 
jp
->
jp_memèûl¢
 = 
èûl¢
;

1975 
jp
->
jp_√xé¢
 = 
hódl¢
;

1977 
jp
->
jp_phy§ecovîed
 = 
åue
;

1979 
out
:

1980 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

1981  
ªsu…
;

1982 
	}
}

1992 
sfs_jphys
 *

1993 
	$sfs_jphys_¸óã
()

1995 
sfs_jphys
 *
jp
;

1997 
jp
 = 
	`kmÆloc
((*jp));

1998 i‡(
jp
 =
NULL
) {

1999  
NULL
;

2001 
jp
->
jp_phy§ecovîed
 = 
Ál£
;

2002 
jp
->
jp_ªadîmode
 = 
Ál£
;

2003 
jp
->
jp_wrôîmode
 = 
Ál£
;

2005 
jp
->
jp_lock
 = 
	`lock_¸óã
("sfs_jphys");

2006 i‡(
jp
->
jp_lock
 =
NULL
) {

2007 
	`k‰ì
(
jp
);

2008  
NULL
;

2011 
jp
->
jp_hódbuf
 = 
NULL
;

2012 
jp
->
jp_√xtbuf
 = 
NULL
;

2013 
jp
->
jp_gëtög√xt
 = 
NULL
;

2014 
jp
->
jp_√xtcv
 = 
	`cv_¸óã
("sfs_nextbuf");

2015 i‡(
jp
->
jp_√xtcv
 =
NULL
) {

2016 
	`lock_de°roy
(
jp
->
jp_lock
);

2017 
	`k‰ì
(
jp
);

2018  
NULL
;

2021 
jp
->
jp_hódjblock
 = 0;

2022 
jp
->
jp_hódbyã
 = 0;

2023 
jp
->
jp_hódfú°l¢
 = 0;

2025 
jp
->
jp_√xé¢
 = 0;

2027 
jp
->
jp_odomëî
 = 0;

2029 
	`•ölock_öô
(&
jp
->
jp_l¢m≠lock
);

2030 
jp
->
jp_fú°l¢s
 = 
NULL
;

2031 
jp
->
jp_ﬁde°jblock
 = 0;

2032 
jp
->
jp_memèûjblock
 = 0;

2033 
jp
->
jp_memèûl¢
 = 0;

2035 
jp
->
jp_ªcov_èûpos
.
jp_jblock
 = 0;

2036 
jp
->
jp_ªcov_èûpos
.
jp_blockoff£t
 = 0;

2037 
jp
->
jp_ªcov_hódpos
.
jp_jblock
 = 0;

2038 
jp
->
jp_ªcov_hódpos
.
jp_blockoff£t
 = 0;

2040  
jp
;

2041 
	}
}

2048 
	$sfs_jphys_de°roy
(
sfs_jphys
 *
jp
)

2050 
	`KASSERT
(
jp
->
jp_ªadîmode
 =
Ál£
);

2051 
	`KASSERT
(
jp
->
jp_wrôîmode
 =
Ál£
);

2053 
	`•ölock_˛ónup
(&
jp
->
jp_l¢m≠lock
);

2054 
	`k‰ì
(
jp
->
jp_fú°l¢s
);

2055 
	`KASSERT
(
jp
->
jp_hódbuf
 =
NULL
);

2056 
	`KASSERT
(
jp
->
jp_√xtbuf
 =
NULL
);

2057 
	`cv_de°roy
(
jp
->
jp_√xtcv
);

2058 
	`lock_de°roy
(
jp
->
jp_lock
);

2059 
	`k‰ì
(
jp
);

2060 
	}
}

2066 
	$sfs_jphys_°¨åódög
(
sfs_fs
 *
sfs
)

2068 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

2070 
	`KASSERT
(
jp
->
jp_phy§ecovîed
);

2071 
	`KASSERT
(
jp
->
jp_ªadîmode
 =
Ál£
);

2072 
jp
->
jp_ªadîmode
 = 
åue
;

2073 
	}
}

2079 
	$sfs_jphys_°›ªadög
(
sfs_fs
 *
sfs
)

2081 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

2083 
	`KASSERT
(
jp
->
jp_phy§ecovîed
);

2084 
	`KASSERT
(
jp
->
jp_ªadîmode
);

2085 
jp
->
jp_ªadîmode
 = 
Ál£
;

2086 
	}
}

2092 
	$sfs_jphys_°¨twrôög
(
sfs_fs
 *
sfs
)

2094 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

2095 
uöt32_t
 
√xtjblock
;

2096 
ªsu…
;

2098 
	`KASSERT
(
jp
->
jp_phy§ecovîed
);

2099 
	`KASSERT
(!
jp
->
jp_wrôîmode
);

2100 
	`KASSERT
(
jp
->
jp_fú°l¢s
 !
NULL
);

2112 
ªsu…
 = 
	`buf„r_gë_fsm™aged
(&
sfs
->
sfs_absfs
,

2113 
sfs
->
sfs_sb
.
sb_jou∫Æ°¨t
 +

2114 
jp
->
jp_hódjblock
,

2115 
SFS_BLOCKSIZE
, &
jp
->
jp_hódbuf
);

2116 i‡(
ªsu…
) {

2117  
ªsu…
;

2119 
	`buf„r_m¨k_vÆid
(
jp
->
jp_hódbuf
);

2121 
√xtjblock
 = 
jp
->
jp_hódjblock
 + 1;

2122 i‡(
√xtjblock
 =
sfs
->
sfs_sb
.
sb_jou∫Æblocks
) {

2123 
√xtjblock
 = 0;

2125 
ªsu…
 = 
	`buf„r_gë_fsm™aged
(&
sfs
->
sfs_absfs
,

2126 
sfs
->
sfs_sb
.
sb_jou∫Æ°¨t
 + 
√xtjblock
,

2127 
SFS_BLOCKSIZE
, &
jp
->
jp_√xtbuf
);

2128 i‡(
ªsu…
) {

2129 
	`buf„r_ªÀa£_™d_övÆid©e
(
jp
->
jp_hódbuf
);

2130  
ªsu…
;

2132 
	`buf„r_m¨k_vÆid
(
jp
->
jp_√xtbuf
);

2134 
jp
->
jp_fú°l¢s
[jp->
jp_hódjblock
] = jp->
jp_hódfú°l¢
;

2135 
jp
->
jp_ﬁde°jblock
 = jp->
jp_hódjblock
;

2137 
jp
->
jp_wrôîmode
 = 
åue
;

2139 
	}
}

2145 
	$sfs_jphys_un°¨twrôög
(
sfs_fs
 *
sfs
)

2147 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

2149 
	`KASSERT
(
jp
->
jp_phy§ecovîed
);

2150 
	`KASSERT
(
jp
->
jp_wrôîmode
);

2157 
	`buf„r_ªÀa£_™d_övÆid©e
(
jp
->
jp_hódbuf
);

2158 
	`buf„r_ªÀa£_™d_övÆid©e
(
jp
->
jp_√xtbuf
);

2160 
jp
->
jp_hódbuf
 = 
NULL
;

2161 
jp
->
jp_√xtbuf
 = 
NULL
;

2163 
jp
->
jp_wrôîmode
 = 
Ál£
;

2164 
	}
}

2174 
	$sfs_jphys_°›wrôög
(
sfs_fs
 *
sfs
)

2176 
sfs_jphys
 *
jp
 = 
sfs
->sfs_jphys;

2178 
	`lock_acquúe
(
jp
->
jp_lock
);

2180 
	`KASSERT
(
jp
->
jp_phy§ecovîed
);

2181 
	`KASSERT
(
jp
->
jp_wrôîmode
);

2187 
	`KASSERT
(
jp
->
jp_hódbyã
 == 0);

2190 
	`KASSERT
(!
	`buf„r_is_dúty
(
jp
->
jp_hódbuf
));

2191 
	`buf„r_ªÀa£_™d_övÆid©e
(
jp
->
jp_hódbuf
);

2192 
jp
->
jp_hódbuf
 = 
NULL
;

2195 
	`KASSERT
(
jp
->
jp_√xtbuf
 !
NULL
);

2196 
	`KASSERT
(
jp
->
jp_gëtög√xt
 =
NULL
);

2199 
	`KASSERT
(!
	`buf„r_is_dúty
(
jp
->
jp_√xtbuf
));

2200 
	`buf„r_ªÀa£_™d_övÆid©e
(
jp
->
jp_√xtbuf
);

2201 
jp
->
jp_√xtbuf
 = 
NULL
;

2203 
jp
->
jp_wrôîmode
 = 
Ál£
;

2204 
	`lock_ªÀa£
(
jp
->
jp_lock
);

2205 
	}
}

	@fs/sfs/sfs_vnops.c

35 
	~<ty≥s.h
>

36 
	~<kîn/î∫o.h
>

37 
	~<kîn/f˙é.h
>

38 
	~<limôs.h
>

39 
	~<°©.h
>

40 
	~<lib.h
>

41 
	~<uio.h
>

42 
	~<synch.h
>

43 
	~<vfs.h
>

44 
	~<buf.h
>

45 
	~<sfs.h
>

46 
	~"sf•riv©e.h
"

75 
	#DOTDOTSLOT
 1

	)

87 
	$sfs_óch›í
(
vnode
 *
v
, 
›íÊags
)

97 ()
v
;

98 ()
›íÊags
;

101 
	}
}

111 
	$sfs_óch›ídú
(
vnode
 *
v
, 
›íÊags
)

113 
›íÊags
 & 
O_ACCMODE
) {

114 
O_RDONLY
:

116 
O_WRONLY
:

117 
O_RDWR
:

119  
EISDIR
;

121 i‡(
›íÊags
 & 
O_APPEND
) {

122  
EISDIR
;

125 ()
v
;

127 
	}
}

138 
	$sfs_ªad
(
vnode
 *
v
, 
uio
 *uio)

140 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

141 
ªsu…
;

143 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

145 
	`lock_acquúe
(
sv
->
sv_lock
);

146 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

148 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

150 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

151 
	`lock_ªÀa£
(
sv
->
sv_lock
);

153  
ªsu…
;

154 
	}
}

165 
	$sfs_wrôe
(
vnode
 *
v
, 
uio
 *uio)

167 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

168 
ªsu…
;

170 
	`KASSERT
(
uio
->
uio_rw
==
UIO_WRITE
);

172 
	`lock_acquúe
(
sv
->
sv_lock
);

173 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

175 
ªsu…
 = 
	`sfs_io
(
sv
, 
uio
);

177 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

178 
	`lock_ªÀa£
(
sv
->
sv_lock
);

180  
ªsu…
;

181 
	}
}

192 
	$sfs_gëdúíåy
(
vnode
 *
v
, 
uio
 *uio)

194 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

195 
sfs_dúíåy
 
tsd
;

196 
off_t
 
pos
;

197 
√¡rõs
;

198 
ªsu…
;

200 
	`KASSERT
(
uio
->
uio_off£t
 >= 0);

201 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

202 
	`lock_acquúe
(
sv
->
sv_lock
);

203 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

205 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

206 i‡(
ªsu…
) {

207 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

208 
	`lock_ªÀa£
(
sv
->
sv_lock
);

209  
ªsu…
;

212 
ªsu…
 = 
	`sfs_dú_√¡rõs
(
sv
, &
√¡rõs
);

213 i‡(
ªsu…
) {

214 
	`sfs_döode_u∆ﬂd
(
sv
);

215 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

216 
	`lock_ªÀa£
(
sv
->
sv_lock
);

217  
ªsu…
;

221 
pos
 = 
uio
->
uio_off£t
;

224 i‡(
pos
 >
√¡rõs
) {

226 
ªsu…
 = 0;

230 
ªsu…
 = 
	`sfs_ªaddú
(
sv
, 
pos
, &
tsd
);

231 i‡(
ªsu…
) {

235 
pos
++;

237 i‡(
tsd
.
sfd_öo
 =
SFS_NOINO
) {

243 
tsd
.
sfd_«me
[(tsd.sfd_name)-1] = 0;

245 
ªsu…
 = 
	`uiomove
(
tsd
.
sfd_«me
, 
	`°æí
—sd.sfd_«me), 
uio
);

249 
	`sfs_döode_u∆ﬂd
(
sv
);

251 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

253 
	`lock_ªÀa£
(
sv
->
sv_lock
);

256 
uio
->
uio_off£t
 = 
pos
;

258  
ªsu…
;

259 
	}
}

267 
	$sfs_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

273 ()
v
;

274 ()
›
;

275 ()
d©a
;

277  
EINVAL
;

278 
	}
}

289 
	$sfs_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

291 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

292 
sfs_döode
 *
öodïå
;

293 
ªsu…
;

296 
	`bzîo
(
°©buf
, (
°©
));

298 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

299 i‡(
ªsu…
) {

300  
ªsu…
;

303 
	`lock_acquúe
(
sv
->
sv_lock
);

305 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

307 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

308 i‡(
ªsu…
) {

309 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

310 
	`lock_ªÀa£
(
sv
->
sv_lock
);

311  
ªsu…
;

314 
öodïå
 = 
	`sfs_döode_m≠
(
sv
);

316 
°©buf
->
°_size
 = 
öodïå
->
sfi_size
;

317 
°©buf
->
°_∆ök
 = 
öodïå
->
sfi_lökcou¡
;

320 
°©buf
->
°_blocks
 = 0;

324 
	`sfs_döode_u∆ﬂd
(
sv
);

325 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

326 
	`lock_ªÀa£
(
sv
->
sv_lock
);

328 
	}
}

336 
	$sfs_gëty≥
(
vnode
 *
v
, 
uöt32_t
 *
ªt
)

338 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

339 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

341 
sv
->
sv_ty≥
) {

342 
SFS_TYPE_FILE
:

343 *
ªt
 = 
S_IFREG
;

345 
SFS_TYPE_DIR
:

346 *
ªt
 = 
S_IFDIR
;

349 
	`∑nic
("sfs: %s: gettype: Invalid inodeÅype (inode %u,Åype %u)\n",

350 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
sv
->
sv_öo
, sv->
sv_ty≥
);

351  
EINVAL
;

352 
	}
}

360 
boﬁ


361 
	$sfs_is£ekabÀ
(
vnode
 *
v
)

363 ()
v
;

364  
åue
;

365 
	}
}

377 
	$sfs_fsync
(
vnode
 *
v
)

379 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

381  
	`FSOP_SYNC
(
sv
->
sv_absvn
.
vn_fs
);

382 
	}
}

389 
	$sfs_mm≠
(
vnode
 *
v
 )

391 ()
v
;

392  
ENOSYS
;

393 
	}
}

404 
	$sfs_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

406 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

407 
ªsu…
;

409 
	`lock_acquúe
(
sv
->
sv_lock
);

410 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

412 
ªsu…
 = 
	`sfs_ôrunc
(
sv
, 
Àn
);

414 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

415 
	`lock_ªÀa£
(
sv
->
sv_lock
);

416  
ªsu…
;

417 
	}
}

428 
	$sfs_gë⁄íame
(
sfs_vnode
 *
∑ª¡
, 
uöt32_t
 
èrgëöo
,

429 *
buf
, 
size_t
 *
buÂos
)

431 
size_t
 
bp
 = *
buÂos
;

433 
sfs_dúíåy
 
sd
;

434 
size_t
 
«mñí
;

435 
ªsu…
;

437 
	`KASSERT
(
	`lock_do_i_hﬁd
(
∑ª¡
->
sv_lock
));

438 
	`KASSERT
(
èrgëöo
 !
SFS_NOINO
);

440 
ªsu…
 = 
	`sfs_dú_födöo
(
∑ª¡
, 
èrgëöo
, &
sd
, 
NULL
);

441 i‡(
ªsu…
) {

442  
ªsu…
;

446 
«mñí
 = 
	`°æí
(
sd
.
sfd_«me
)+1;

447 i‡(
«mñí
 > 
bp
) {

452  
ERANGE
;

454 
buf
[
bp
-1] = '/';

455 
	`memmove
(
buf
+
bp
-
«mñí
, 
sd
.
sfd_«me
,Çamelen-1);

456 *
buÂos
 = 
bp
-
«mñí
;

458 
	}
}

469 
	$sfs_«mefûe
(
vnode
 *
vv
, 
uio
 *uio)

471 
sfs_vnode
 *
sv
 = 
vv
->
vn_d©a
;

472 
sfs_vnode
 *
∑ª¡
 = 
NULL
;

473 
ªsu…
;

474 *
buf
;

475 
size_t
 
buÂos
, 
bufmax
, 
Àn
;

477 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

479 
bufmax
 = 
uio
->
uio_ªsid
+1;

480 i‡(
bufmax
 > 
PATH_MAX
) {

481 
bufmax
 = 
PATH_MAX
;

484 
buf
 = 
	`kmÆloc
(
bufmax
);

485 i‡(
buf
 =
NULL
) {

486  
ENOMEM
;

489 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

491 
buÂos
 = 
bufmax
;

493 
	`VOP_INCREF
(&
sv
->
sv_absvn
);

496 
	`lock_acquúe
(
sv
->
sv_lock
);

498 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, "..", &
∑ª¡
, 
NULL
);

499 
	`lock_ªÀa£
(
sv
->
sv_lock
);

501 i‡(
ªsu…
) {

502 
	`VOP_DECREF
(&
sv
->
sv_absvn
);

503 
	`k‰ì
(
buf
);

504 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

505  
ªsu…
;

508 i‡(
∑ª¡
 =
sv
) {

510 
	`VOP_DECREF
(&
∑ª¡
->
sv_absvn
);

511 
	`VOP_DECREF
(&
sv
->
sv_absvn
);

515 
	`lock_acquúe
(
∑ª¡
->
sv_lock
);

516 
ªsu…
 = 
	`sfs_gë⁄íame
(
∑ª¡
, 
sv
->
sv_öo
, 
buf
, &
buÂos
);

517 
	`lock_ªÀa£
(
∑ª¡
->
sv_lock
);

519 i‡(
ªsu…
) {

520 
	`VOP_DECREF
(&
∑ª¡
->
sv_absvn
);

521 
	`VOP_DECREF
(&
sv
->
sv_absvn
);

522 
	`k‰ì
(
buf
);

523 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

524  
ªsu…
;

527 
	`VOP_DECREF
(&
sv
->
sv_absvn
);

528 
sv
 = 
∑ª¡
;

529 
∑ª¡
 = 
NULL
;

534 i‡(
bufmax
 =
buÂos
) {

536 
ªsu…
 = 0;

539 
Àn
 = 
bufmax
 - 
buÂos
;

540 
Àn
--;

541 
	`KASSERT
(
Àn
 <
uio
->
uio_ªsid
);

542 
ªsu…
 = 
	`uiomove
(
buf
+
buÂos
, 
Àn
, 
uio
);

545 
	`k‰ì
(
buf
);

546 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

547  
ªsu…
;

548 
	}
}

562 
	$sfs_¸ót
(
vnode
 *
v
, c⁄° *
«me
, 
boﬁ
 
ex˛
, 
mode_t
 
mode
,

563 
vnode
 **
ªt
)

565 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

566 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

567 
sfs_vnode
 *
√wguy
;

568 
sfs_döode
 *
sv_döo
;

569 
sfs_döode
 *
√w_döo
;

570 
uöt32_t
 
öo
;

571 
ªsu…
;

573 
	`lock_acquúe
(
sv
->
sv_lock
);

574 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

576 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

577 i‡(
ªsu…
) {

578 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

579 
	`lock_ªÀa£
(
sv
->
sv_lock
);

580  
ªsu…
;

582 
sv_döo
 = 
	`sfs_döode_m≠
(
sv
);

584 i‡(
sv_döo
->
sfi_lökcou¡
 == 0) {

585 
	`sfs_döode_u∆ﬂd
(
sv
);

586 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

587 
	`lock_ªÀa£
(
sv
->
sv_lock
);

588  
ENOENT
;

591 
	`sfs_döode_u∆ﬂd
(
sv
);

594 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

595 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

596 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

597 
	`lock_ªÀa£
(
sv
->
sv_lock
);

598  
ªsu…
;

602 i‡(
ªsu…
==0 && 
ex˛
) {

603 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

604 
	`lock_ªÀa£
(
sv
->
sv_lock
);

605  
EEXIST
;

608 i‡(
ªsu…
==0) {

610 
ªsu…
 = 
	`sfs_lﬂdvnode
(
sfs
, 
öo
, 
SFS_TYPE_INVAL
, &
√wguy
);

611 i‡(
ªsu…
) {

612 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

613 
	`lock_ªÀa£
(
sv
->
sv_lock
);

614  
ªsu…
;

617 *
ªt
 = &
√wguy
->
sv_absvn
;

618 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

619 
	`lock_ªÀa£
(
sv
->
sv_lock
);

624 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_FILE
, &
√wguy
);

625 i‡(
ªsu…
) {

626 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

627 
	`lock_ªÀa£
(
sv
->
sv_lock
);

628  
ªsu…
;

632 
√w_döo
 = 
	`sfs_döode_m≠
(
√wguy
);

635 ()
mode
;

638 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

639 i‡(
ªsu…
) {

640 
	`sfs_döode_u∆ﬂd
(
√wguy
);

641 
	`lock_ªÀa£
(
√wguy
->
sv_lock
);

642 
	`VOP_DECREF
(&
√wguy
->
sv_absvn
);

643 
	`lock_ªÀa£
(
sv
->
sv_lock
);

644 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

645  
ªsu…
;

649 
√w_döo
->
sfi_lökcou¡
++;

652 
	`sfs_döode_m¨k_dúty
(
√wguy
);

654 *
ªt
 = &
√wguy
->
sv_absvn
;

656 
	`sfs_döode_u∆ﬂd
(
√wguy
);

657 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

658 
	`lock_ªÀa£
(
√wguy
->
sv_lock
);

659 
	`lock_ªÀa£
(
sv
->
sv_lock
);

661 
	}
}

676 
	$sfs_lök
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

678 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

679 
sfs_vnode
 *
f
 = 
fûe
->
vn_d©a
;

680 
sfs_döode
 *
öodïå
;

681 
ªsu…
;

683 
	`KASSERT
(
fûe
->
vn_fs
 =
dú
->vn_fs);

686 i‡(
f
->
sv_ty≥
 =
SFS_TYPE_DIR
) {

687  
EINVAL
;

689 
	`KASSERT
(
fûe
 !
dú
);

691 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

694 
	`lock_acquúe
(
sv
->
sv_lock
);

695 
	`lock_acquúe
(
f
->
sv_lock
);

697 
ªsu…
 = 
	`sfs_döode_lﬂd
(
f
);

698 i‡(
ªsu…
) {

699 
	`lock_ªÀa£
(
f
->
sv_lock
);

700 
	`lock_ªÀa£
(
sv
->
sv_lock
);

701 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

702  
ªsu…
;

706 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
f
->
sv_öo
, 
NULL
);

707 i‡(
ªsu…
) {

708 
	`sfs_döode_u∆ﬂd
(
f
);

709 
	`lock_ªÀa£
(
f
->
sv_lock
);

710 
	`lock_ªÀa£
(
sv
->
sv_lock
);

711 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

712  
ªsu…
;

716 
öodïå
 = 
	`sfs_döode_m≠
(
f
);

717 
öodïå
->
sfi_lökcou¡
++;

718 
	`sfs_döode_m¨k_dúty
(
f
);

720 
	`sfs_döode_u∆ﬂd
(
f
);

721 
	`lock_ªÀa£
(
f
->
sv_lock
);

722 
	`lock_ªÀa£
(
sv
->
sv_lock
);

723 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

725 
	}
}

740 
	$sfs_mkdú
(
vnode
 *
v
, c⁄° *
«me
, 
mode_t
 
mode
)

742 
sfs_fs
 *
sfs
 = 
v
->
vn_fs
->
fs_d©a
;

743 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

744 
ªsu…
;

745 
uöt32_t
 
öo
;

746 
sfs_döode
 *
dú_öodïå
;

747 
sfs_döode
 *
√w_öodïå
;

748 
sfs_vnode
 *
√wguy
;

750 ()
mode
;

752 
	`lock_acquúe
(
sv
->
sv_lock
);

753 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

755 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

756 i‡(
ªsu…
) {

757 
dõ_óæy
;

759 
dú_öodïå
 = 
	`sfs_döode_m≠
(
sv
);

761 i‡(
dú_öodïå
->
sfi_lökcou¡
 == 0) {

762 
ªsu…
 = 
ENOENT
;

763 
dõ_sim∂e
;

767 
ªsu…
 = 
	`sfs_dú_föd«me
(
sv
, 
«me
, &
öo
, 
NULL
, NULL);

768 i‡(
ªsu…
!=0 &&Ñesu…!=
ENOENT
) {

769 
dõ_sim∂e
;

773 i‡(
ªsu…
==0) {

774 
ªsu…
 = 
EEXIST
;

775 
dõ_sim∂e
;

784 i‡(!
	`°rcmp
(
«me
, ".") || !strcmp(name, "..")) {

785 
	`∑nic
("sfs: %s: No %sÉntry in dir %u;Ölease fsck\n",

786 
sfs
->
sfs_sb
.
sb_vﬁ«me
, 
«me
, 
sv
->
sv_öo
);

789 
ªsu…
 = 
	`sfs_makeobj
(
sfs
, 
SFS_TYPE_DIR
, &
√wguy
);

790 i‡(
ªsu…
) {

791 
dõ_sim∂e
;

793 
√w_öodïå
 = 
	`sfs_döode_m≠
(
√wguy
);

795 
ªsu…
 = 
	`sfs_dú_lök
(
√wguy
, ".",Çewguy->
sv_öo
, 
NULL
);

796 i‡(
ªsu…
) {

797 
dõ_un¸óã
;

800 
ªsu…
 = 
	`sfs_dú_lök
(
√wguy
, "..", 
sv
->
sv_öo
, 
NULL
);

801 i‡(
ªsu…
) {

802 
dõ_un¸óã
;

805 
ªsu…
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
√wguy
->
sv_öo
, 
NULL
);

806 i‡(
ªsu…
) {

807 
dõ_un¸óã
;

820 
√w_öodïå
->
sfi_lökcou¡
 += 2;

821 
dú_öodïå
->
sfi_lökcou¡
++;

822 
	`sfs_döode_m¨k_dúty
(
√wguy
);

823 
	`sfs_döode_m¨k_dúty
(
sv
);

825 
	`sfs_döode_u∆ﬂd
(
√wguy
);

826 
	`sfs_döode_u∆ﬂd
(
sv
);

827 
	`lock_ªÀa£
(
√wguy
->
sv_lock
);

828 
	`lock_ªÀa£
(
sv
->
sv_lock
);

829 
	`VOP_DECREF
(&
√wguy
->
sv_absvn
);

831 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

833 
	`KASSERT
(
ªsu…
==0);

834  
ªsu…
;

836 
dõ_un¸óã
:

837 
	`sfs_döode_u∆ﬂd
(
√wguy
);

838 
	`lock_ªÀa£
(
√wguy
->
sv_lock
);

839 
	`VOP_DECREF
(&
√wguy
->
sv_absvn
);

841 
dõ_sim∂e
:

842 
	`sfs_döode_u∆ﬂd
(
sv
);

844 
dõ_óæy
:

845 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

846 
	`lock_ªÀa£
(
sv
->
sv_lock
);

847  
ªsu…
;

848 
	}
}

860 
	$sfs_rmdú
(
vnode
 *
v
, c⁄° *
«me
)

862 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

863 
sfs_fs
 *
sfs
 = 
sv
->
sv_absvn
.
vn_fs
->
fs_d©a
;

864 
sfs_vnode
 *
vi˘im
;

865 
sfs_döode
 *
dú_öodïå
;

866 
sfs_döode
 *
vi˘im_öodïå
;

867 
ªsu…
, 
ªsu…2
;

868 
¶Ÿ
;

871 i‡(!
	`°rcmp
(
«me
, ".") || !strcmp(name, "..")) {

872  
EINVAL
;

875 
	`lock_acquúe
(
sv
->
sv_lock
);

876 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

878 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

879 i‡(
ªsu…
) {

880 
dõ_lﬂdsv
;

882 
dú_öodïå
 = 
	`sfs_döode_m≠
(
sv
);

884 i‡(
dú_öodïå
->
sfi_lökcou¡
 == 0) {

885 
ªsu…
 = 
ENOENT
;

886 
dõ_lökcou¡
;

889 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

890 i‡(
ªsu…
) {

891 
dõ_lökcou¡
;

894 
	`lock_acquúe
(
vi˘im
->
sv_lock
);

895 
ªsu…
 = 
	`sfs_döode_lﬂd
(
vi˘im
);

896 i‡(
ªsu…
) {

897 
dõ_lﬂdvi˘im
;

899 
vi˘im_öodïå
 = 
	`sfs_döode_m≠
(
vi˘im
);

901 i‡(
vi˘im
->
sv_öo
 =
SFS_ROOTDIR_INO
) {

902 
ªsu…
 = 
EPERM
;

903 
dõ_tŸÆ
;

907 i‡(
vi˘im_öodïå
->
sfi_ty≥
 !
SFS_TYPE_DIR
) {

908 
ªsu…
 = 
ENOTDIR
;

909 
dõ_tŸÆ
;

912 
ªsu…
 = 
	`sfs_dú_checkem±y
(
vi˘im
);

913 i‡(
ªsu…
) {

914 
dõ_tŸÆ
;

917 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

918 i‡(
ªsu…
) {

919 
dõ_tŸÆ
;

922 
	`KASSERT
(
dú_öodïå
->
sfi_lökcou¡
 > 1);

923 
	`KASSERT
(
vi˘im_öodïå
->
sfi_lökcou¡
==2);

925 
dú_öodïå
->
sfi_lökcou¡
--;

926 
	`sfs_döode_m¨k_dúty
(
sv
);

928 
vi˘im_öodïå
->
sfi_lökcou¡
 -= 2;

929 
	`sfs_döode_m¨k_dúty
(
vi˘im
);

931 
ªsu…
 = 
	`sfs_ôrunc
(
vi˘im
, 0);

932 i‡(
ªsu…
) {

933 
vi˘im_öodïå
->
sfi_lökcou¡
 += 2;

934 
dú_öodïå
->
sfi_lökcou¡
++;

935 
ªsu…2
 = 
	`sfs_dú_lök
(
sv
, 
«me
, 
vi˘im
->
sv_öo
, 
NULL
);

936 i‡(
ªsu…2
) {

938 
	`∑nic
("sfs: %s:Ñmdir: %s; whileÑecovering: %s\n",

939 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

940 
	`°ªº‹
(
ªsu…
), såîr‹(
ªsu…2
));

942 
dõ_tŸÆ
;

945 
dõ_tŸÆ
:

946 
	`sfs_döode_u∆ﬂd
(
vi˘im
);

947 
dõ_lﬂdvi˘im
:

948 
	`lock_ªÀa£
(
vi˘im
->
sv_lock
);

949 
	`VOP_DECREF
(&
vi˘im
->
sv_absvn
);

950 
dõ_lökcou¡
:

951 
	`sfs_döode_u∆ﬂd
(
sv
);

952 
dõ_lﬂdsv
:

953 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

954 
	`lock_ªÀa£
(
sv
->
sv_lock
);

956  
ªsu…
;

957 
	}
}

969 
	$sfs_ªmove
(
vnode
 *
dú
, c⁄° *
«me
)

971 
sfs_vnode
 *
sv
 = 
dú
->
vn_d©a
;

972 
sfs_vnode
 *
vi˘im
;

973 
sfs_döode
 *
vi˘im_öodïå
;

974 
sfs_döode
 *
dú_öodïå
;

975 
¶Ÿ
;

976 
ªsu…
;

979 i‡(!
	`°rcmp
(
«me
, ".") || !strcmp(name, "..")) {

980  
EISDIR
;

983 
	`lock_acquúe
(
sv
->
sv_lock
);

984 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

986 
ªsu…
 = 
	`sfs_döode_lﬂd
(
sv
);

987 i‡(
ªsu…
) {

988 
out_buf„rs
;

990 
dú_öodïå
 = 
	`sfs_döode_m≠
(
sv
);

992 i‡(
dú_öodïå
->
sfi_lökcou¡
 == 0) {

993 
ªsu…
 = 
ENOENT
;

994 
out_lﬂdsv
;

998 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
«me
, &
vi˘im
, &
¶Ÿ
);

999 i‡(
ªsu…
) {

1000 
out_lﬂdsv
;

1003 
	`lock_acquúe
(
vi˘im
->
sv_lock
);

1004 
ªsu…
 = 
	`sfs_döode_lﬂd
(
vi˘im
);

1005 i‡(
ªsu…
) {

1006 
	`lock_ªÀa£
(
vi˘im
->
sv_lock
);

1007 
	`VOP_DECREF
(&
vi˘im
->
sv_absvn
);

1008 
out_lﬂdsv
;

1010 
vi˘im_öodïå
 = 
	`sfs_döode_m≠
(
vi˘im
);

1011 
	`KASSERT
(
vi˘im_öodïå
->
sfi_lökcou¡
 > 0);

1014 i‡(
vi˘im_öodïå
->
sfi_ty≥
 =
SFS_TYPE_DIR
) {

1015 
ªsu…
 = 
EISDIR
;

1016 
out_ª„ªn˚
;

1020 
ªsu…
 = 
	`sfs_dú_u∆ök
(
sv
, 
¶Ÿ
);

1021 i‡(
ªsu…
) {

1022 
out_ª„ªn˚
;

1026 
	`KASSERT
(
vi˘im_öodïå
->
sfi_lökcou¡
 > 0);

1027 
vi˘im_öodïå
->
sfi_lökcou¡
--;

1028 
	`sfs_döode_m¨k_dúty
(
vi˘im
);

1030 
out_ª„ªn˚
:

1032 
	`sfs_döode_u∆ﬂd
(
vi˘im
);

1033 
	`lock_ªÀa£
(
vi˘im
->
sv_lock
);

1034 
	`VOP_DECREF
(&
vi˘im
->
sv_absvn
);

1036 
out_lﬂdsv
:

1037 
	`sfs_döode_u∆ﬂd
(
sv
);

1039 
out_buf„rs
:

1040 
	`lock_ªÀa£
(
sv
->
sv_lock
);

1041 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

1042  
ªsu…
;

1043 
	}
}

1050 
	$ªcovîmsg
(c⁄° *
vﬁ
, 
ªsu…
, 
ªsu…2
)

1052 
	`k¥ötf
("sfs: %s:Ñíame: %s,Åhí whûêªcovîög: %s\n", 
vﬁ
,

1053 
	`°ªº‹
(
ªsu…
), såîr‹(
ªsu…2
));

1054 
	}
}

1064 
	$check_∑ª¡
(
sfs_vnode
 *
lookf‹
, sfs_vnodê*
Áû⁄
,

1065 
sfs_vnode
 *
chûd
, *
found
)

1067 
sfs_vnode
 *
up
;

1068 
ªsu…
;

1070 *
found
 = 0;

1072 
	`VOP_INCREF
(&
chûd
->
sv_absvn
);

1074 i‡(
Áû⁄
 =
chûd
) {

1076 
	`VOP_DECREF
(&
chûd
->
sv_absvn
);

1077  
EINVAL
;

1080 i‡(
lookf‹
 =
chûd
) {

1081 *
found
 = 1;

1084 
	`lock_acquúe
(
chûd
->
sv_lock
);

1085 
ªsu…
 = 
	`sfs_look⁄˚
(
chûd
, "..", &
up
, 
NULL
);

1086 
	`lock_ªÀa£
(
chûd
->
sv_lock
);

1088 i‡(
ªsu…
) {

1089 
	`VOP_DECREF
(&
chûd
->
sv_absvn
);

1090  
ªsu…
;

1092 i‡(
chûd
 =
up
) {

1094 
	`VOP_DECREF
(&
up
->
sv_absvn
);

1097 
	`VOP_DECREF
(&
chûd
->
sv_absvn
);

1098 
chûd
 = 
up
;

1101 
	`VOP_DECREF
(&
chûd
->
sv_absvn
);

1103 
	}
}

1123 
	$sfs_ª«me
(
vnode
 *
absdú1
, c⁄° *
«me1
,

1124 
vnode
 *
absdú2
, c⁄° *
«me2
)

1126 
sfs_fs
 *
sfs
 = 
absdú1
->
vn_fs
->
fs_d©a
;

1127 
sfs_vnode
 *
dú1
 = 
absdú1
->
vn_d©a
;

1128 
sfs_vnode
 *
dú2
 = 
absdú2
->
vn_d©a
;

1129 
sfs_vnode
 *
obj1
=
NULL
, *
obj2
=NULL;

1130 
sfs_döode
 *
dú1_öodïå
, *
dú2_öodïå
;

1131 
sfs_döode
 *
obj1_öodïå
, *
obj2_öodïå
;

1132 
¶Ÿ1
=-1, 
¶Ÿ2
=-1;

1133 
ªsu…
, 
ªsu…2
;

1134 
sfs_dúíåy
 
sd
;

1135 
found_dú1
;

1138 
obj2_öodïå
 = 
NULL
;

1141 
	`KASSERT
(
absdú1
->
vn_fs
 =
absdú2
->vn_fs);

1143 i‡(!
	`°rcmp
(
«me1
, "."Ë|| !°rcmp(
«me2
, ".") ||

1144 !
	`°rcmp
(
«me1
, ".."Ë|| !°rcmp(
«me2
, "..")) {

1145  
EINVAL
;

1148 i‡(
	`°æí
(
«me2
)+1 > (
sd
.
sfd_«me
)) {

1149  
ENAMETOOLONG
;

1168 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

1170 
	`lock_acquúe
(
sfs
->
sfs_ª«mñock
);

1178 
	`lock_acquúe
(
dú1
->
sv_lock
);

1179 
ªsu…
 = 
	`sfs_look⁄˚
(
dú1
, 
«me1
, &
obj1
, 
NULL
);

1180 
	`lock_ªÀa£
(
dú1
->
sv_lock
);

1182 i‡(
ªsu…
) {

1183 
out0
;

1186 
	`lock_acquúe
(
dú2
->
sv_lock
);

1187 
ªsu…
 = 
	`sfs_look⁄˚
(
dú2
, 
«me2
, &
obj2
, 
NULL
);

1188 
	`lock_ªÀa£
(
dú2
->
sv_lock
);

1190 i‡(
ªsu…
 &&Ñesu… !
ENOENT
) {

1191 
out0
;

1194 i‡(
ªsu…
==
ENOENT
) {

1199 
	`KASSERT
(
obj2
==
NULL
);

1215 
ªsu…
 = 
	`check_∑ª¡
(
dú1
, 
obj1
, 
dú2
, &
found_dú1
);

1216 i‡(
ªsu…
) {

1217 
out0
;

1240 
	`KASSERT
(
dú1
 !
obj1
);

1241 
	`KASSERT
(
dú2
 !
obj2
);

1246 
	`KASSERT
(
dú2
 !
obj1
);

1261 i‡(
obj2
==
dú1
) {

1262 
ªsu…
 = 
ENOTEMPTY
;

1263 
out0
;

1302 i‡(
dú1
==
dú2
) {

1304 
	`lock_acquúe
(
dú1
->
sv_lock
);

1305 
	`KASSERT
(
found_dú1
);

1308 i‡(
found_dú1
) {

1309 
	`lock_acquúe
(
dú1
->
sv_lock
);

1311 
	`lock_acquúe
(
dú2
->
sv_lock
);

1325 
	`KASSERT
(
	`lock_do_i_hﬁd
(
dú2
->
sv_lock
));

1326 i‡(
obj2
) {

1327 
	`VOP_DECREF
(&
obj2
->
sv_absvn
);

1328 
obj2
 = 
NULL
;

1330 
ªsu…
 = 
	`sfs_look⁄˚
(
dú2
, 
«me2
, &
obj2
, &
¶Ÿ2
);

1331 i‡(
ªsu…
==0) {

1332 
	`KASSERT
(
obj2
 !
NULL
);

1333 
	`lock_acquúe
(
obj2
->
sv_lock
);

1334 
ªsu…
 = 
	`sfs_döode_lﬂd
(
obj2
);

1335 i‡(
ªsu…
) {

1337 
	`KASSERT
(
ªsu…
 !
ENOENT
);

1338 
	`lock_ªÀa£
(
obj2
->
sv_lock
);

1339 
	`VOP_DECREF
(&
obj2
->
sv_absvn
);

1343 
obj2_öodïå
 = 
	`sfs_döode_m≠
(
obj2
);

1346 i‡(
ªsu…
==
ENOENT
) {

1351 
	`KASSERT
(
obj2
==
NULL
);

1352 
	`KASSERT
(
¶Ÿ2
>=0);

1355 i‡(!
found_dú1
) {

1356 
	`lock_acquúe
(
dú1
->
sv_lock
);

1360 i‡(
ªsu…
 !0 &&Ñesu… !
ENOENT
) {

1361 
out1
;

1367 
	`KASSERT
(
	`lock_do_i_hﬁd
(
dú1
->
sv_lock
));

1368 
	`VOP_DECREF
(&
obj1
->
sv_absvn
);

1369 
obj1
 = 
NULL
;

1370 
ªsu…
 = 
	`sfs_look⁄˚
(
dú1
, 
«me1
, &
obj1
, &
¶Ÿ1
);

1371 i‡(
ªsu…
) {

1372 
out1
;

1379 i‡(
obj1
==
obj2
) {

1380 
ªsu…
 = 0;

1381 
	`VOP_DECREF
(&
obj1
->
sv_absvn
);

1382 
obj1
 = 
NULL
;

1383 
out1
;

1385 
	`lock_acquúe
(
obj1
->
sv_lock
);

1386 
ªsu…
 = 
	`sfs_döode_lﬂd
(
obj1
);

1387 i‡(
ªsu…
) {

1388 
	`lock_ªÀa£
(
obj1
->
sv_lock
);

1389 
	`VOP_DECREF
(&
obj1
->
sv_absvn
);

1390 
obj1
 = 
NULL
;

1391 
out1
;

1393 
obj1_öodïå
 = 
	`sfs_döode_m≠
(
obj1
);

1395 
ªsu…
 = 
	`sfs_döode_lﬂd
(
dú2
);

1396 i‡(
ªsu…
) {

1397 
out2
;

1399 
dú2_öodïå
 = 
	`sfs_döode_m≠
(
dú2
);

1401 
ªsu…
 = 
	`sfs_döode_lﬂd
(
dú1
);

1402 i‡(
ªsu…
) {

1403 
out3
;

1405 
dú1_öodïå
 = 
	`sfs_döode_m≠
(
dú1
);

1411 i‡(
dú2_öodïå
->
sfi_lökcou¡
==0) {

1412 
ªsu…
 = 
ENOENT
;

1413 
out4
;

1422 
	`KASSERT
(
¶Ÿ1
>=0);

1423 
	`KASSERT
(
¶Ÿ2
>=0);

1425 i‡(
obj2
 !
NULL
) {

1432 i‡(
obj1_öodïå
->
sfi_ty≥
 =
SFS_TYPE_DIR
) {

1433 i‡(
obj2_öodïå
->
sfi_ty≥
 !
SFS_TYPE_DIR
) {

1434 
ªsu…
 = 
ENOTDIR
;

1435 
out4
;

1437 
ªsu…
 = 
	`sfs_dú_checkem±y
(
obj2
);

1438 i‡(
ªsu…
) {

1439 
out4
;

1443 
ªsu…
 = 
	`sfs_dú_u∆ök
(
dú2
, 
¶Ÿ2
);

1444 i‡(
ªsu…
) {

1445 
out4
;

1449 
	`KASSERT
(
dú2_öodïå
->
sfi_lökcou¡
 > 1);

1450 
	`KASSERT
(
obj2_öodïå
->
sfi_lökcou¡
 == 2);

1451 
dú2_öodïå
->
sfi_lökcou¡
--;

1452 
obj2_öodïå
->
sfi_lökcou¡
 -= 2;

1453 
	`sfs_döode_m¨k_dúty
(
dú2
);

1454 
	`sfs_döode_m¨k_dúty
(
obj2
);

1457 
	`sfs_ôrunc
(
obj2
, 0);

1460 
	`KASSERT
(
obj1
->
sv_ty≥
 =
SFS_TYPE_FILE
);

1461 i‡(
obj2
->
sv_ty≥
 !
SFS_TYPE_FILE
) {

1462 
ªsu…
 = 
EISDIR
;

1463 
out4
;

1467 
ªsu…
 = 
	`sfs_dú_u∆ök
(
dú2
, 
¶Ÿ2
);

1468 i‡(
ªsu…
) {

1469 
out4
;

1473 
	`KASSERT
(
obj2_öodïå
->
sfi_lökcou¡
 > 0);

1474 
obj2_öodïå
->
sfi_lökcou¡
--;

1475 
	`sfs_döode_m¨k_dúty
(
obj2
);

1478 
	`sfs_döode_u∆ﬂd
(
obj2
);

1480 
	`lock_ªÀa£
(
obj2
->
sv_lock
);

1481 
	`VOP_DECREF
(&
obj2
->
sv_absvn
);

1482 
obj2
 = 
NULL
;

1491 
	`KASSERT
(
obj2
==
NULL
);

1493 
	`bzîo
(&
sd
, (sd));

1494 
sd
.
sfd_öo
 = 
obj1
->
sv_öo
;

1495 
	`°r˝y
(
sd
.
sfd_«me
, 
«me2
);

1496 
ªsu…
 = 
	`sfs_wrôedú
(
dú2
, 
¶Ÿ2
, &
sd
);

1497 i‡(
ªsu…
) {

1498 
out4
;

1501 
obj1_öodïå
->
sfi_lökcou¡
++;

1502 
	`sfs_döode_m¨k_dúty
(
obj1
);

1504 i‡(
obj1
->
sv_ty≥
 =
SFS_TYPE_DIR
 && 
dú1
 !
dú2
) {

1506 
ªsu…
 = 
	`sfs_ªaddú
(
obj1
, 
DOTDOTSLOT
, &
sd
);

1507 i‡(
ªsu…
) {

1508 
ªcovî1
;

1510 i‡(
	`°rcmp
(
sd
.
sfd_«me
, "..")) {

1511 
	`∑nic
("sfs: %s:Ñename: moving dir: .. isÇot "

1512 "ö slŸ %d\n", 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

1513 
DOTDOTSLOT
);

1515 i‡(
sd
.
sfd_öo
 !
dú1
->
sv_öo
) {

1516 
	`∑nic
("sfs: %s:Ñename: moving dir: .. is i%u "

1517 "™dÇŸ i%u\n", 
sfs
->
sfs_sb
.
sb_vﬁ«me
,

1518 
sd
.
sfd_öo
, 
dú1
->
sv_öo
);

1520 
sd
.
sfd_öo
 = 
dú2
->
sv_öo
;

1521 
ªsu…
 = 
	`sfs_wrôedú
(
obj1
, 
DOTDOTSLOT
, &
sd
);

1522 i‡(
ªsu…
) {

1523 
ªcovî1
;

1525 
dú1_öodïå
->
sfi_lökcou¡
--;

1526 
	`sfs_döode_m¨k_dúty
(
dú1
);

1527 
dú2_öodïå
->
sfi_lökcou¡
++;

1528 
	`sfs_döode_m¨k_dúty
(
dú2
);

1531 
ªsu…
 = 
	`sfs_dú_u∆ök
(
dú1
, 
¶Ÿ1
);

1532 i‡(
ªsu…
) {

1533 
ªcovî2
;

1535 
obj1_öodïå
->
sfi_lökcou¡
--;

1536 
	`sfs_döode_m¨k_dúty
(
obj1
);

1538 
	`KASSERT
(
ªsu…
==0);

1542 
ªcovî2
:

1543 i‡(
obj1
->
sv_ty≥
 =
SFS_TYPE_DIR
) {

1544 
sd
.
sfd_öo
 = 
dú1
->
sv_öo
;

1545 
ªsu…2
 = 
	`sfs_wrôedú
(
obj1
, 
DOTDOTSLOT
, &
sd
);

1546 i‡(
ªsu…2
) {

1547 
	`ªcovîmsg
(
sfs
->
sfs_sb
.
sb_vﬁ«me
,

1548 
ªsu…
, 
ªsu…2
);

1550 
dú1_öodïå
->
sfi_lökcou¡
++;

1551 
	`sfs_döode_m¨k_dúty
(
dú1
);

1552 
dú2_öodïå
->
sfi_lökcou¡
--;

1553 
	`sfs_döode_m¨k_dúty
(
dú2
);

1555 
ªcovî1
:

1556 
ªsu…2
 = 
	`sfs_dú_u∆ök
(
dú2
, 
¶Ÿ2
);

1557 i‡(
ªsu…2
) {

1558 
	`ªcovîmsg
(
sfs
->
sfs_sb
.
sb_vﬁ«me
,

1559 
ªsu…
, 
ªsu…2
);

1561 
obj1_öodïå
->
sfi_lökcou¡
--;

1562 
	`sfs_döode_m¨k_dúty
(
obj1
);

1565 
out4
:

1566 
	`sfs_döode_u∆ﬂd
(
dú1
);

1567 
out3
:

1568 
	`sfs_döode_u∆ﬂd
(
dú2
);

1569 
out2
:

1570 
	`sfs_döode_u∆ﬂd
(
obj1
);

1571 
	`lock_ªÀa£
(
obj1
->
sv_lock
);

1572 
out1
:

1573 i‡(
obj2
) {

1574 
	`sfs_döode_u∆ﬂd
(
obj2
);

1575 
	`lock_ªÀa£
(
obj2
->
sv_lock
);

1577 
	`lock_ªÀa£
(
dú1
->
sv_lock
);

1578 i‡(
dú1
 !
dú2
) {

1579 
	`lock_ªÀa£
(
dú2
->
sv_lock
);

1581 
out0
:

1582 i‡(
obj2
 !
NULL
) {

1583 
	`VOP_DECREF
(&
obj2
->
sv_absvn
);

1585 i‡(
obj1
 !
NULL
) {

1586 
	`VOP_DECREF
(&
obj1
->
sv_absvn
);

1589 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

1591 
	`lock_ªÀa£
(
sfs
->
sfs_ª«mñock
);

1593  
ªsu…
;

1594 
	}
}

1598 
	$sfs_look∑ª¡_öã∫Æ
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

1599 *
buf
, 
size_t
 
buÊí
)

1601 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1602 
sfs_vnode
 *
√xt
;

1603 *
s
;

1604 
ªsu…
;

1606 
	`VOP_INCREF
(&
sv
->
sv_absvn
);

1610 i‡(
sv
->
sv_ty≥
 !
SFS_TYPE_DIR
) {

1611 
	`VOP_DECREF
(&
sv
->
sv_absvn
);

1612  
ENOTDIR
;

1615 
s
 = 
	`°rchr
(
∑th
, '/');

1616 i‡(!
s
) {

1620 *
s
 = 0;

1621 
s
++;

1623 
	`lock_acquúe
(
sv
->
sv_lock
);

1624 
ªsu…
 = 
	`sfs_look⁄˚
(
sv
, 
∑th
, &
√xt
, 
NULL
);

1625 
	`lock_ªÀa£
(
sv
->
sv_lock
);

1627 i‡(
ªsu…
) {

1628 
	`VOP_DECREF
(&
sv
->
sv_absvn
);

1629  
ªsu…
;

1632 
	`VOP_DECREF
(&
sv
->
sv_absvn
);

1633 
sv
 = 
√xt
;

1634 
∑th
 = 
s
;

1637 i‡(
	`°æí
(
∑th
)+1 > 
buÊí
) {

1638 
	`VOP_DECREF
(&
sv
->
sv_absvn
);

1639  
ENAMETOOLONG
;

1641 
	`°r˝y
(
buf
, 
∑th
);

1643 *
ªt
 = &
sv
->
sv_absvn
;

1646 
	}
}

1660 
	$sfs_look∑ª¡
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
,

1661 *
buf
, 
size_t
 
buÊí
)

1663 
ªsu…
;

1665 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

1666 
ªsu…
 = 
	`sfs_look∑ª¡_öã∫Æ
(
v
, 
∑th
, 
ªt
, 
buf
, 
buÊí
);

1667 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

1668  
ªsu…
;

1669 
	}
}

1682 
	$sfs_lookup
(
vnode
 *
v
, *
∑th
, vnodê**
ªt
)

1684 
sfs_vnode
 *
sv
 = 
v
->
vn_d©a
;

1685 
vnode
 *
dúv
;

1686 
sfs_vnode
 *
dú
;

1687 
sfs_vnode
 *
föÆ
;

1688 
ªsu…
;

1689 
«me
[
SFS_NAMELEN
];

1691 
	`ª£rve_buf„rs
(
SFS_BLOCKSIZE
);

1693 
ªsu…
 = 
	`sfs_look∑ª¡_öã∫Æ
(&
sv
->
sv_absvn
, 
∑th
, &
dúv
, 
«me
, (name));

1694 i‡(
ªsu…
) {

1695 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

1696  
ªsu…
;

1699 
dú
 = 
dúv
->
vn_d©a
;

1700 
	`lock_acquúe
(
dú
->
sv_lock
);

1702 
ªsu…
 = 
	`sfs_look⁄˚
(
dú
, 
«me
, &
föÆ
, 
NULL
);

1704 
	`lock_ªÀa£
(
dú
->
sv_lock
);

1705 
	`VOP_DECREF
(
dúv
);

1707 i‡(
ªsu…
) {

1708 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

1709  
ªsu…
;

1712 *
ªt
 = &
föÆ
->
sv_absvn
;

1714 
	`uƒe£rve_buf„rs
(
SFS_BLOCKSIZE
);

1716 
	}
}

1724 c⁄° 
vnode_›s
 
	gsfs_fûe›s
 = {

1725 .
v›_magic
 = 
VOP_MAGIC
,

1727 .
	gv›_óch›í
 = 
sfs_óch›í
,

1728 .
	gv›_ª˛aim
 = 
sfs_ª˛aim
,

1730 .
	gv›_ªad
 = 
sfs_ªad
,

1731 .
	gv›_ªadlök
 = 
v›Áû_uio_nŸdú
,

1732 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nŸdú
,

1733 .
	gv›_wrôe
 = 
sfs_wrôe
,

1734 .
	gv›_io˘l
 = 
sfs_io˘l
,

1735 .
	gv›_°©
 = 
sfs_°©
,

1736 .
	gv›_gëty≥
 = 
sfs_gëty≥
,

1737 .
	gv›_is£ekabÀ
 = 
sfs_is£ekabÀ
,

1738 .
	gv›_fsync
 = 
sfs_fsync
,

1739 .
	gv›_mm≠
 = 
sfs_mm≠
,

1740 .
	gv›_åunˇã
 = 
sfs_åunˇã
,

1741 .
	gv›_«mefûe
 = 
v›Áû_uio_nŸdú
,

1743 .
	gv›_¸ót
 = 
v›Áû_¸ót_nŸdú
,

1744 .
	gv›_symlök
 = 
v›Áû_symlök_nŸdú
,

1745 .
	gv›_mkdú
 = 
v›Áû_mkdú_nŸdú
,

1746 .
	gv›_lök
 = 
v›Áû_lök_nŸdú
,

1747 .
	gv›_ªmove
 = 
v›Áû_°rög_nŸdú
,

1748 .
	gv›_rmdú
 = 
v›Áû_°rög_nŸdú
,

1749 .
	gv›_ª«me
 = 
v›Áû_ª«me_nŸdú
,

1751 .
	gv›_lookup
 = 
v›Áû_lookup_nŸdú
,

1752 .
	gv›_look∑ª¡
 = 
v›Áû_look∑ª¡_nŸdú
,

1758 c⁄° 
vnode_›s
 
	gsfs_dú›s
 = {

1759 .
v›_magic
 = 
VOP_MAGIC
,

1761 .
	gv›_óch›í
 = 
sfs_óch›ídú
,

1762 .
	gv›_ª˛aim
 = 
sfs_ª˛aim
,

1764 .
	gv›_ªad
 = 
v›Áû_uio_isdú
,

1765 .
	gv›_ªadlök
 = 
v›Áû_uio_övÆ
,

1766 .
	gv›_gëdúíåy
 = 
sfs_gëdúíåy
,

1767 .
	gv›_wrôe
 = 
v›Áû_uio_isdú
,

1768 .
	gv›_io˘l
 = 
sfs_io˘l
,

1769 .
	gv›_°©
 = 
sfs_°©
,

1770 .
	gv›_gëty≥
 = 
sfs_gëty≥
,

1771 .
	gv›_is£ekabÀ
 = 
sfs_is£ekabÀ
,

1772 .
	gv›_fsync
 = 
sfs_fsync
,

1773 .
	gv›_mm≠
 = 
v›Áû_mm≠_isdú
,

1774 .
	gv›_åunˇã
 = 
v›Áû_åunˇã_isdú
,

1775 .
	gv›_«mefûe
 = 
sfs_«mefûe
,

1777 .
	gv›_¸ót
 = 
sfs_¸ót
,

1778 .
	gv›_symlök
 = 
v›Áû_symlök_nosys
,

1779 .
	gv›_mkdú
 = 
sfs_mkdú
,

1780 .
	gv›_lök
 = 
sfs_lök
,

1781 .
	gv›_ªmove
 = 
sfs_ªmove
,

1782 .
	gv›_rmdú
 = 
sfs_rmdú
,

1783 .
	gv›_ª«me
 = 
sfs_ª«me
,

1785 .
	gv›_lookup
 = 
sfs_lookup
,

1786 .
	gv›_look∑ª¡
 = 
sfs_look∑ª¡
,

	@fs/sfs/sfsprivate.h

30 #i‚de‡
_SFSPRIVATE_H_


31 
	#_SFSPRIVATE_H_


	)

33 
	~<uio.h
>

34 
	gbuf
;

41 
uöt64_t
 
	tsfs_l¢_t
;

44 
	gsfs_jphys_wrôec⁄ãxt
;

47 
	gsfs_jôî
;

51 c⁄° 
vnode_›s
 
sfs_fûe›s
;

52 c⁄° 
vnode_›s
 
sfs_dú›s
;

55 
	#SFSUIO
(
iov
, 
uio
, 
±r
, 
block
, 
rw
) \

56 
	`uio_köô
(
iov
, 
uio
, 
±r
, 
SFS_BLOCKSIZE
, ((
off_t
)(
block
))*SFS_BLOCKSIZE, 
rw
)

	)

59 #ifde‡
SFS_VERBOSE_RECOVERY


60 
	#SAY
(...Ë
	`k¥ötf
(
__VA_ARGS__
)

	)

61 
	#UNSAID
(
x
)

	)

63 
	#SAY
(...)

	)

64 
	#UNSAID
(
x
Ë(()(x))

	)

69 
sfs_bÆloc
(
sfs_fs
 *
sfs
, 
daddr_t
 *
diskblock
, 
buf
 **
bu‰ë
);

70 
sfs_b‰ì
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
);

71 
sfs_b‰ì_¥ñocked
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
);

72 
sfs_bu£d
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
);

73 
sfs_lock_‰ìm≠
(
sfs_fs
 *
sfs
);

74 
sfs_u∆ock_‰ìm≠
(
sfs_fs
 *
sfs
);

77 
sfs_bm≠
(
sfs_vnode
 *
sv
, 
uöt32_t
 
fûeblock
,

78 
boﬁ
 
dﬂŒoc
, 
daddr_t
 *
diskblock
);

79 
sfs_ôrunc
(
sfs_vnode
 *
sv
, 
off_t
 
Àn
);

82 
sfs_ªaddú
(
sfs_vnode
 *
sv
, 
¶Ÿ
, 
sfs_dúíåy
 *
sd
);

83 
sfs_wrôedú
(
sfs_vnode
 *
sv
, 
¶Ÿ
, 
sfs_dúíåy
 *
sd
);

84 
sfs_dú_√¡rõs
(
sfs_vnode
 *
sv
, *
ªt
);

85 
sfs_dú_föd«me
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

86 
uöt32_t
 *
öo
, *
¶Ÿ
, *
em±y¶Ÿ
);

87 
sfs_dú_födöo
(
sfs_vnode
 *
sv
, 
uöt32_t
 
öo
,

88 
sfs_dúíåy
 *
ªtsd
, *
¶Ÿ
);

89 
sfs_dú_lök
(
sfs_vnode
 *
sv
, c⁄° *
«me
, 
uöt32_t
 
öo
,

90 *
¶Ÿ
);

91 
sfs_dú_u∆ök
(
sfs_vnode
 *
sv
, 
¶Ÿ
);

92 
sfs_dú_checkem±y
(
sfs_vnode
 *
sv
);

93 
sfs_look⁄˚
(
sfs_vnode
 *
sv
, c⁄° *
«me
,

94 
sfs_vnode
 **
ªt
,

95 *
¶Ÿ
);

98 
sfs_döode_lﬂd
(
sfs_vnode
 *
sv
);

99 
sfs_döode_u∆ﬂd
(
sfs_vnode
 *
sv
);

100 
sfs_döode
 *
sfs_döode_m≠
(
sfs_vnode
 *
sv
);

101 
sfs_döode_m¨k_dúty
(
sfs_vnode
 *
sv
);

102 
sfs_ª˛aim
(
vnode
 *
v
);

103 
sfs_lﬂdvnode
(
sfs_fs
 *
sfs
, 
uöt32_t
 
öo
, 
f‹˚ty≥
,

104 
sfs_vnode
 **
ªt
);

105 
sfs_makeobj
(
sfs_fs
 *
sfs
, 
ty≥
, 
sfs_vnode
 **
ªt
);

106 
sfs_gëroŸ
(
fs
 *fs, 
vnode
 **
ªt
);

109 
sfs_ªadblock
(
fs
 *fs, 
daddr_t
 
block
, *
d©a
, 
size_t
 
Àn
);

110 
sfs_wrôeblock
(
fs
 *fs, 
daddr_t
 
block
, *
fsbufd©a
,

111 *
d©a
, 
size_t
 
Àn
);

112 
sfs_io
(
sfs_vnode
 *
sv
, 
uio
 *uio);

113 
sfs_mëaio
(
sfs_vnode
 *
sv
, 
off_t
 
pos
, *
d©a
, 
size_t
 
Àn
,

114 
uio_rw
 
rw
);

118 #ifde‡
SFS_VERBOSE_RECOVERY


119 c⁄° *
sfs_jphys_˛õ¡_ª˙ame
(
ty≥
);

123 
boﬁ
 
sfs_block_is_jou∫Æ
(
sfs_fs
 *
sfs
, 
uöt32_t
 
block
);

125 
sfs_l¢_t
 
sfs_jphys_wrôe
(
sfs_fs
 *
sfs
,

126 (*
ˇŒback
)(
sfs_fs
 *
sfs
,

127 
sfs_l¢_t
 
√wl¢
,

128 
sfs_jphys_wrôec⁄ãxt
 *
˘x
),

129 
sfs_jphys_wrôec⁄ãxt
 *
˘x
,

130 
code
, c⁄° *
ªc
, 
size_t
 
Àn
);

131 
	`sfs_jphys_Êush
(
sfs_fs
 *
sfs
, 
sfs_l¢_t
 
l¢
);

132 
	`sfs_jphys_ÊushÆl
(
sfs_fs
 *
sfs
);

134 
	`sfs_jphys_Êushf‹jou∫Æblock
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
);

135 
	`sfs_wrŸe_jou∫Æ_block
(
sfs_fs
 *
sfs
, 
daddr_t
 
diskblock
);

137 
sfs_l¢_t
 
	`sfs_jphys_≥ek√xé¢
(
sfs_fs
 *
sfs
);

138 
	`sfs_jphys_åim
(
sfs_fs
 *
sfs
, 
sfs_l¢_t
 
èûl¢
);

139 
uöt32_t
 
	`sfs_jphys_gëodomëî
(
sfs_jphys
 *
jp
);

140 
	`sfs_jphys_˛órodomëî
(
sfs_jphys
 *
jp
);

142 
boﬁ
 
	`sfs_jôî_d⁄e
(
sfs_jôî
 *
ji
);

143 
	`sfs_jôî_ty≥
(
sfs_jôî
 *
ji
);

144 
sfs_l¢_t
 
	`sfs_jôî_l¢
(
sfs_jôî
 *
ji
);

145 *
	`sfs_jôî_ªc
(
sfs_jôî
 *
ji
, 
size_t
 *
Àn_ªt
);

146 
	`sfs_jôî_√xt
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
);

147 
	`sfs_jôî_¥ev
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
);

148 
	`sfs_jôî_£ekhód
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
);

149 
	`sfs_jôî_£ekèû
(
sfs_fs
 *
sfs
, 
sfs_jôî
 *
ji
);

150 
	`sfs_jôî_fwd¸óã
(
sfs_fs
 *
sfs
, 
sfs_jôî
 **
ji_ªt
);

151 
	`sfs_jôî_ªv¸óã
(
sfs_fs
 *
sfs
, 
sfs_jôî
 **
ji
);

152 
	`sfs_jôî_de°roy
(
sfs_jôî
 *
ji
);

154 
	`sfs_jphys_lﬂdup
(
sfs_fs
 *
sfs
);

156 
sfs_jphys
 *
	`sfs_jphys_¸óã
();

157 
	`sfs_jphys_de°roy
(
sfs_jphys
 *
jp
);

158 
	`sfs_jphys_°¨åódög
(
sfs_fs
 *
sfs
);

159 
	`sfs_jphys_°›ªadög
(
sfs_fs
 *
sfs
);

160 
	`sfs_jphys_°¨twrôög
(
sfs_fs
 *
sfs
);

161 
	`sfs_jphys_un°¨twrôög
(
sfs_fs
 *
sfs
);

162 
	`sfs_jphys_°›wrôög
(
sfs_fs
 *
sfs
);

	@include/addrspace.h

30 #i‚de‡
_ADDRSPACE_H_


31 
	#_ADDRSPACE_H_


	)

38 
	~<vm.h
>

39 
	~"›t-dumbvm.h
"

41 
	gvnode
;

51 
	saddr•a˚
 {

52 #i‡
OPT_DUMBVM


53 
vaddr_t
 
	mas_vba£1
;

54 
∑ddr_t
 
	mas_pba£1
;

55 
size_t
 
	mas_≈ages1
;

56 
vaddr_t
 
	mas_vba£2
;

57 
∑ddr_t
 
	mas_pba£2
;

58 
size_t
 
	mas_≈ages2
;

59 
∑ddr_t
 
	mas_°ackpba£
;

106 
addr•a˚
 *
as_¸óã
();

107 
as_c›y
(
addr•a˚
 *
§c
, addr•a˚ **
ªt
);

108 
as_a˘iv©e
();

109 
as_dó˘iv©e
();

110 
as_de°roy
(
addr•a˚
 *);

112 
as_deföe_ªgi⁄
(
addr•a˚
 *
as
,

113 
vaddr_t
 
vaddr
, 
size_t
 
sz
,

114 
ªadabÀ
,

115 
wrôóbÀ
,

116 
execuèbÀ
);

117 
as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
);

118 
as_com∂ëe_lﬂd
(
addr•a˚
 *
as
);

119 
as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
öô°ack±r
);

129 
lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
);

	@include/array.h

30 #i‚de‡
_ARRAY_H_


31 
	#_ARRAY_H_


	)

33 
	~<cdefs.h
>

34 
	~<lib.h
>

36 
	#ARRAYS_CHECKED


	)

38 #ifde‡
ARRAYS_CHECKED


39 
	#ARRAYASSERT
 
KASSERT


	)

41 
	#ARRAYASSERT
(
x
Ë(()(x))

	)

44 #i‚de‡
ARRAYINLINE


45 
	#ARRAYINLINE
 
INLINE


	)

70 
	s¨øy
 {

71 **
	mv
;

72 
	mnum
, 
	mmax
;

75 
¨øy
 *
¨øy_¸óã
();

76 
¨øy_de°roy
(
¨øy
 *);

77 
¨øy_öô
(
¨øy
 *);

78 
¨øy_˛ónup
(
¨øy
 *);

79 
ARRAYINLINE
 
¨øy_num
(c⁄° 
¨øy
 *);

80 
ARRAYINLINE
 *
¨øy_gë
(c⁄° 
¨øy
 *, 
ödex
);

81 
ARRAYINLINE
 
¨øy_£t
(c⁄° 
¨øy
 *, 
ödex
, *
vÆ
);

82 
¨øy_¥óŒoˇã
(
¨øy
 *, 
num
);

83 
¨øy_£tsize
(
¨øy
 *, 
num
);

84 
ARRAYINLINE
 
¨øy_add
(
¨øy
 *, *
vÆ
, *
ödex_ªt
);

85 
¨øy_ªmove
(
¨øy
 *, 
ödex
);

91 
ARRAYINLINE
 

92 
	$¨øy_num
(c⁄° 
¨øy
 *
a
)

94  
a
->
num
;

95 
	}
}

97 
ARRAYINLINE
 *

98 
	$¨øy_gë
(c⁄° 
¨øy
 *
a
, 
ödex
)

100 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

101  
a
->
v
[
ödex
];

102 
	}
}

104 
ARRAYINLINE
 

105 
	$¨øy_£t
(c⁄° 
¨øy
 *
a
, 
ödex
, *
vÆ
)

107 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

108 
a
->
v
[
ödex
] = 
vÆ
;

109 
	}
}

111 
ARRAYINLINE
 

112 
	$¨øy_add
(
¨øy
 *
a
, *
vÆ
, *
ödex_ªt
)

114 
ödex
;

115 
ªt
;

117 
ödex
 = 
a
->
num
;

118 
ªt
 = 
	`¨øy_£tsize
(
a
, 
ödex
+1);

119 i‡(
ªt
) {

120  
ªt
;

122 
a
->
v
[
ödex
] = 
vÆ
;

123 i‡(
ödex_ªt
 !
NULL
) {

124 *
ödex_ªt
 = 
ödex
;

127 
	}
}

168 
	#DECLARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

169 
	sARRAY
 { \

170 
¨øy
 
¨r
; \

173 
INLINE
 
ARRAY
 *ARRAY##
	`_¸óã
(); \

174 
INLINE
 
ARRAY
##
	`_de°roy
(ARRAY *
a
); \

175 
INLINE
 
ARRAY
##
	`_öô
(ARRAY *
a
); \

176 
INLINE
 
ARRAY
##
	`_˛ónup
(ARRAY *
a
); \

177 
INLINE
 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
); \

178 
INLINE
 
T
 *
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
); \

179 
INLINE
 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
); \

180 
INLINE
 
ARRAY
##
	`_¥óŒoˇã
(ARRAY *
a
, 
num
); \

181 
INLINE
 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
); \

182 
INLINE
 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
); \

183 
INLINE
 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
)

	)

185 
	#DEFARRAY_BYTYPE
(
ARRAY
, 
T
, 
INLINE
) \

186 
INLINE
 
ARRAY
 * \

187 
ARRAY
##
	`_¸óã
() \

189 
ARRAY
 *
a
 = 
	`kmÆloc
((*a)); \

190 i‡(
a
 =
NULL
) { \

191  
NULL
; \

193 
	`¨øy_öô
(&
a
->
¨r
); \

194  
a
; \

197 
INLINE
 \

198 
ARRAY
##
	`_de°roy
(ARRAY *
a
) \

200 
	`¨øy_˛ónup
(&
a
->
¨r
); \

201 
	`k‰ì
(
a
); \

204 
INLINE
 \

205 
ARRAY
##
	`_öô
(ARRAY *
a
) \

207 
	`¨øy_öô
(&
a
->
¨r
); \

210 
INLINE
 \

211 
ARRAY
##
	`_˛ónup
(ARRAY *
a
) \

213 
	`¨øy_˛ónup
(&
a
->
¨r
); \

216 
INLINE
 \

217 
ARRAY
##
	`_num
(c⁄° ARRAY *
a
) \

219  
	`¨øy_num
(&
a
->
¨r
); \

222 
INLINE
 
T
 * \

223 
ARRAY
##
	`_gë
(c⁄° ARRAY *
a
, 
ödex
) \

225  (
T
 *)
	`¨øy_gë
(&
a
->
¨r
, 
ödex
); \

228 
INLINE
 \

229 
ARRAY
##
	`_£t
(ARRAY *
a
, 
ödex
, 
T
 *
vÆ
) \

231 
	`¨øy_£t
(&
a
->
¨r
, 
ödex
, (*)
vÆ
); \

234 
INLINE
 \

235 
ARRAY
##
	`_¥óŒoˇã
(ARRAY *
a
, 
num
) \

237  
	`¨øy_¥óŒoˇã
(&
a
->
¨r
, 
num
); \

240 
INLINE
 \

241 
ARRAY
##
	`_£tsize
(ARRAY *
a
, 
num
) \

243  
	`¨øy_£tsize
(&
a
->
¨r
, 
num
); \

246 
INLINE
 \

247 
ARRAY
##
	`_add
(ARRAY *
a
, 
T
 *
vÆ
, *
ödex_ªt
) \

249  
	`¨øy_add
(&
a
->
¨r
, (*)
vÆ
, 
ödex_ªt
); \

252 
INLINE
 \

253 
ARRAY
##
	`_ªmove
(ARRAY *
a
, 
ödex
) \

255 
	`¨øy_ªmove
(&
a
->
¨r
, 
ödex
); \

256 }

	)

258 
	#DECLARRAY
(
T
, 
INLINE
Ë
	`DECLARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

259 
	#DEFARRAY
(
T
, 
INLINE
Ë
	`DEFARRAY_BYTYPE
(T##
¨øy
, T, INLINE)

	)

265 
DECLARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

266 
DEFARRAY_BYTYPE
(
°rög¨øy
, , 
ARRAYINLINE
);

	@include/bitmap.h

30 #i‚de‡
_BITMAP_H_


31 
	#_BITMAP_H_


	)

48 
	gbôm≠
;

50 
bôm≠
 *
bôm≠_¸óã
(
nbôs
);

51 *
bôm≠_gëd©a
(
bôm≠
 *);

52 
bôm≠_Æloc
(
bôm≠
 *, *
ödex
);

53 
bôm≠_m¨k
(
bôm≠
 *, 
ödex
);

54 
bôm≠_unm¨k
(
bôm≠
 *, 
ödex
);

55 
bôm≠_is£t
(
bôm≠
 *, 
ödex
);

56 
bôm≠_de°roy
(
bôm≠
 *);

	@include/buf.h

30 #i‚de‡
_BUF_H_


31 
	#_BUF_H_


	)

33 
	gfs
;

54 
	gbuf
;

87 
buf„r_gë
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
, 
buf
 **
ªt
);

88 
buf„r_ªad
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
, 
buf
 **
ªt
);

89 
buf„r_gë_fsm™aged
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
,

90 
buf
 **
ªt
);

91 
buf„r_ªad_fsm™aged
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
,

92 
buf
 **
ªt
);

93 
buf„r_Êush
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
);

94 
buf„r_dr›
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
);

106 
buf„r_ªÀa£
(
buf
 *buf);

107 
buf„r_ªÀa£_™d_övÆid©e
(
buf
 *buf);

125 *
buf„r_gë_fsd©a
(
buf
 *buf);

126 *
buf„r_£t_fsd©a
(
buf
 *buf, *
fsd
);

143 *
buf„r_m≠
(
buf
 *buf);

144 
boﬁ
 
buf„r_is_dúty
(
buf
 *buf);

145 
boﬁ
 
buf„r_is_vÆid
(
buf
 *buf);

146 
buf„r_m¨k_dúty
(
buf
 *buf);

147 
buf„r_m¨k_vÆid
(
buf
 *buf);

148 
buf„r_wrôeout
(
buf
 *buf);

153 
sync_fs_buf„rs
(
fs
 *fs);

158 
dr›_fs_buf„rs
(
fs
 *fs);

180 
ª£rve_buf„rs
(
size_t
 
size
);

181 
uƒe£rve_buf„rs
(
size_t
 
size
);

183 
ª£rve_fsm™aged_buf„rs
(
cou¡
, 
size_t
 
size
);

184 
uƒe£rve_fsm™aged_buf„rs
(
cou¡
, 
size_t
 
size
);

189 
buf„r_¥öt°©s
();

194 
buf„r_boŸ°øp
();

	@include/cdefs.h

30 #i‚de‡
_CDEFS_H_


31 
	#_CDEFS_H_


	)

42 
	#COMPILE_ASSERT
(
x
Ë(()(°ru˘ { : ((x)?1:-1); }))

	)

48 
	#ARRAYCOUNT
(
¨r
Ë(◊ºË/ (◊º)[0]))

	)

56 #ifde‡
__GNUC__


57 
	#__PF
(
a
,
b
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,á, b)))

	)

58 
	#__DEAD
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

59 
	#__UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

61 
	#__PF
(
a
,
b
)

	)

62 
	#__DEAD


	)

63 
	#__UNUSED


	)

127 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__GNUC_STDC_INLINE__
)

129 
	#INLINE
 
ölöe


	)

131 #ñi‡
deföed
(
__STDC__
Ë&& 
__STDC_VERSION__
 >= 199901L

133 
	#INLINE
 
ölöe


	)

137 
	#INLINE
 
__UNUSED
 
ölöe


	)

	@include/clock.h

30 #i‚de‡
_CLOCK_H_


31 
	#_CLOCK_H_


	)

37 
	~<kîn/time.h
>

46 
	#HZ
 100

	)

48 
h¨d˛ock_boŸ°øp
();

49 
h¨d˛ock
();

55 
timî˛ock
();

60 
gëtime
(
time•ec
 *
ªt
);

69 
time•ec_add
(c⁄° 
time•ec
 *
t1
,

70 c⁄° 
time•ec
 *
t2
,

71 
time•ec
 *
ªt
);

72 
time•ec_sub
(c⁄° 
time•ec
 *
t1
,

73 c⁄° 
time•ec
 *
t2
,

74 
time•ec
 *
ªt
);

80 
˛ock¶ìp
(
£c⁄ds
);

	@include/copyinout.h

30 #i‚de‡
_COPYINOUT_H_


31 
	#_COPYINOUT_H_


	)

67 
c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
);

68 
c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
);

69 
c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
gŸ
);

70 
c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
gŸ
);

	@include/cpu.h

30 #i‚de‡
_CPU_H_


31 
	#_CPU_H_


	)

34 
	~<•ölock.h
>

35 
	~<thªadli°.h
>

36 
	~<machöe/vm.h
>

49 
	s˝u
 {

53 
˝u
 *
	mc_£lf
;

54 
	mc_numbî
;

55 
	mc_h¨dw¨e_numbî
;

60 
thªad
 *
	mc_cuπhªad
;

61 
thªadli°
 
	mc_zombõs
;

62 
	mc_h¨d˛ocks
;

63 
	mc_•ölocks
;

69 
boﬁ
 
	mc_isidÀ
;

70 
thªadli°
 
	mc_runqueue
;

71 
•ölock
 
	mc_runqueue_lock
;

86 
uöt32_t
 
	mc_ùi_≥ndög
;

87 
ébshoŸdown
 
	mc_shoŸdown
[
TLBSHOOTDOWN_MAX
];

88 
	mc_numshoŸdown
;

89 
•ölock
 
	mc_ùi_lock
;

94 
HANGMAN_ACTOR
(
c_h™gm™
);

110 
˝u
 *
˝u_¸óã
(
h¨dw¨e_numbî
);

111 
˝u_machdï_öô
(
˝u
 *);

112  
˝u_°¨t_£c⁄d¨y
();

113 
˝u_h©ch
(
so·w¨e_numbî
);

118 
˝u_idítify
(*
buf
, 
size_t
 
max
);

125 
˝u_úqoff
();

126 
˝u_úq⁄
();

142 
˝u_idÀ
();

143 
˝u_hÆt
();

164 
	#IPI_PANIC
 0

	)

165 
	#IPI_OFFLINE
 1

	)

166 
	#IPI_UNIDLE
 2

	)

167 
	#IPI_TLBSHOOTDOWN
 3

	)

169 
ùi_£nd
(
˝u
 *
èrgë
, 
code
);

170 
ùi_brﬂdˇ°
(
code
);

171 
ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
);

173 
öãΩro˚ss‹_öãºu±
();

	@include/current.h

30 #i‚de‡
_CURRENT_H_


31 
	#_CURRENT_H_


	)

66 
	~<machöe/cuºít.h
>

68 #i‡
deföed
(
__NEED_CURTHREAD
)

70 
	~<˝u.h
>

71 
	#cuπhªad
 
cur˝u
->
c_cuπhªad


	)

72 
	#CURCPU_EXISTS
(Ë(
cur˝u
 !
NULL
)

	)

76 #i‡
deföed
(
__NEED_CURCPU
)

78 
	~<thªad.h
>

79 
	#cur˝u
 
cuπhªad
->
t_˝u


	)

80 
	#CURCPU_EXISTS
(Ë(
cuπhªad
 !
NULL
)

	)

90 
	#cuΩroc
 (
cuπhªad
->
t_¥oc
)

	)

	@include/device.h

30 #i‚de‡
_DEVICE_H_


31 
	#_DEVICE_H_


	)

38 
	guio
;

43 
	sdevi˚
 {

44 c⁄° 
devi˚_›s
 *
	md_›s
;

46 
blk˙t_t
 
	md_blocks
;

47 
blksize_t
 
	md_blocksize
;

49 
dev_t
 
	md_devnumbî
;

51 *
	md_d©a
;

60 
	sdevi˚_›s
 {

61 (*
	mdev›_óch›í
)(
	mdevi˚
 *, 
	mÊags_‰om_›í
);

62 (*
	mdev›_io
)(
	mdevi˚
 *, 
	muio
 *);

63 (*
	mdev›_io˘l
)(
	mdevi˚
 *, 
	m›
, 
u£Ωå_t
 
	md©a
);

69 
	#DEVOP_EACHOPEN
(
d
, 
f
Ë((d)->
d_›s
->
	`dev›_óch›í
(d, f))

	)

70 
	#DEVOP_IO
(
d
, 
u
Ë((d)->
d_›s
->
	`dev›_io
(d, u))

	)

71 
	#DEVOP_IOCTL
(
d
, 
›
, 
p
Ë((d)->
d_›s
->
	`dev›_io˘l
(d, op,Ö))

	)

75 
vnode
 *
dev_¸óã_vnode
(
devi˚
 *
dev
);

78 
dev_un¸óã_vnode
(
vnode
 *
vn
);

81 
devnuŒ_¸óã
();

84 
dev_boŸ°øp
();

	@include/elf.h

30 #i‚de‡
_ELF_H_


31 
	#_ELF_H_


	)

44 
	~<machöe/ñf.h
>

50 
	#ELF_NIDENT
 16

	)

52 
	me_idít
[
ELF_NIDENT
];

53 
uöt16_t
 
	me_ty≥
;

54 
uöt16_t
 
	me_machöe
;

55 
uöt32_t
 
	me_vîsi⁄
;

56 
uöt32_t
 
	me_íåy
;

57 
uöt32_t
 
	me_phoff
;

58 
uöt32_t
 
	me_shoff
;

59 
uöt32_t
 
	me_Êags
;

60 
uöt16_t
 
	me_ehsize
;

61 
uöt16_t
 
	me_phítsize
;

62 
uöt16_t
 
	me_phnum
;

63 
uöt16_t
 
	me_shítsize
;

64 
uöt16_t
 
	me_shnum
;

65 
uöt16_t
 
	me_sh°∫dx
;

66 } 
	tElf32_Ehdr
;

69 
	#EI_MAG0
 0

	)

70 
	#EI_MAG1
 1

	)

71 
	#EI_MAG2
 2

	)

72 
	#EI_MAG3
 3

	)

73 
	#EI_CLASS
 4

	)

74 
	#EI_DATA
 5

	)

75 
	#EI_VERSION
 6

	)

76 
	#EI_OSABI
 7

	)

77 
	#EI_ABIVERSION
 8

	)

78 
	#EI_PAD
 9

	)

83 
	#ELFMAG0
 0x7f

	)

84 
	#ELFMAG1
 'E'

	)

85 
	#ELFMAG2
 'L'

	)

86 
	#ELFMAG3
 'F'

	)

89 
	#ELFCLASSNONE
 0

	)

90 
	#ELFCLASS32
 1

	)

91 
	#ELFCLASS64
 2

	)

94 
	#ELFDATANONE
 0

	)

95 
	#ELFDATA2LSB
 1

	)

96 
	#ELFDATA2MSB
 2

	)

99 
	#EV_NONE
 0

	)

100 
	#EV_CURRENT
 1

	)

103 
	#ELFOSABI_SYSV
 0

	)

104 
	#ELFOSABI_HPUX
 1

	)

105 
	#ELFOSABI_STANDALONE
 255

	)

111 
	#ET_NONE
 0

	)

112 
	#ET_REL
 1

	)

113 
	#ET_EXEC
 2

	)

114 
	#ET_DYN
 3

	)

115 
	#ET_CORE
 4

	)

116 
	#ET_NUM
 5

	)

121 
	#EM_NONE
 0

	)

122 
	#EM_M32
 1

	)

123 
	#EM_SPARC
 2

	)

124 
	#EM_386
 3

	)

125 
	#EM_68K
 4

	)

126 
	#EM_88K
 5

	)

127 
	#EM_486
 6

	)

128 
	#EM_860
 7

	)

129 
	#EM_MIPS
 8

	)

130 
	#EM_S370
 9

	)

131 
	#EM_MIPS_RS3_LE
 10

	)

132 
	#EM_RS6000
 11

	)

133 
	#EM_PARISC
 15

	)

134 
	#EM_NCUBE
 16

	)

135 
	#EM_VPP500
 17

	)

136 
	#EM_SPARC32PLUS
 18

	)

137 
	#EM_960
 19

	)

138 
	#EM_PPC
 20

	)

139 
	#EM_V800
 36

	)

140 
	#EM_FR20
 37

	)

141 
	#EM_RH32
 38

	)

142 
	#EM_RCE
 39

	)

143 
	#EM_ARM
 40

	)

144 
	#EM_ALPHA
 41

	)

145 
	#EM_SH
 42

	)

146 
	#EM_SPARCV9
 43

	)

147 
	#EM_TRICORE
 44

	)

148 
	#EM_ARC
 45

	)

149 
	#EM_H8_300
 46

	)

150 
	#EM_H8_300H
 47

	)

151 
	#EM_H8S
 48

	)

152 
	#EM_H8_500
 49

	)

153 
	#EM_IA_64
 50

	)

154 
	#EM_MIPS_X
 51

	)

155 
	#EM_COLDFIRE
 52

	)

156 
	#EM_68HC12
 53

	)

157 
	#EM_VAX
 75

	)

158 
	#EM_ALPHA_EXP
 36902

	)

159 
	#EM_NUM
 36903

	)

169 
uöt32_t
 
	mp_ty≥
;

170 
uöt32_t
 
	mp_off£t
;

171 
uöt32_t
 
	mp_vaddr
;

172 
uöt32_t
 
	mp_∑ddr
;

173 
uöt32_t
 
	mp_fûesz
;

174 
uöt32_t
 
	mp_memsz
;

175 
uöt32_t
 
	mp_Êags
;

176 
uöt32_t
 
	mp_Æign
;

177 } 
	tElf32_Phdr
;

180 
	#PT_NULL
 0

	)

181 
	#PT_LOAD
 1

	)

182 
	#PT_DYNAMIC
 2

	)

183 
	#PT_INTERP
 3

	)

184 
	#PT_NOTE
 4

	)

185 
	#PT_SHLIB
 5

	)

186 
	#PT_PHDR
 6

	)

187 
	#PT_NUM
 7

	)

188 
	#PT_MIPS_REGINFO
 0x70000000

	)

191 
	#PF_R
 0x4

	)

192 
	#PF_W
 0x2

	)

193 
	#PF_X
 0x1

	)

196 
Elf32_Ehdr
 
	tElf_Ehdr
;

197 
Elf32_Phdr
 
	tElf_Phdr
;

	@include/emufs.h

30 #i‚de‡
_EMUFS_H_


31 
	#_EMUFS_H_


	)

37 
	~<fs.h
>

38 
	~<vnode.h
>

44 
	semufs_vnode
 {

45 
vnode
 
	mev_v
;

46 
emu_so·c
 *
	mev_emu
;

47 
uöt32_t
 
	mev_h™dÀ
;

50 
	semufs_fs
 {

51 
fs
 
	mef_fs
;

52 
emu_so·c
 *
	mef_emu
;

53 
emufs_vnode
 *
	mef_roŸ
;

54 
vnodóºay
 *
	mef_vnodes
;

	@include/endian.h

30 #i‚de‡
_ENDIAN_H_


31 
	#_ENDIAN_H_


	)

33 
	~<kîn/ídün.h
>

39 
uöt16_t
 
bsw≠16
(uint16_t);

40 
uöt32_t
 
bsw≠32
(uint32_t);

41 
uöt64_t
 
bsw≠64
(uint64_t);

43 
uöt16_t
 
¡ohs
(uint16_t);

44 
uöt16_t
 
ht⁄s
(uint16_t);

45 
uöt32_t
 
¡ohl
(uint32_t);

46 
uöt32_t
 
ht⁄l
(uint32_t);

47 
uöt64_t
 
¡ohŒ
(uint64_t);

48 
uöt64_t
 
ht⁄Œ
(uint64_t);

51 
joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
);

52 
•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
);

	@include/fs.h

30 #i‚de‡
_FS_H_


31 
	#_FS_H_


	)

33 
	gbuf
;

34 
	gvnode
;

43 
	sfs
 {

44 *
	mfs_d©a
;

45 c⁄° 
fs_›s
 *
	mfs_›s
;

91 
	sfs_›s
 {

92 (*
	mfs›_sync
)(
	mfs
 *);

93 c⁄° *(*
	mfs›_gëvﬁ«me
)(
	mfs
 *);

94 (*
	mfs›_gëroŸ
)(
	mfs
 *, 
	mvnode
 **);

95 (*
	mfs›_unmou¡
)(
	mfs
 *);

96 (*
	mfs›_ªadblock
)(
	mfs
 *, 
	mdaddr_t
, *, 
	msize_t
);

97 (*
	mfs›_wrôeblock
)(
	mfs
 *, 
	mdaddr_t
, *
	mbufd©a
,

98 *, 
	msize_t
);

99 (*
	mfs›_©èchbuf
)(
	mfs
 *, 
	mdaddr_t
, 
	mbuf
 *);

100 (*
	mfs›_dëachbuf
)(
	mfs
 *, 
	mdaddr_t
, 
	mbuf
 *);

106 
	#FSOP_SYNC
(
fs
Ë((fs)->
fs_›s
->
	`fs›_sync
(fs))

	)

107 
	#FSOP_GETVOLNAME
(
fs
Ë((fs)->
fs_›s
->
	`fs›_gëvﬁ«me
(fs))

	)

108 
	#FSOP_GETROOT
(
fs
, 
ªt
Ë((fs)->
fs_›s
->
	`fs›_gëroŸ
(fs,Ñë))

	)

109 
	#FSOP_UNMOUNT
(
fs
Ë((fs)->
fs_›s
->
	`fs›_unmou¡
(fs))

	)

110 
	#FSOP_READBLOCK
(
fs
,
bn
,
±r
,
sz
) \

111 ((
fs
)->
fs_›s
->
	`fs›_ªadblock
(fs,
bn
,
±r
,
sz
))

	)

112 
	#FSOP_WRITEBLOCK
(
fs
,
bn
,
fsd©a
,
±r
,
sz
) \

113 ((
fs
)->
fs_›s
->
	`fs›_wrôeblock
(fs,
bn
,
fsd©a
, \

114 
±r
,
sz
))

	)

115 
	#FSOP_ATTACHBUF
(
fs
, 
blk
, 
buf
Ë((fs)->
fs_›s
->
	`fs›_©èchbuf
(fs,blk,buf))

	)

116 
	#FSOP_DETACHBUF
(
fs
, 
blk
, 
buf
Ë((fs)->
fs_›s
->
	`fs›_dëachbuf
(fs,blk,buf))

	)

119 
£mfs_boŸ°øp
();

	@include/hangman.h

30 #i‚de‡
HANGMAN_H


31 
	#HANGMAN_H


	)

38 
	~"›t-h™gm™.h
"

40 #i‡
OPT_HANGMAN


42 
	sh™gm™_a˘‹
 {

43 c⁄° *
	ma_«me
;

44 c⁄° 
h™gm™_lockabÀ
 *
	ma_waôög
;

47 
	sh™gm™_lockabÀ
 {

48 c⁄° *
	ml_«me
;

49 c⁄° 
h™gm™_a˘‹
 *
	ml_hﬁdög
;

52 
h™gm™_waô
(
h™gm™_a˘‹
 *
a
, 
h™gm™_lockabÀ
 *
l
);

53 
h™gm™_acquúe
(
h™gm™_a˘‹
 *
a
, 
h™gm™_lockabÀ
 *
l
);

54 
h™gm™_ªÀa£
(
h™gm™_a˘‹
 *
a
, 
h™gm™_lockabÀ
 *
l
);

56 
	#HANGMAN_ACTOR
(
sym
Ë
h™gm™_a˘‹
 
	)
sym

57 
	#HANGMAN_LOCKABLE
(
sym
Ë
h™gm™_lockabÀ
 
	)
sym

59 
	#HANGMAN_ACTORINIT
(
a
, 
n
Ë(◊)->
a_«me
 = (n), (a)->
a_waôög
 = 
NULL
)

	)

60 
	#HANGMAN_LOCKABLEINIT
(
l
, 
n
Ë(÷)->
l_«me
 = (n), (l)->
l_hﬁdög
 = 
NULL
)

	)

62 
	#HANGMAN_LOCKABLE_INITIALIZER
 { "•ölock", 
NULL
 }

	)

64 
	#HANGMAN_WAIT
(
a
, 
l
Ë
	`h™gm™_waô
◊,Ü)

	)

65 
	#HANGMAN_ACQUIRE
(
a
, 
l
Ë
	`h™gm™_acquúe
◊,Ü)

	)

66 
	#HANGMAN_RELEASE
(
a
, 
l
Ë
	`h™gm™_ªÀa£
◊,Ü)

	)

70 
	#HANGMAN_ACTOR
(
sym
)

	)

71 
	#HANGMAN_LOCKABLE
(
sym
)

	)

73 
	#HANGMAN_ACTORINIT
(
a
, 
«me
)

	)

74 
	#HANGMAN_LOCKABLEINIT
(
a
, 
«me
)

	)

76 
	#HANGMAN_LOCKABLE_INITIALIZER


	)

78 
	#HANGMAN_WAIT
(
a
, 
l
)

	)

79 
	#HANGMAN_ACQUIRE
(
a
, 
l
)

	)

80 
	#HANGMAN_RELEASE
(
a
, 
l
)

	)

	@include/kern/endian.h

30 #i‚de‡
_KERN_ENDIAN_H_


31 
	#_KERN_ENDIAN_H_


	)

42 
	#_LITTLE_ENDIAN
 1234

	)

43 
	#_BIG_ENDIAN
 4321

	)

44 
	#_PDP_ENDIAN
 3412

	)

47 
	~<kîn/machöe/ídün.h
>

	@include/kern/errmsg.h

30 #i‚de‡
_KERN_ERRMSG_H_


31 
	#_KERN_ERRMSG_H_


	)

41 c⁄° *c⁄° 
	gsys_îæi°
[] = {

112 c⁄° 
	gsys_√º
 = (
sys_îæi°
)/(const *);

	@include/kern/errno.h

30 #i‚de‡
_KERN_ERRNO_H_


31 
	#_KERN_ERRNO_H_


	)

45 
	#ENOSYS
 1

	)

47 
	#ENOMEM
 3

	)

48 
	#EAGAIN
 4

	)

49 
	#EINTR
 5

	)

50 
	#EFAULT
 6

	)

51 
	#ENAMETOOLONG
 7

	)

52 
	#EINVAL
 8

	)

53 
	#EPERM
 9

	)

54 
	#EACCES
 10

	)

55 
	#EMPROC
 11

	)

56 
	#ENPROC
 12

	)

57 
	#ENOEXEC
 13

	)

58 
	#E2BIG
 14

	)

59 
	#ESRCH
 15

	)

60 
	#ECHILD
 16

	)

61 
	#ENOTDIR
 17

	)

62 
	#EISDIR
 18

	)

63 
	#ENOENT
 19

	)

64 
	#ELOOP
 20

	)

65 
	#ENOTEMPTY
 21

	)

66 
	#EEXIST
 22

	)

67 
	#EMLINK
 23

	)

68 
	#EXDEV
 24

	)

69 
	#ENODEV
 25

	)

70 
	#ENXIO
 26

	)

71 
	#EBUSY
 27

	)

72 
	#EMFILE
 28

	)

73 
	#ENFILE
 29

	)

74 
	#EBADF
 30

	)

75 
	#EIOCTL
 31

	)

76 
	#EIO
 32

	)

77 
	#ESPIPE
 33

	)

78 
	#EPIPE
 34

	)

79 
	#EROFS
 35

	)

80 
	#ENOSPC
 36

	)

81 
	#EDQUOT
 37

	)

82 
	#EFBIG
 38

	)

83 
	#EFTYPE
 39

	)

84 
	#EDOM
 40

	)

85 
	#ERANGE
 41

	)

86 
	#EILSEQ
 42

	)

87 
	#ENOTSOCK
 43

	)

88 
	#EISSOCK
 44

	)

89 
	#EISCONN
 45

	)

90 
	#ENOTCONN
 46

	)

91 
	#ESHUTDOWN
 47

	)

92 
	#EPFNOSUPPORT
 48

	)

93 
	#ESOCKTNOSUPPORT
 49

	)

94 
	#EPROTONOSUPPORT
 50

	)

95 
	#EPROTOTYPE
 51

	)

96 
	#EAFNOSUPPORT
 52

	)

97 
	#ENOPROTOOPT
 53

	)

98 
	#EADDRINUSE
 54

	)

99 
	#EADDRNOTAVAIL
 55

	)

100 
	#ENETDOWN
 56

	)

101 
	#ENETUNREACH
 57

	)

102 
	#EHOSTDOWN
 58

	)

103 
	#EHOSTUNREACH
 59

	)

104 
	#ECONNREFUSED
 60

	)

105 
	#ETIMEDOUT
 61

	)

106 
	#ECONNRESET
 62

	)

107 
	#EMSGSIZE
 63

	)

108 
	#ENOTSUP
 64

	)

	@include/kern/fcntl.h

30 #i‚de‡
_KERN_FCNTL_H_


31 
	#_KERN_FCNTL_H_


	)

43 
	#O_RDONLY
 0

	)

44 
	#O_WRONLY
 1

	)

45 
	#O_RDWR
 2

	)

47 
	#O_CREAT
 4

	)

48 
	#O_EXCL
 8

	)

49 
	#O_TRUNC
 16

	)

50 
	#O_APPEND
 32

	)

51 
	#O_NOCTTY
 64

	)

54 
	#O_ACCMODE
 3

	)

61 
	#LOCK_SH
 1

	)

62 
	#LOCK_EX
 2

	)

63 
	#LOCK_UN
 3

	)

64 
	#LOCK_NB
 4

	)

71 
	#F_DUPFD
 0

	)

72 
	#F_GETFD
 1

	)

73 
	#F_SETFD
 2

	)

74 
	#F_GETFL
 3

	)

75 
	#F_SETFL
 4

	)

76 
	#F_GETOWN
 5

	)

77 
	#F_SETOWN
 6

	)

78 
	#F_GETLK
 7

	)

79 
	#F_SETLK
 8

	)

80 
	#F_SETLKW
 9

	)

83 
	#FD_CLOEXEC
 1

	)

86 
	#F_RDLCK
 0

	)

87 
	#F_WRLCK
 1

	)

88 
	#F_UNLCK
 2

	)

91 
	sÊock
 {

92 
off_t
 
	ml_°¨t
;

93 
	ml_whí˚
;

94 
	ml_ty≥
;

95 
off_t
 
	ml_Àn
;

96 
pid_t
 
	ml_pid
;

	@include/kern/ioctl.h

30 #i‚de‡
_KERN_IOCTL_H_


31 
	#_KERN_IOCTL_H_


	)

	@include/kern/iovec.h

30 #i‚de‡
_KERN_IOVEC_H_


31 
	#_KERN_IOVEC_H_


	)

38 
	siovec
 {

57 #ifde‡
_KERNEL


59 
u£Ωå_t
 
	miov_uba£
;

60 *
	miov_kba£
;

63 *
	miov_ba£
;

65 
size_t
 
	miov_Àn
;

	@include/kern/limits.h

30 #i‚de‡
_KERN_LIMITS_H_


31 
	#_KERN_LIMITS_H_


	)

60 
	#__NAME_MAX
 255

	)

63 
	#__PATH_MAX
 1024

	)

66 
	#__ARG_MAX
 (64 * 1024)

	)

77 
	#__PID_MIN
 2

	)

80 
	#__PID_MAX
 32767

	)

83 
	#__OPEN_MAX
 128

	)

86 
	#__PIPE_BUF
 512

	)

95 
	#__NGROUPS_MAX
 32

	)

98 
	#__LOGIN_NAME_MAX
 17

	)

106 
	#__IOV_MAX
 1024

	)

	@include/kern/reboot.h

30 #i‚de‡
_KERN_REBOOT_H_


31 
	#_KERN_REBOOT_H_


	)

40 
	#RB_REBOOT
 0

	)

41 
	#RB_HALT
 1

	)

42 
	#RB_POWEROFF
 2

	)

	@include/kern/resource.h

30 #i‚de‡
_KERN_RESOURCE_H_


31 
	#_KERN_RESOURCE_H_


	)

41 
	#PRIO_MIN
 (-20)

	)

42 
	#PRIO_MAX
 20

	)

45 
	#PRIO_PROCESS
 0

	)

46 
	#PRIO_PGRP
 1

	)

47 
	#PRIO_USER
 2

	)

50 
	#RUSAGE_SELF
 0

	)

51 
	#RUSAGE_CHILDREN
 (-1)

	)

53 
	srußge
 {

54 
timevÆ
 
	mru_utime
;

55 
timevÆ
 
	mru_°ime
;

56 
__size_t
 
	mru_maxrss
;

57 
__cou¡î_t
 
	mru_ixrss
;

58 
__cou¡î_t
 
	mru_idrss
;

59 
__cou¡î_t
 
	mru_i§ss
;

60 
__cou¡î_t
 
	mru_möÊt
;

61 
__cou¡î_t
 
	mru_majÊt
;

62 
__cou¡î_t
 
	mru_nsw≠
;

63 
__cou¡î_t
 
	mru_öblock
;

64 
__cou¡î_t
 
	mru_oublock
;

65 
__cou¡î_t
 
	mru_msgrcv
;

66 
__cou¡î_t
 
	mru_msg¢d
;

67 
__cou¡î_t
 
	mru_nsig«ls
;

68 
__cou¡î_t
 
	mru_nvcsw
;

69 
__cou¡î_t
 
	mru_nivcsw
;

74 
	#RLIMIT_NPROC
 0

	)

75 
	#RLIMIT_NOFILE
 1

	)

76 
	#RLIMIT_CPU
 2

	)

77 
	#RLIMIT_DATA
 3

	)

78 
	#RLIMIT_STACK
 4

	)

79 
	#RLIMIT_MEMLOCK
 5

	)

80 
	#RLIMIT_RSS
 6

	)

81 
	#RLIMIT_CORE
 7

	)

82 
	#RLIMIT_FSIZE
 8

	)

83 
	#__RLIMIT_NUM
 9

	)

85 
	sæimô
 {

86 
__æim_t
 
	mæim_cur
;

87 
__æim_t
 
	mæim_max
;

90 
	#RLIM_INFINITY
 (~(
__æim_t
)0)

	)

	@include/kern/seek.h

30 #i‚de‡
_KERN_SEEK_H_


31 
	#_KERN_SEEK_H_


	)

42 
	#SEEK_SET
 0

	)

43 
	#SEEK_CUR
 1

	)

44 
	#SEEK_END
 2

	)

	@include/kern/sfs.h

30 #i‚de‡
_KERN_SFS_H_


31 
	#_KERN_SFS_H_


	)

39 
	#SFS_MAGIC
 0xabadf001

	)

40 
	#SFS_BLOCKSIZE
 512

	)

41 
	#SFS_VOLNAME_SIZE
 32

	)

42 
	#SFS_NDIRECT
 15

	)

43 
	#SFS_NINDIRECT
 1

	)

44 
	#SFS_NDINDIRECT
 1

	)

45 
	#SFS_NTINDIRECT
 1

	)

46 
	#SFS_DBPERIDB
 128

	)

47 
	#SFS_NAMELEN
 60

	)

48 
	#SFS_SUPER_BLOCK
 0

	)

49 
	#SFS_FREEMAP_START
 2

	)

50 
	#SFS_NOINO
 0

	)

51 
	#SFS_ROOTDIR_INO
 1

	)

54 
	#SFS_BITSPERBLOCK
 (
SFS_BLOCKSIZE
 * 
CHAR_BIT
)

	)

57 
	#SFS_ROUNDUP
(
a
,
b
Ë(((◊)+(b)-1)/(b))*b)

	)

60 
	#SFS_FREEMAPBITS
(
nblocks
Ë
	`SFS_ROUNDUP
“blocks, 
SFS_BITSPERBLOCK
)

	)

63 
	#SFS_FREEMAPBLOCKS
(
nblocks
Ë(
	`SFS_FREEMAPBITS
“blocks)/
SFS_BITSPERBLOCK
)

	)

66 
	#SFS_TYPE_INVAL
 0

	)

67 
	#SFS_TYPE_FILE
 1

	)

68 
	#SFS_TYPE_DIR
 2

	)

73 
	ssfs_su≥rblock
 {

74 
uöt32_t
 
	msb_magic
;

75 
uöt32_t
 
	msb_nblocks
;

76 
	msb_vﬁ«me
[
SFS_VOLNAME_SIZE
];

77 
uöt32_t
 
	msb_jou∫Æ°¨t
;

78 
uöt32_t
 
	msb_jou∫Æblocks
;

79 
uöt32_t
 
	mª£rved
[116];

85 
	ssfs_döode
 {

86 
uöt32_t
 
	msfi_size
;

87 
uöt16_t
 
	msfi_ty≥
;

88 
uöt16_t
 
	msfi_lökcou¡
;

89 
uöt32_t
 
	msfi_dúe˘
[
SFS_NDIRECT
];

90 
uöt32_t
 
	msfi_ödúe˘
;

91 
uöt32_t
 
	msfi_dödúe˘
;

92 
uöt32_t
 
	msfi_tödúe˘
;

93 
uöt32_t
 
	msfi_wa°e
[128-5-
SFS_NDIRECT
];

99 
	ssfs_dúíåy
 {

100 
uöt32_t
 
	msfd_öo
;

101 
	msfd_«me
[
SFS_NAMELEN
];

128 
	#SFS_CONINFO_CLASS
(
ci
Ë((ciË>> 63Ë

	)

129 
	#SFS_CONINFO_TYPE
(
ci
Ë(((ciË>> 56Ë& 0x7fË

	)

130 
	#SFS_CONINFO_LEN
(
ci
Ë((((ciË>> 48Ë& 0xff)*2Ë

	)

131 
	#SFS_CONINFO_LSN
(
ci
Ë((ciË& 0xffffffffffffË

	)

132 
	#SFS_MKCONINFO
(
˛
, 
ty
, 
Àn
, 
l¢
) \

134 ((
uöt64_t
)(
˛
) << 63) | \

135 ((
uöt64_t
)(
ty
) << 56) | \

136 ((
uöt64_t
)((
Àn
 + 1) / 2) << 48) | \

137 (
l¢
) \

138 )

	)

141 
	#SFS_JPHYS_CONTAINER
 0

	)

142 
	#SFS_JPHYS_CLIENT
 1

	)

145 
	#SFS_JPHYS_INVALID
 0

	)

146 
	#SFS_JPHYS_PAD
 1

	)

147 
	#SFS_JPHYS_TRIM
 2

	)

150 
	ssfs_jphys_hódî
 {

151 
uöt64_t
 
	mjh_c⁄öfo
;

155 
	ssfs_jphys_åim
 {

156 
uöt64_t
 
	mjt_èûl¢
;

	@include/kern/signal.h

37 #i‚de‡
_KERN_SIGNAL_H_


38 
	#_KERN_SIGNAL_H_


	)

56 
	#SIGHUP
 1

	)

57 
	#SIGINT
 2

	)

58 
	#SIGQUIT
 3

	)

59 
	#SIGILL
 4

	)

60 
	#SIGTRAP
 5

	)

61 
	#SIGABRT
 6

	)

62 
	#SIGEMT
 7

	)

63 
	#SIGFPE
 8

	)

64 
	#SIGKILL
 9

	)

65 
	#SIGBUS
 10

	)

66 
	#SIGSEGV
 11

	)

67 
	#SIGSYS
 12

	)

68 
	#SIGPIPE
 13

	)

69 
	#SIGALRM
 14

	)

70 
	#SIGTERM
 15

	)

71 
	#SIGURG
 16

	)

72 
	#SIGSTOP
 17

	)

73 
	#SIGTSTP
 18

	)

74 
	#SIGCONT
 19

	)

75 
	#SIGCHLD
 20

	)

76 
	#SIGTTIN
 21

	)

77 
	#SIGTTOU
 22

	)

78 
	#SIGIO
 23

	)

79 
	#SIGXCPU
 24

	)

80 
	#SIGXFSZ
 25

	)

81 
	#SIGVTALRM
 26

	)

82 
	#SIGPROF
 27

	)

83 
	#SIGWINCH
 28

	)

84 
	#SIGINFO
 29

	)

85 
	#SIGUSR1
 20

	)

86 
	#SIGUSR2
 31

	)

87 
	#SIGPWR
 32

	)

88 
	#_NSIG
 32

	)

92 
__u32
 
	tsig£t_t
;

95 
	#SA_ONSTACK
 1

	)

96 
	#SA_RESTART
 2

	)

97 
	#SA_RESETHAND
 4

	)

100 
	#SIG_BLOCK
 1

	)

101 
	#SIG_UNBLOCK
 2

	)

102 
	#SIG_SETMASK
 3

	)

105 (*
	t__sigfunc
)();

108 
	#SIG_DFL
 ((
__sigfunc
Ë0Ë

	)

109 
	#SIG_IGN
 ((
__sigfunc
Ë1Ë

	)

114 
	ssiga˘i⁄
 {

115 
__sigfunc
 
ß_h™dÀr
;

116 
sig£t_t
 
ß_mask
;

117 
ß_Êags
;

124 
	ssigÆt°ack
 {

125 *
ss_•
;

126 
size_t
 
ss_size
;

127 
ss_Êags
;

	@include/kern/socket.h

30 #i‚de‡
_KERN_SOCKET_H_


31 
	#_KERN_SOCKET_H_


	)

43 
	#SOCK_STREAM
 1

	)

44 
	#SOCK_DGRAM
 2

	)

45 
	#SOCK_RAW
 3

	)

48 
	#AF_UNSPEC
 0

	)

49 
	#AF_UNIX
 1

	)

50 
	#AF_INET
 2

	)

51 
	#AF_INET6
 3

	)

54 
	#PF_UNSPEC
 
AF_UNSPEC


	)

55 
	#PF_UNIX
 
AF_UNIX


	)

56 
	#PF_INET
 
AF_INET


	)

57 
	#PF_INET6
 
AF_INET6


	)

73 
	ssockaddr
 {

74 
__u8
 
	mß_Àn
;

75 
__u8
 
	mß_Ámûy
;

78 
	#_SS_SIZE
 128

	)

79 
	ssockaddr_°‹age
 {

80 
__u8
 
	mss_Àn
;

81 
__u8
 
	mss_Ámûy
;

82 
__u8
 
	m__ss_∑d1
;

83 
__u8
 
	m__ss_∑d2
;

84 
__u32
 
	m__ss_∑d3
;

85 
__u64
 
	m__ss_∑d4
;

86 
	m__ss_∑d5
[
_SS_SIZE
 - (
__u64
Ë- (
__u32
Ë- 4*(
__u8
)];

98 
	smsghdr
 {

99 *
	mmsg_«me
;

100 
sockÀn_t
 
	mmsg_«mñí
;

101 
iovec
 *
	mmsg_iov
;

102 
	mmsg_iovÀn
;

103 *
	mmsg_c⁄åﬁ
;

104 
sockÀn_t
 
	mmsg_c⁄åﬁÀn
;

105 
	mmsg_Êags
;

108 
	scmsghdr
 {

109 
sockÀn_t
 
	mcmsg_Àn
;

110 
	mcmsg_Àvñ
;

111 
	mcmsg_ty≥
;

	@include/kern/stat.h

30 #i‚de‡
_KERN_STAT_H_


31 
	#_KERN_STAT_H_


	)

42 
	s°©
 {

44 
off_t
 
	m°_size
;

45 
mode_t
 
	m°_mode
;

46 
∆ök_t
 
	m°_∆ök
;

47 
blk˙t_t
 
	m°_blocks
;

50 
dev_t
 
	m°_dev
;

51 
öo_t
 
	m°_öo
;

52 
dev_t
 
	m°_rdev
;

55 
time_t
 
	m°_©ime
;

56 
time_t
 
	m°_˘ime
;

57 
time_t
 
	m°_mtime
;

58 
__u32
 
	m°_©imí£c
;

59 
__u32
 
	m°_˘imí£c
;

60 
__u32
 
	m°_mtimí£c
;

63 
uid_t
 
	m°_uid
;

64 
gid_t
 
	m°_gid
;

67 
__u32
 
	m°_gí
;

68 
blksize_t
 
	m°_blksize
;

	@include/kern/stattypes.h

30 #i‚de‡
_KERN_STATTYPES_H_


31 
	#_KERN_STATTYPES_H_


	)

45 
	#_S_IFMT
 070000

	)

46 
	#_S_IFREG
 010000

	)

47 
	#_S_IFDIR
 020000

	)

48 
	#_S_IFLNK
 030000

	)

49 
	#_S_IFIFO
 040000

	)

50 
	#_S_IFSOCK
 050000

	)

51 
	#_S_IFCHR
 060000

	)

52 
	#_S_IFBLK
 070000

	)

	@include/kern/syscall.h

30 #i‚de‡
_KERN_SYSCALL_H_


31 
	#_KERN_SYSCALL_H_


	)

50 
	#SYS_f‹k
 0

	)

51 
	#SYS_vf‹k
 1

	)

52 
	#SYS_execv
 2

	)

53 
	#SYS__exô
 3

	)

54 
	#SYS_waôpid
 4

	)

55 
	#SYS_gëpid
 5

	)

56 
	#SYS_gëµid
 6

	)

58 
	#SYS_sbrk
 7

	)

59 
	#SYS_mm≠
 8

	)

60 
	#SYS_munm≠
 9

	)

61 
	#SYS_m¥Ÿe˘
 10

	)

69 
	#SYS_umask
 17

	)

70 
	#SYS_is£tugid
 18

	)

71 
	#SYS_gëªsuid
 19

	)

72 
	#SYS_£åesuid
 20

	)

73 
	#SYS_gëªsgid
 21

	)

74 
	#SYS_£åesgid
 22

	)

75 
	#SYS_gëgroups
 23

	)

76 
	#SYS_£tgroups
 24

	)

77 
	#SYS___gëlogö
 25

	)

78 
	#SYS___£éogö
 26

	)

80 
	#SYS_kûl
 27

	)

81 
	#SYS_siga˘i⁄
 28

	)

82 
	#SYS_sig≥ndög
 29

	)

83 
	#SYS_sig¥ocmask
 30

	)

84 
	#SYS_sigsu•íd
 31

	)

85 
	#SYS_sigªtu∫
 32

	)

105 
	#SYS_›í
 45

	)

106 
	#SYS_pùe
 46

	)

107 
	#SYS_dup
 47

	)

108 
	#SYS_dup2
 48

	)

109 
	#SYS_˛o£
 49

	)

110 
	#SYS_ªad
 50

	)

111 
	#SYS_¥ód
 51

	)

114 
	#SYS_gëdúíåy
 54

	)

115 
	#SYS_wrôe
 55

	)

116 
	#SYS_pwrôe
 56

	)

119 
	#SYS_l£ek
 59

	)

120 
	#SYS_Êock
 60

	)

121 
	#SYS_·runˇã
 61

	)

122 
	#SYS_fsync
 62

	)

123 
	#SYS_f˙é
 63

	)

124 
	#SYS_io˘l
 64

	)

125 
	#SYS_£À˘
 65

	)

126 
	#SYS_pﬁl
 66

	)

129 
	#SYS_lök
 67

	)

130 
	#SYS_ªmove
 68

	)

131 
	#SYS_mkdú
 69

	)

132 
	#SYS_rmdú
 70

	)

133 
	#SYS_mkfifo
 71

	)

134 
	#SYS_ª«me
 72

	)

135 
	#SYS_ac˚ss
 73

	)

137 
	#SYS_chdú
 74

	)

138 
	#SYS_fchdú
 75

	)

139 
	#SYS___gëcwd
 76

	)

141 
	#SYS_symlök
 77

	)

142 
	#SYS_ªadlök
 78

	)

144 
	#SYS_mou¡
 79

	)

145 
	#SYS_unmou¡
 80

	)

149 
	#SYS_°©
 81

	)

150 
	#SYS_f°©
 82

	)

151 
	#SYS_l°©
 83

	)

153 
	#SYS_utimes
 84

	)

154 
	#SYS_futimes
 85

	)

155 
	#SYS_lutimes
 86

	)

157 
	#SYS_chmod
 87

	)

158 
	#SYS_chown
 88

	)

159 
	#SYS_fchmod
 89

	)

160 
	#SYS_fchown
 90

	)

161 
	#SYS_lchmod
 91

	)

162 
	#SYS_lchown
 92

	)

172 
	#SYS_sockë
 98

	)

173 
	#SYS_böd
 99

	)

174 
	#SYS_c⁄√˘
 100

	)

175 
	#SYS_li°í
 101

	)

176 
	#SYS_ac˚±
 102

	)

178 
	#SYS_shutdown
 104

	)

179 
	#SYS_gësock«me
 105

	)

180 
	#SYS_gë≥î«me
 106

	)

181 
	#SYS_gësock›t
 107

	)

182 
	#SYS_£tsock›t
 108

	)

189 
	#SYS___time
 113

	)

190 
	#SYS___£âime
 114

	)

191 
	#SYS_«no¶ìp
 115

	)

196 
	#SYS_sync
 118

	)

197 
	#SYS_ªboŸ
 119

	)

	@include/kern/time.h

30 #i‚de‡
_KERN_TIME_H_


31 
	#_KERN_TIME_H_


	)

43 
	stimevÆ
 {

44 
__time_t
 
	mtv_£c
;

45 
__i32
 
	mtv_u£c
;

48 
	stime•ec
 {

49 
__time_t
 
	mtv_£c
;

50 
__i32
 
	mtv_n£c
;

59 
	#ITIMER_REAL
 0

	)

60 
	#ITIMER_VIRTUAL
 1

	)

61 
	#ITIMER_PROF
 2

	)

64 
	sôimîvÆ
 {

65 
timevÆ
 
	mô_öãrvÆ
;

66 
timevÆ
 
	mô_vÆue
;

	@include/kern/types.h

30 #i‚de‡
_KERN_TYPES_H_


31 
	#_KERN_TYPES_H_


	)

34 
	~<kîn/machöe/ty≥s.h
>

64 
__u32
 
	t__blk˙t_t
;

65 
__u32
 
	t__blksize_t
;

66 
__u64
 
	t__cou¡î_t
;

67 
__u32
 
	t__daddr_t
;

68 
__u32
 
	t__dev_t
;

69 
__u32
 
	t__fsid_t
;

70 
__i32
 
	t__gid_t
;

71 
__u32
 
	t__ö_addr_t
;

72 
__u32
 
	t__ö_p‹t_t
;

73 
__u32
 
	t__öo_t
;

74 
__u32
 
	t__mode_t
;

75 
__u16
 
	t__∆ök_t
;

76 
__i64
 
	t__off_t
;

77 
__i32
 
	t__pid_t
;

78 
__u64
 
	t__æim_t
;

79 
__u8
 
	t__ß_Ámûy_t
;

80 
__i64
 
	t__time_t
;

81 
__i32
 
	t__uid_t
;

83 
	t__nfds_t
;

84 
	t__sockÀn_t
;

87 #ifde‡
__GNUC__


88 
__buûtö_va_li°
 
	t__va_li°
;

	@include/kern/unistd.h

30 #i‚de‡
_KERN_UNISTD_H_


31 
	#_KERN_UNISTD_H_


	)

34 
	#STDIN_FILENO
 0

	)

35 
	#STDOUT_FILENO
 1

	)

36 
	#STDERR_FILENO
 2

	)

	@include/kern/wait.h

30 #i‚de‡
_KERN_WAIT_H_


31 
	#_KERN_WAIT_H_


	)

39 
	#WNOHANG
 1

	)

40 
	#WUNTRACED
 2

	)

43 
	#WAIT_ANY
 (-1Ë

	)

44 
	#WAIT_MYPGRP
 0

	)

54 
	#_WWHAT
(
x
Ë((x)&3Ë

	)

55 
	#_WVAL
(
x
Ë((x)>>2Ë

	)

56 
	#_MKWVAL
(
x
Ë((x)<<2Ë

	)

59 
	#__WEXITED
 0

	)

60 
	#__WSIGNALED
 1

	)

61 
	#__WCORED
 2

	)

62 
	#__WSTOPPED
 3

	)

65 
	#WIFEXITED
(
x
Ë(
	`_WWHAT
(x)==
__WEXITED
)

	)

66 
	#WIFSIGNALED
(
x
Ë(
	`_WWHAT
(x)==
__WSIGNALED
 || _WWHAT(x)==
__WCORED
)

	)

67 
	#WIFSTOPPED
(
x
Ë(
	`_WWHAT
(x)==
__WSTOPPED
)

	)

68 
	#WEXITSTATUS
(
x
Ë(
	`_WVAL
(x))

	)

69 
	#WTERMSIG
(
x
Ë(
	`_WVAL
(x))

	)

70 
	#WSTOPSIG
(
x
Ë(
	`_WVAL
(x))

	)

71 
	#WCOREDUMP
(
x
Ë(
	`_WWHAT
(x)==
__WCORED
)

	)

74 
	#_MKWAIT_EXIT
(
x
Ë(
	`_MKWVAL
(x)|
__WEXITED
)

	)

75 
	#_MKWAIT_SIG
(
x
Ë(
	`_MKWVAL
(x)|
__WSIGNALED
)

	)

76 
	#_MKWAIT_CORE
(
x
Ë(
	`_MKWVAL
(x)|
__WCORED
)

	)

77 
	#_MKWAIT_STOP
(
x
Ë(
	`_MKWVAL
(x)|
__WSTOPPED
)

	)

	@include/lib.h

30 #i‚de‡
_LIB_H_


31 
	#_LIB_H_


	)

41 
	~<cdefs.h
>

60 
	~"›t-nﬂs£πs.h
"

62 #i‡
OPT_NOASSERTS


63 
	#KASSERT
(
ex¥
Ë(()”x¥))

	)

65 
	#KASSERT
(
ex¥
) \

66 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

70 
	#DEBUGASSERT
(
ex¥
Ë(()”x¥))

	)

72 
	#DEBUGASSERT
(
ex¥
) \

73 ((
ex¥
Ë? ()0 : 
	`badas£π
(#ex¥, 
__FILE__
, 
__LINE__
, 
__func__
))

	)

79 
	#DB_LOCORE
 0x0001

	)

80 
	#DB_SYSCALL
 0x0002

	)

81 
	#DB_INTERRUPT
 0x0004

	)

82 
	#DB_DEVICE
 0x0008

	)

83 
	#DB_THREADS
 0x0010

	)

84 
	#DB_VM
 0x0020

	)

85 
	#DB_EXEC
 0x0040

	)

86 
	#DB_VFS
 0x0080

	)

87 
	#DB_SEMFS
 0x0100

	)

88 
	#DB_SFS
 0x0200

	)

89 
	#DB_NET
 0x0400

	)

90 
	#DB_NETFS
 0x0800

	)

91 
	#DB_KMALLOC
 0x1000

	)

93 
uöt32_t
 
dbÊags
;

111 
	#DEBUG
(
d
, ...Ë((
dbÊags
 & (d)Ë? 
	`k¥ötf
(
__VA_ARGS__
Ë: 0)

	)

118 
	#RANDOM_MAX
 (
	`øndmax
())

	)

119 
uöt32_t
 
øndmax
();

120 
uöt32_t
 
øndom
();

129 *
kmÆloc
(
size_t
 
size
);

130 
k‰ì
(*
±r
);

131 
khóp_¥öt°©s
();

132 
khóp_√xtgíî©i⁄
();

133 
khóp_dump
();

134 
khóp_dum∑Œ
();

142 
size_t
 
°æí
(c⁄° *
°r
);

143 
°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

144 *
°r˝y
(*
de°
, c⁄° *
§c
);

145 *
°rˇt
(*
de°
, c⁄° *
§c
);

146 *
k°rdup
(c⁄° *
°r
);

147 *
°rchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

148 *
°ºchr
(c⁄° *
£¨ched
, 
£¨chf‹
);

149 *
°πok_r
(*
buf
, c⁄° *
£ps
, **
c⁄ãxt
);

151 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

152 *
memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
Àn
);

153 *
mem£t
(*
block
, 
ch
, 
size_t
 
Àn
);

154 
bzîo
(*
±r
, 
size_t
 
Àn
);

155 
©oi
(c⁄° *
°r
);

157 
	$¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, ...Ë
	`__PF
(3,4);

159 c⁄° *
	`°ªº‹
(
îrcode
);

164 
	`putch
(
ch
);

165 
	`gëch
();

166 
	`bìp
();

181 
	$k¥ötf
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

182 
__DEAD
 
	$∑nic
(c⁄° *
f‹m©
, ...Ë
	`__PF
(1,2);

183 
__DEAD
 
	`badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
,

184 
löe
, c⁄° *
func
);

186 
	`kgës
(*
buf
, 
size_t
 
maxbuÊí
);

188 
	`k¥ötf_boŸ°øp
();

194 
	#DIVROUNDUP
(
a
,
b
Ë((◊)+(b)-1)/(b))

	)

195 
	#ROUNDUP
(
a
,
b
Ë(
	`DIVROUNDUP
◊,b)*(b))

	)

	@include/limits.h

30 #i‚de‡
_LIMITS_H_


31 
	#_LIMITS_H_


	)

38 
	~<kîn/limôs.h
>

41 
	#NAME_MAX
 
__NAME_MAX


	)

42 
	#PATH_MAX
 
__PATH_MAX


	)

43 
	#ARG_MAX
 
__ARG_MAX


	)

44 
	#PID_MIN
 
__PID_MIN


	)

45 
	#PID_MAX
 
__PID_MAX


	)

46 
	#PIPE_BUF
 
__PIPE_BUF


	)

47 
	#NGROUPS_MAX
 
__NGROUPS_MAX


	)

48 
	#LOGIN_NAME_MAX
 
__LOGIN_NAME_MAX


	)

49 
	#OPEN_MAX
 
__OPEN_MAX


	)

50 
	#IOV_MAX
 
__IOV_MAX


	)

	@include/mainbus.h

30 #i‚de‡
_MAINBUS_H_


31 
	#_MAINBUS_H_


	)

38 
	g˝u
;

39 
	gå≠‰ame
;

43 
maöbus_boŸ°øp
();

46 
maöbus_°¨t_˝us
();

49 
maöbus_öãºu±
(
å≠‰ame
 *);

53 
size_t
 
maöbus_ømsize
();

56 
maöbus_£nd_ùi
(
˝u
 *
èrgë
);

64 
maöbus_hÆt
();

65 
maöbus_powîoff
();

66 
maöbus_ªboŸ
();

67 
maöbus_∑nic
();

	@include/membar.h

30 #i‚de‡
_MEMBAR_H_


31 
	#_MEMBAR_H_


	)

80 #i‚de‡
MEMBAR_INLINE


81 
	#MEMBAR_INLINE
 
INLINE


	)

84 
MEMBAR_INLINE
 
memb¨_lﬂd_lﬂd
();

85 
MEMBAR_INLINE
 
memb¨_°‹e_°‹e
();

86 
MEMBAR_INLINE
 
memb¨_°‹e_™y
();

87 
MEMBAR_INLINE
 
memb¨_™y_°‹e
();

88 
MEMBAR_INLINE
 
memb¨_™y_™y
();

91 
	~<machöe/memb¨.h
>

	@include/proc.h

30 #i‚de‡
_PROC_H_


31 
	#_PROC_H_


	)

39 
	~<•ölock.h
>

41 
	gaddr•a˚
;

42 
	gthªad
;

43 
	gvnode
;

62 
	s¥oc
 {

63 *
	mp_«me
;

64 
•ölock
 
	mp_lock
;

65 
	mp_numthªads
;

68 
addr•a˚
 *
	mp_addr•a˚
;

71 
vnode
 *
	mp_cwd
;

77 
¥oc
 *
k¥oc
;

80 
¥oc_boŸ°øp
();

83 
¥oc
 *
¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
);

86 
¥oc_de°roy
(
¥oc
 *proc);

89 
¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
);

92 
¥oc_ªmthªad
(
thªad
 *
t
);

95 
addr•a˚
 *
¥oc_gëas
();

98 
addr•a˚
 *
¥oc_£ès
(addrspace *);

	@include/setjmp.h

30 #i‚de‡
_SETJMP_H_


31 
	#_SETJMP_H_


	)

38 
	~<kîn/machöe/£tjmp.h
>

40 
£tjmp
(
jmp_buf
 
jb
);

41 
l⁄gjmp
(
jmp_buf
 
jb
, 
ªtvÆ
);

	@include/sfs.h

30 #i‚de‡
_SFS_H_


31 
	#_SFS_H_


	)

39 
	gbuf
;

44 
	~<fs.h
>

45 
	~<vnode.h
>

51 
	~<kîn/sfs.h
>

56 
	ssfs_vnode
 {

57 
vnode
 
	msv_absvn
;

58 
uöt32_t
 
	msv_öo
;

59 
	msv_ty≥
;

60 
buf
 *
	msv_döobuf
;

61 
uöt32_t
 
	msv_döobufcou¡
;

62 
lock
 *
	msv_lock
;

68 
	ssfs_fs
 {

69 
fs
 
	msfs_absfs
;

70 
sfs_su≥rblock
 
	msfs_sb
;

71 
boﬁ
 
	msfs_su≥rdúty
;

72 
devi˚
 *
	msfs_devi˚
;

73 
vnodóºay
 *
	msfs_vnodes
;

74 
bôm≠
 *
	msfs_‰ìm≠
;

75 
boﬁ
 
	msfs_‰ìm≠dúty
;

76 
lock
 *
	msfs_v∆ock
;

77 
lock
 *
	msfs_‰ìm≠lock
;

78 
lock
 *
	msfs_ª«mñock
;

80 
sfs_jphys
 *
	msfs_jphys
;

86 
sfs_mou¡
(c⁄° *
devi˚
);

	@include/signal.h

30 #i‚de‡
_SIGNAL_H_


31 
	#_SIGNAL_H_


	)

35 
	~<kîn/machöe/sig«l.h
>

36 
	~<kîn/sig«l.h
>

	@include/spinlock.h

30 #i‚de‡
_SPINLOCK_H_


31 
	#_SPINLOCK_H_


	)

38 
	~<cdefs.h
>

39 
	~<h™gm™.h
>

42 #i‚de‡
SPINLOCK_INLINE


43 
	#SPINLOCK_INLINE
 
INLINE


	)

47 
	~<machöe/•ölock.h
>

58 
	s•ölock
 {

59 vﬁ©ûê
•ölock_d©a_t
 
	m•lk_lock
;

60 
˝u
 *
	m•lk_hﬁdî
;

61 
HANGMAN_LOCKABLE
(
•lk_h™gm™
);

67 #ifde‡
OPT_HANGMAN


68 
	#SPINLOCK_INITIALIZER
 { 
SPINLOCK_DATA_INITIALIZER
, 
NULL
, \

69 
HANGMAN_LOCKABLE_INITIALIZER
 }

	)

71 
	#SPINLOCK_INITIALIZER
 { 
SPINLOCK_DATA_INITIALIZER
, 
NULL
 }

	)

86 
•ölock_öô
(
•ölock
 *
lk
);

87 
•ölock_˛ónup
(
•ölock
 *
lk
);

89 
•ölock_acquúe
(
•ölock
 *
lk
);

90 
•ölock_ªÀa£
(
•ölock
 *
lk
);

92 
boﬁ
 
•ölock_do_i_hﬁd
(
•ölock
 *
lk
);

	@include/spl.h

30 #i‚de‡
_SPL_H_


31 
	#_SPL_H_


	)

33 
	~<cdefs.h
>

36 #i‚de‡
SPL_INLINE


37 
	#SPL_INLINE
 
INLINE


	)

70 
SPL_INLINE
 
•l0
();

71 
SPL_INLINE
 
•lhigh
();

72 
•lx
();

77 
	#IPL_NONE
 0

	)

78 
	#IPL_HIGH
 1

	)

89 
•Ãai£
(
ﬁdùl
, 
√wùl
);

90 
•Œowî
(
ﬁdùl
, 
√wùl
);

94 
SPL_INLINE


96 
	$•l0
()

98  
	`•lx
(
IPL_NONE
);

99 
	}
}

101 
SPL_INLINE


103 
	$•lhigh
()

105  
	`•lx
(
IPL_HIGH
);

106 
	}
}

	@include/stat.h

30 #i‚de‡
_STAT_H_


31 
	#_STAT_H_


	)

34 
	~<kîn/°©.h
>

37 
	~<kîn/°©ty≥s.h
>

40 
	#S_IFMT
 
_S_IFMT


	)

41 
	#S_IFREG
 
_S_IFREG


	)

42 
	#S_IFDIR
 
_S_IFDIR


	)

43 
	#S_IFLNK
 
_S_IFLNK


	)

44 
	#S_IFIFO
 
_S_IFIFO


	)

45 
	#S_IFSOCK
 
_S_IFSOCK


	)

46 
	#S_IFCHR
 
_S_IFCHR


	)

47 
	#S_IFBLK
 
_S_IFBLK


	)

	@include/stdarg.h

30 #i‚de‡
_STDARG_H_


31 
	#_STDARG_H_


	)

35 
	~<cdefs.h
>

45 #ifde‡
__GNUC__


46 
__va_li°
 
	tva_li°
;

48 #i‡
__GNUC__
 < 4 || (__GNUC__ =4 && 
__GNUC_MINOR__
 < 8)

49 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_°d¨g_°¨t
◊p, fmt)

	)

51 
	#va_°¨t
(
≠
, 
fmt
Ë
	`__buûtö_va_°¨t
◊p, fmt)

	)

53 
	#va_¨g
(
≠
,
t
Ë
	`__buûtö_va_¨g
◊p,Å)

	)

54 
	#va_c›y
(
≠1
, 
≠2
Ë
	`__buûtö_va_c›y
◊p1,áp2)

	)

55 
	#va_íd
(
≠
Ë
	`__buûtö_va_íd
◊p)

	)

65 
	$vk¥ötf
(c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(1,0);

66 
	$v¢¥ötf
(*
buf
, 
size_t
 
maxÀn
, c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

75 
	`__v¥ötf
((*
func
)(*
˛õ¡d©a
, c⁄° *
°r
, 
size_t
 
Àn
),

76 *
˛õ¡d©a
, c⁄° *
f‹m©
, 
va_li°
 
≠
Ë
	`__PF
(3,0);

	@include/synch.h

30 #i‚de‡
_SYNCH_H_


31 
	#_SYNCH_H_


	)

38 
	~<•ölock.h
>

46 
	s£m≠h‹e
 {

47 *
	m£m_«me
;

48 
wch™
 *
	m£m_wch™
;

49 
•ölock
 
	m£m_lock
;

50 vﬁ©ûê
	m£m_cou¡
;

53 
£m≠h‹e
 *
£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
);

54 
£m_de°roy
(
£m≠h‹e
 *);

62 
P
(
£m≠h‹e
 *);

63 
V
(
£m≠h‹e
 *);

75 
	slock
 {

76 *
	mlk_«me
;

77 
HANGMAN_LOCKABLE
(
lk_h™gm™
);

78 
	mbusy
;

79 
wch™
 *
	mlk_wch™
;

80 
•ölock
 
	mlk_lock
;

81 
thªad
 *
	mhﬁd
;

86 
lock
 *
lock_¸óã
(c⁄° *
«me
);

87 
lock_de°roy
(
lock
 *);

100 
lock_acquúe
(
lock
 *);

101 
lock_ªÀa£
(
lock
 *);

102 
boﬁ
 
lock_do_i_hﬁd
(
lock
 *);

119 
	scv
 {

120 *
	mcv_«me
;

125 
cv
 *
cv_¸óã
(c⁄° *
«me
);

126 
cv_de°roy
(
cv
 *);

141 
cv_waô
(
cv
 *cv, 
lock
 *lock);

142 
cv_sig«l
(
cv
 *cv, 
lock
 *lock);

143 
cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock);

	@include/syscall.h

30 #i‚de‡
_SYSCALL_H_


31 
	#_SYSCALL_H_


	)

34 
	~<cdefs.h
>

35 
	gå≠‰ame
;

41 
sysˇŒ
(
å≠‰ame
 *
tf
);

48 
íãr_f‹ked_¥o˚ss
(
å≠‰ame
 *
tf
);

51 
__DEAD
 
íãr_√w_¥o˚ss
(
¨gc
, 
u£Ωå_t
 
¨gv
, u£Ωå_à
ív
,

52 
vaddr_t
 
°ack±r
, vaddr_à
íåypoöt
);

59 
sys_ªboŸ
(
code
);

60 
sys___time
(
u£Ωå_t
 
u£r_£c⁄ds
, u£Ωå_à
u£r_«no£c⁄ds
);

	@include/test.h

30 #i‚de‡
_TEST_H_


31 
	#_TEST_H_


	)

44 
ñves
(, **);

45 
aúbÆlo⁄
(, **);

48 
¨øyã°
(, **);

49 
¨øyã°2
(, **);

50 
bôm≠ã°
(, **);

51 
thªadli°ã°
(, **);

54 
thªadã°
(, **);

55 
thªadã°2
(, **);

56 
thªadã°3
(, **);

57 
£mã°
(, **);

58 
lockã°
(, **);

59 
cvã°
(, **);

60 
cvã°2
(, **);

63 
£mu1
(, **);

64 
£mu2
(, **);

65 
£mu3
(, **);

66 
£mu4
(, **);

67 
£mu5
(, **);

68 
£mu6
(, **);

69 
£mu7
(, **);

70 
£mu8
(, **);

71 
£mu9
(, **);

72 
£mu10
(, **);

73 
£mu11
(, **);

74 
£mu12
(, **);

75 
£mu13
(, **);

76 
£mu14
(, **);

77 
£mu15
(, **);

78 
£mu16
(, **);

79 
£mu17
(, **);

80 
£mu18
(, **);

81 
£mu19
(, **);

82 
£mu20
(, **);

83 
£mu21
(, **);

84 
£mu22
(, **);

87 
f°e°
(, **);

88 
ªad°ªss
(, **);

89 
wrôe°ªss
(, **);

90 
wrôe°ªss2
(, **);

91 
l⁄g°ªss
(, **);

92 
¸óã°ªss
(, **);

93 
¥ötfûe
(, **);

96 
kmÆlo˘e°
(, **);

97 
kmÆloc°ªss
(, **);

98 
kmÆlo˘e°3
(, **);

99 
kmÆlo˘e°4
(, **);

100 
√âe°
(, **);

103 
ru≈rogøm
(*
¥og«me
);

106 
míu
(*
¨g°r
);

109 
kmaö
(*
boŸ°rög
);

	@include/thread.h

30 #i‚de‡
_THREAD_H_


31 
	#_THREAD_H_


	)

39 
	~<¨øy.h
>

40 
	~<•ölock.h
>

41 
	~<thªadli°.h
>

43 
	g˝u
;

46 
	~<machöe/thªad.h
>

50 
	#STACK_SIZE
 4096

	)

53 
	#STACK_MASK
 (~(
vaddr_t
)(
STACK_SIZE
-1))

	)

56 
	#SAME_STACK
(
p1
, 
p2
Ë((’1Ë& 
STACK_MASK
Ë=(’2Ë& STACK_MASK))

	)

61 
	mS_RUN
,

62 
	mS_READY
,

63 
	mS_SLEEP
,

64 
	mS_ZOMBIE
,

65 } 
	tthªad°©e_t
;

68 
	sthªad
 {

73 *
	mt_«me
;

74 c⁄° *
	mt_wch™_«me
;

75 
thªad°©e_t
 
	mt_°©e
;

80 
thªad_machdï
 
	mt_machdï
;

81 
thªadli°node
 
	mt_li°node
;

82 *
	mt_°ack
;

83 
swôch‰ame
 *
	mt_c⁄ãxt
;

84 
˝u
 *
	mt_˝u
;

85 
¥oc
 *
	mt_¥oc
;

86 
HANGMAN_ACTOR
(
t_h™gm™
);

101 
boﬁ
 
	mt_ö_öãºu±
;

102 
	mt_cur•l
;

103 
	mt_ùlhigh_cou¡
;

110 
boﬁ
 
	mt_did_ª£rve_buf„rs
;

118 #i‚de‡
THREADINLINE


119 
	#THREADINLINE
 
INLINE


	)

122 
DECLARRAY
(
thªad
, 
THREADINLINE
);

123 
DEFARRAY
(
thªad
, 
THREADINLINE
);

126 
thªad_boŸ°øp
();

129 
thªad_°¨t_˝us
();

132 
thªad_∑nic
();

135 
thªad_shutdown
();

147 
thªad_f‹k
(c⁄° *
«me
, 
¥oc
 *proc,

148 (*
func
)(*, ),

149 *
d©a1
, 
d©a2
);

155 
__DEAD
 
	`thªad_exô
();

162 
	`thªad_yõld
();

167 
	`scheduÀ
();

173 
	`thªad_c⁄sidî_migøti⁄
();

	@include/threadlist.h

30 #i‚de‡
_THREADLIST_H_


31 
	#_THREADLIST_H_


	)

34 
	gthªad
;

57 
	sthªadli°node
 {

58 
thªadli°node
 *
	mén_¥ev
;

59 
thªadli°node
 *
	mén_√xt
;

60 
thªad
 *
	mén_£lf
;

63 
	sthªadli°
 {

64 
thªadli°node
 
	mé_hód
;

65 
thªadli°node
 
	mé_èû
;

66 
	mé_cou¡
;

70 
thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
£lf
);

71 
thªadli°node_˛ónup
(
thªadli°node
 *
én
);

74 
thªadli°_öô
(
thªadli°
 *
é
);

75 
thªadli°_˛ónup
(
thªadli°
 *
é
);

78 
boﬁ
 
thªadli°_i£m±y
(
thªadli°
 *
é
);

81 
thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
);

82 
thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
);

83 
thªad
 *
thªadli°_ªmhód
(
thªadli°
 *
é
);

84 
thªad
 *
thªadli°_ªmèû
(
thªadli°
 *
é
);

87 
thªadli°_ö£πa·î
(
thªadli°
 *
é
,

88 
thªad
 *
⁄li°
, thªad *
addì
);

89 
thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

90 
thªad
 *
addì
, thªad *
⁄li°
);

91 
thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
);

94 
	#THREADLIST_FORALL
(
ôîv¨
, 
é
) \

95 (
ôîv¨
Ë(
é
).
é_hód
.
én_√xt
->
én_£lf
; \

96 (
ôîv¨
Ë!
NULL
; \

97 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_√xt
->
én_£lf
)

	)

99 
	#THREADLIST_FORALL_REV
(
ôîv¨
, 
é
) \

100 (
ôîv¨
Ë(
é
).
é_èû
.
én_¥ev
->
én_£lf
; \

101 (
ôîv¨
Ë!
NULL
; \

102 (
ôîv¨
Ë(ôîv¨)->
t_li°node
.
én_¥ev
->
én_£lf
)

	)

	@include/threadprivate.h

30 #i‚de‡
_THREADPRIVATE_H_


31 
	#_THREADPRIVATE_H_


	)

33 
	gthªad
;

34 
	gthªad_machdï
;

35 
	gswôch‰ame
;

55 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

56 *
d©a1
, 
d©a2
);

59 
	`thªad_machdï_öô
(
thªad_machdï
 *
tm
);

60 
	`thªad_machdï_˛ónup
(
thªad_machdï
 *
tm
);

70 
	`swôch‰ame_swôch
(
swôch‰ame
 **
¥ev
, swôch‰amê**
√xt
);

73 
	`swôch‰ame_öô
(
thªad
 *,

74 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

75 *
d©a1
, 
d©a2
);

	@include/types.h

30 #i‚de‡
_TYPES_H_


31 
	#_TYPES_H_


	)

80 
	~<kîn/ty≥s.h
>

83 
	~<machöe/ty≥s.h
>

90 
	s__u£Ωå
 { 
	m_dummy
; };

91 
__u£Ωå
 *
	tu£Ωå_t
;

92 c⁄° 
	t__u£Ωå
 *
	tc⁄°_u£Ωå_t
;

100 
__i8
 
	töt8_t
;

101 
__i16
 
	töt16_t
;

102 
__i32
 
	töt32_t
;

103 
__i64
 
	töt64_t
;

104 
__u8
 
	tuöt8_t
;

105 
__u16
 
	tuöt16_t
;

106 
__u32
 
	tuöt32_t
;

107 
__u64
 
	tuöt64_t
;

108 
__size_t
 
	tsize_t
;

109 
__ssize_t
 
	tssize_t
;

110 
__öçå_t
 
	töçå_t
;

111 
__uöçå_t
 
	tuöçå_t
;

112 
__±rdiff_t
 
	t±rdiff_t
;

115 
__blk˙t_t
 
	tblk˙t_t
;

116 
__blksize_t
 
	tblksize_t
;

117 
__daddr_t
 
	tdaddr_t
;

118 
__dev_t
 
	tdev_t
;

119 
__fsid_t
 
	tfsid_t
;

120 
__gid_t
 
	tgid_t
;

121 
__ö_addr_t
 
	tö_addr_t
;

122 
__ö_p‹t_t
 
	tö_p‹t_t
;

123 
__öo_t
 
	töo_t
;

124 
__mode_t
 
	tmode_t
;

125 
__∆ök_t
 
	t∆ök_t
;

126 
__off_t
 
	toff_t
;

127 
__pid_t
 
	tpid_t
;

128 
__æim_t
 
	tæim_t
;

129 
__ß_Ámûy_t
 
	tß_Ámûy_t
;

130 
__time_t
 
	ttime_t
;

131 
__uid_t
 
	tuid_t
;

133 
__nfds_t
 
	tnfds_t
;

134 
__sockÀn_t
 
	tsockÀn_t
;

140 
	#CHAR_BIT
 
__CHAR_BIT


	)

146 
	#NULL
 ((*)0)

	)

151 
_Boﬁ
 
	tboﬁ
;

152 
	#åue
 1

	)

153 
	#Ál£
 0

	)

	@include/uio.h

30 #i‚de‡
_UIO_H_


31 
	#_UIO_H_


	)

58 
	~<kîn/iovec.h
>

61 
	euio_rw
 {

62 
	mUIO_READ
,

63 
	mUIO_WRITE
,

67 
	euio_£g
 {

68 
	mUIO_USERISPACE
,

69 
	mUIO_USERSPACE
,

70 
	mUIO_SYSSPACE
,

73 
	suio
 {

74 
iovec
 *
	muio_iov
;

75 
	muio_iov˙t
;

76 
off_t
 
	muio_off£t
;

77 
size_t
 
	muio_ªsid
;

78 
uio_£g
 
	muio_£gÊg
;

79 
uio_rw
 
	muio_rw
;

80 
addr•a˚
 *
	muio_•a˚
;

119 
uiomove
(*
kbuf„r
, 
size_t
 
Àn
, 
uio
 *uio);

124 
uiomovezîos
(
size_t
 
Àn
, 
uio
 *uio);

138 
uio_köô
(
iovec
 *, 
uio
 *,

139 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
);

	@include/version.h

30 #i‚de‡
_VERSION_H_


31 
	#_VERSION_H_


	)

37 
	#BASE_VERSION
 "2.0.2"

	)

42 
	#GROUP_VERSION
 "0"

	)

	@include/vfs.h

30 #i‚de‡
_VFS_H_


31 
	#_VFS_H_


	)

34 
	~<¨øy.h
>

44 
	guio
;

45 
	gdevi˚
;

46 
	gfs
;

47 
	gvnode
;

62 
vfs_£tcurdú
(
vnode
 *
dú
);

63 
vfs_˛órcurdú
();

64 
vfs_gëcurdú
(
vnode
 **
ªtdú
);

65 
vfs_sync
();

66 
vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

67 c⁄° *
vfs_gëdev«me
(
fs
 *fs);

80 
vfs_lookup
(*
∑th
, 
vnode
 **
ªsu…
);

81 
vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªsu…
,

82 *
buf
, 
size_t
 
buÊí
);

104 
vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
);

105 
vfs_˛o£
(
vnode
 *
vn
);

106 
vfs_ªadlök
(*
∑th
, 
uio
 *
d©a
);

107 
vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
);

108 
vfs_mkdú
(*
∑th
, 
mode_t
 
mode
);

109 
vfs_lök
(*
ﬁd∑th
, *
√w∑th
);

110 
vfs_ªmove
(*
∑th
);

111 
vfs_rmdú
(*
∑th
);

112 
vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
);

114 
vfs_chdú
(*
∑th
);

115 
vfs_gëcwd
(
uio
 *
buf
);

173 
vfs_boŸ°øp
();

175 
vfs_öôboŸfs
();

176 
vfs_£tboŸfs
(c⁄° *
f¢ame
);

177 
vfs_˛órboŸfs
();

179 
vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
);

180 
vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs);

182 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

183 (*
mou¡func
)(*
d©a
,

184 
devi˚
 *
dev
,

185 
fs
 **
ªsu…
));

186 
	`vfs_unmou¡
(c⁄° *
dev«me
);

187 
	`vfs_sw≠⁄
(c⁄° *
dev«me
, 
vnode
 **
ªsu…
);

188 
	`vfs_sw≠off
(c⁄° *
dev«me
);

189 
	`vfs_unmou¡Æl
();

194 #i‚de‡
VFSINLINE


195 
	#VFSINLINE
 
INLINE


	)

198 
	`DECLARRAY
(
vnode
, 
VFSINLINE
);

199 
	`DEFARRAY
(
vnode
, 
VFSINLINE
);

	@include/vm.h

30 #i‚de‡
_VM_H_


31 
	#_VM_H_


	)

40 
	~<machöe/vm.h
>

43 
	#VM_FAULT_READ
 0

	)

44 
	#VM_FAULT_WRITE
 1

	)

45 
	#VM_FAULT_READONLY
 2

	)

49 
vm_boŸ°øp
();

52 
vm_Áu…
(
Áu…ty≥
, 
vaddr_t
 
Áu…addªss
);

55 
vaddr_t
 
Æloc_k∑ges
(
≈ages
);

56 
‰ì_k∑ges
(
vaddr_t
 
addr
);

59 
vm_ébshoŸdown
(c⁄° 
ébshoŸdown
 *);

	@include/vnode.h

30 #i‚de‡
_VNODE_H_


31 
	#_VNODE_H_


	)

33 
	~<•ölock.h
>

34 
	guio
;

35 
	g°©
;

51 
	svnode
 {

52 
	mvn_ªfcou¡
;

53 
•ölock
 
	mvn_cou¡lock
;

55 
fs
 *
	mvn_fs
;

57 *
	mvn_d©a
;

59 c⁄° 
vnode_›s
 *
	mvn_›s
;

178 
	#VOP_MAGIC
 0xa2b3c4d5

	)

180 
	svnode_›s
 {

181 
	mv›_magic
;

183 (*
	mv›_óch›í
)(
vnode
 *
	mobje˘
, 
	mÊags_‰om_›í
);

184 (*
	mv›_ª˛aim
)(
vnode
 *
	mvnode
);

187 (*
	mv›_ªad
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

188 (*
	mv›_ªadlök
)(
vnode
 *
	mlök
, 
uio
 *
	muio
);

189 (*
	mv›_gëdúíåy
)(
vnode
 *
	mdú
, 
uio
 *
	muio
);

190 (*
	mv›_wrôe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

191 (*
	mv›_io˘l
)(
vnode
 *
	mobje˘
, 
	m›
, 
u£Ωå_t
 
	md©a
);

192 (*
	mv›_°©
)(
vnode
 *
	mobje˘
, 
°©
 *
	m°©buf
);

193 (*
	mv›_gëty≥
)(
vnode
 *
	mobje˘
, 
mode_t
 *
	mªsu…
);

194 
boﬁ
 (*
v›_is£ekabÀ
)(
vnode
 *
	mobje˘
);

195 (*
	mv›_fsync
)(
vnode
 *
	mobje˘
);

196 (*
	mv›_mm≠
)(
vnode
 *
	mfûe
 );

197 (*
	mv›_åunˇã
)(
vnode
 *
	mfûe
, 
off_t
 
	mÀn
);

198 (*
	mv›_«mefûe
)(
vnode
 *
	mfûe
, 
uio
 *
	muio
);

201 (*
	mv›_¸ót
)(
vnode
 *
	mdú
,

202 c⁄° *
	m«me
, 
boﬁ
 
	mex˛
, 
mode_t
 
	mmode
,

203 
vnode
 **
	mªsu…
);

204 (*
	mv›_symlök
)(
vnode
 *
	mdú
,

205 c⁄° *
	mc⁄ã¡s
, c⁄° *
	m«me
);

206 (*
	mv›_mkdú
)(
vnode
 *
	m∑ª¡dú
,

207 c⁄° *
	m«me
, 
mode_t
 
	mmode
);

208 (*
	mv›_lök
)(
vnode
 *
	mdú
,

209 c⁄° *
	m«me
, 
vnode
 *
	mfûe
);

210 (*
	mv›_ªmove
)(
vnode
 *
	mdú
,

211 c⁄° *
	m«me
);

212 (*
	mv›_rmdú
)(
vnode
 *
	mdú
,

213 c⁄° *
	m«me
);

215 (*
	mv›_ª«me
)(
vnode
 *
	mvn1
, c⁄° *
	m«me1
,

216 
vnode
 *
	mvn2
, c⁄° *
	m«me2
);

219 (*
	mv›_lookup
)(
vnode
 *
	mdú
,

220 *
	m∑th«me
, 
vnode
 **
	mªsu…
);

221 (*
	mv›_look∑ª¡
)(
vnode
 *
	mdú
,

222 *
	m∑th«me
, 
vnode
 **
	mªsu…
,

223 *
	mbuf
, 
size_t
 
	mÀn
);

226 
	#__VOP
(
vn
, 
sym
Ë(
	`vnode_check
(vn, #sym), (vn)->
vn_›s
->
v›_
##sym)

	)

228 
	#VOP_EACHOPEN
(
vn
, 
Êags
Ë(
	`__VOP
(vn, 
óch›í
)(vn, fœgs))

	)

229 
	#VOP_RECLAIM
(
vn
Ë(
	`__VOP
(vn, 
ª˛aim
)(vn))

	)

231 
	#VOP_READ
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªad
)(vn, uio))

	)

232 
	#VOP_READLINK
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
ªadlök
)(vn, uio))

	)

233 
	#VOP_GETDIRENTRY
(
vn
, 
uio
Ë(
	`__VOP
(vn,
gëdúíåy
)(vn, uio))

	)

234 
	#VOP_WRITE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
wrôe
)(vn, uio))

	)

235 
	#VOP_IOCTL
(
vn
, 
code
, 
buf
Ë(
	`__VOP
(vn, 
io˘l
)(vn,code,buf))

	)

236 
	#VOP_STAT
(
vn
, 
±r
Ë(
	`__VOP
(vn, 
°©
)(vn,Öå))

	)

237 
	#VOP_GETTYPE
(
vn
, 
ªsu…
Ë(
	`__VOP
(vn, 
gëty≥
)(vn,Ñesu…))

	)

238 
	#VOP_ISSEEKABLE
(
vn
Ë(
	`__VOP
(vn, 
is£ekabÀ
)(vn))

	)

239 
	#VOP_FSYNC
(
vn
Ë(
	`__VOP
(vn, 
fsync
)(vn))

	)

240 
	#VOP_MMAP
(
vn
 ) (
	`__VOP
(vn, 
mm≠
)(v¿ ))

	)

241 
	#VOP_TRUNCATE
(
vn
, 
pos
Ë(
	`__VOP
(vn, 
åunˇã
)(vn,Öos))

	)

242 
	#VOP_NAMEFILE
(
vn
, 
uio
Ë(
	`__VOP
(vn, 
«mefûe
)(vn, uio))

	)

244 
	#VOP_CREAT
(
vn
,
nm
,
ex˛
,
mode
,
ªs
Ë(
	`__VOP
(vn, 
¸ót
)(vn,nm,ex˛,mode,ªs))

	)

245 
	#VOP_SYMLINK
(
vn
, 
«me
, 
c⁄ã¡
Ë(
	`__VOP
(vn, 
symlök
)(vn,Çame, c⁄ã¡))

	)

246 
	#VOP_MKDIR
(
vn
, 
«me
, 
mode
Ë(
	`__VOP
(vn, 
mkdú
)(vn,Çame, mode))

	)

247 
	#VOP_LINK
(
vn
, 
«me
, 
vn2
Ë(
	`__VOP
(vn, 
lök
)(vn,Çame, vn2))

	)

248 
	#VOP_REMOVE
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
ªmove
)(vn,Çame))

	)

249 
	#VOP_RMDIR
(
vn
, 
«me
Ë(
	`__VOP
(vn, 
rmdú
)(vn,Çame))

	)

250 
	#VOP_RENAME
(
vn1
,
«me1
,
vn2
,
«me2
)(
	`__VOP
(vn1,
ª«me
)(vn1,«me1,vn2,«me2))

	)

252 
	#VOP_LOOKUP
(
vn
, 
«me
, 
ªs
Ë(
	`__VOP
(vn, 
lookup
)(vn,Çame,Ñes))

	)

253 
	#VOP_LOOKPARENT
(
vn
,
nm
,
ªs
,
bf
,
 
Ë(
	`__VOP
(vn,
look∑ª¡
)(vn,nm,ªs,bf, ))

	)

258 
vnode_check
(
vnode
 *, c⁄° *
›
);

263 
vnode_ö¸ef
(
vnode
 *);

264 
vnode_de¸ef
(
vnode
 *);

266 
	#VOP_INCREF
(
vn
Ë
	`vnode_ö¸ef
(vn)

	)

267 
	#VOP_DECREF
(
vn
Ë
	`vnode_de¸ef
(vn)

	)

273 
vnode_öô
(
vnode
 *, c⁄° 
vnode_›s
 *
›s
,

274 
fs
 *fs, *
fsd©a
);

280 
vnode_˛ónup
(
vnode
 *);

285 
v›Áû_uio_nŸdú
(
vnode
 *
vn
, 
uio
 *uio);

286 
v›Áû_uio_isdú
(
vnode
 *
vn
, 
uio
 *uio);

287 
v›Áû_uio_övÆ
(
vnode
 *
vn
, 
uio
 *uio);

288 
v›Áû_uio_nosys
(
vnode
 *
vn
, 
uio
 *uio);

289 
v›Áû_mm≠_isdú
(
vnode
 *
vn
 );

290 
v›Áû_mm≠_≥rm
(
vnode
 *
vn
 );

291 
v›Áû_mm≠_nosys
(
vnode
 *
vn
 );

292 
v›Áû_åunˇã_isdú
(
vnode
 *
vn
, 
off_t
 
pos
);

293 
v›Áû_¸ót_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
boﬁ
 
ex˛
,

294 
mode_t
 
mode
, 
vnode
 **
ªsu…
);

295 
v›Áû_symlök_nŸdú
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

296 c⁄° *
«me
);

297 
v›Áû_symlök_nosys
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

298 c⁄° *
«me
);

299 
v›Áû_mkdú_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
);

300 
v›Áû_mkdú_nosys
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
);

301 
v›Áû_lök_nŸdú
(
vnode
 *
dú
, c⁄° *
«me
,

302 
vnode
 *
fûe
);

303 
v›Áû_lök_nosys
(
vnode
 *
dú
, c⁄° *
«me
,

304 
vnode
 *
fûe
);

305 
v›Áû_°rög_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
);

306 
v›Áû_°rög_nosys
(
vnode
 *
vn
, c⁄° *
«me
);

307 
v›Áû_ª«me_nŸdú
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

308 
vnode
 *
todú
, c⁄° *
t⁄ame
);

309 
v›Áû_ª«me_nosys
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

310 
vnode
 *
todú
, c⁄° *
t⁄ame
);

311 
v›Áû_lookup_nŸdú
(
vnode
 *
vn
, *
∑th
, vnodê**
ªsu…
);

312 
v›Áû_look∑ª¡_nŸdú
(
vnode
 *
vn
, *
∑th
,

313 
vnode
 **
ªsu…
, *
buf
, 
size_t
 
Àn
);

	@include/wchan.h

30 #i‚de‡
_WCHAN_H_


31 
	#_WCHAN_H_


	)

38 
	g•ölock
;

39 
	gwch™
;

46 
wch™
 *
wch™_¸óã
(c⁄° *
«me
);

51 
wch™_de°roy
(
wch™
 *
wc
);

57 
boﬁ
 
wch™_i£m±y
(
wch™
 *
wc
, 
•ölock
 *
lk
);

67 
wch™_¶ìp
(
wch™
 *
wc
, 
•ölock
 *
lk
);

76 
wch™_wake⁄e
(
wch™
 *
wc
, 
•ölock
 *
lk
);

77 
wch™_wakóŒ
(
wch™
 *
wc
, 
•ölock
 *
lk
);

	@lib/array.c

30 
	#ARRAYINLINE


	)

32 
	~<ty≥s.h
>

33 
	~<kîn/î∫o.h
>

34 
	~<lib.h
>

35 
	~<¨øy.h
>

37 
¨øy
 *

38 
	$¨øy_¸óã
()

40 
¨øy
 *
a
;

42 
a
 = 
	`kmÆloc
((*a));

43 i‡(
a
 !
NULL
) {

44 
	`¨øy_öô
(
a
);

46  
a
;

47 
	}
}

50 
	$¨øy_de°roy
(
¨øy
 *
a
)

52 
	`¨øy_˛ónup
(
a
);

53 
	`k‰ì
(
a
);

54 
	}
}

57 
	$¨øy_öô
(
¨øy
 *
a
)

59 
a
->
num
 =á->
max
 = 0;

60 
a
->
v
 = 
NULL
;

61 
	}
}

64 
	$¨øy_˛ónup
(
¨øy
 *
a
)

71 
	`ARRAYASSERT
(
a
->
num
 == 0);

72 
	`k‰ì
(
a
->
v
);

73 #ifde‡
ARRAYS_CHECKED


74 
a
->
v
 = 
NULL
;

76 
	}
}

79 
	$¨øy_¥óŒoˇã
(
¨øy
 *
a
, 
num
)

81 **
√w±r
;

82 
√wmax
;

84 i‡(
num
 > 
a
->
max
) {

86 
√wmax
 = 
a
->
max
;

87 
num
 > 
√wmax
) {

88 
√wmax
 =Çewmax ?Çewmax*2 : 4;

98 
√w±r
 = 
	`kmÆloc
(
√wmax
*(*
a
->
v
));

99 i‡(
√w±r
 =
NULL
) {

100  
ENOMEM
;

102 
	`mem˝y
(
√w±r
, 
a
->
v
,á->
num
*(*a->v));

103 
	`k‰ì
(
a
->
v
);

104 
a
->
v
 = 
√w±r
;

105 
a
->
max
 = 
√wmax
;

108 
	}
}

111 
	$¨øy_£tsize
(
¨øy
 *
a
, 
num
)

113 
ªsu…
;

115 
ªsu…
 = 
	`¨øy_¥óŒoˇã
(
a
, 
num
);

116 i‡(
ªsu…
) {

117  
ªsu…
;

119 
a
->
num
 =Çum;

122 
	}
}

125 
	$¨øy_ªmove
(
¨øy
 *
a
, 
ödex
)

127 
num_to_move
;

129 
	`ARRAYASSERT
(
a
->
num
 <a->
max
);

130 
	`ARRAYASSERT
(
ödex
 < 
a
->
num
);

132 
num_to_move
 = 
a
->
num
 - (
ödex
 + 1);

133 
	`memmove
(
a
->
v
 + 
ödex
,á->v + index+1, 
num_to_move
*(*));

134 
a
->
num
--;

135 
	}
}

	@lib/bitmap.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<bôm≠.h
>

46 
	#BITS_PER_WORD
 (
CHAR_BIT
)

	)

47 
	#WORD_TYPE
 

	)

48 
	#WORD_ALLBITS
 (0xff)

	)

50 
	sbôm≠
 {

51 
	mnbôs
;

52 
WORD_TYPE
 *
	mv
;

56 
bôm≠
 *

57 
	$bôm≠_¸óã
(
nbôs
)

59 
bôm≠
 *
b
;

60 
w‹ds
;

62 
w‹ds
 = 
	`DIVROUNDUP
(
nbôs
, 
BITS_PER_WORD
);

63 
b
 = 
	`kmÆloc
((
bôm≠
));

64 i‡(
b
 =
NULL
) {

65  
NULL
;

67 
b
->
v
 = 
	`kmÆloc
(
w‹ds
*(
WORD_TYPE
));

68 i‡(
b
->
v
 =
NULL
) {

69 
	`k‰ì
(
b
);

70  
NULL
;

73 
	`bzîo
(
b
->
v
, 
w‹ds
*(
WORD_TYPE
));

74 
b
->
nbôs
 =Çbits;

77 i‡(
w‹ds
 > 
nbôs
 / 
BITS_PER_WORD
) {

78 
j
, 
ix
 = 
w‹ds
-1;

79 
ovîbôs
 = 
nbôs
 - 
ix
*
BITS_PER_WORD
;

81 
	`KASSERT
(
nbôs
 / 
BITS_PER_WORD
 =
w‹ds
-1);

82 
	`KASSERT
(
ovîbôs
 > 0 && ovîbô†< 
BITS_PER_WORD
);

84 
j
=
ovîbôs
; j<
BITS_PER_WORD
; j++) {

85 
b
->
v
[
ix
] |((
WORD_TYPE
)1 << 
j
);

89  
b
;

90 
	}
}

93 
	$bôm≠_gëd©a
(
bôm≠
 *
b
)

95  
b
->
v
;

96 
	}
}

99 
	$bôm≠_Æloc
(
bôm≠
 *
b
, *
ödex
)

101 
ix
;

102 
maxix
 = 
	`DIVROUNDUP
(
b
->
nbôs
, 
BITS_PER_WORD
);

103 
off£t
;

105 
ix
=0; ix<
maxix
; ix++) {

106 i‡(
b
->
v
[
ix
]!=
WORD_ALLBITS
) {

107 
off£t
 = 0; off£à< 
BITS_PER_WORD
; offset++) {

108 
WORD_TYPE
 
mask
 = ((WORD_TYPE)1Ë<< 
off£t
;

110 i‡((
b
->
v
[
ix
] & 
mask
)==0) {

111 
b
->
v
[
ix
] |
mask
;

112 *
ödex
 = (
ix
*
BITS_PER_WORD
)+
off£t
;

113 
	`KASSERT
(*
ödex
 < 
b
->
nbôs
);

117 
	`KASSERT
(0);

120  
ENOSPC
;

121 
	}
}

124 
ölöe


126 
	$bôm≠_å™¶©e
(
bôno
, *
ix
, 
WORD_TYPE
 *
mask
)

128 
off£t
;

129 *
ix
 = 
bôno
 / 
BITS_PER_WORD
;

130 
off£t
 = 
bôno
 % 
BITS_PER_WORD
;

131 *
mask
 = ((
WORD_TYPE
)1Ë<< 
off£t
;

132 
	}
}

135 
	$bôm≠_m¨k
(
bôm≠
 *
b
, 
ödex
)

137 
ix
;

138 
WORD_TYPE
 
mask
;

140 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

141 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

143 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)==0);

144 
b
->
v
[
ix
] |
mask
;

145 
	}
}

148 
	$bôm≠_unm¨k
(
bôm≠
 *
b
, 
ödex
)

150 
ix
;

151 
WORD_TYPE
 
mask
;

153 
	`KASSERT
(
ödex
 < 
b
->
nbôs
);

154 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

156 
	`KASSERT
((
b
->
v
[
ix
] & 
mask
)!=0);

157 
b
->
v
[
ix
] &~
mask
;

158 
	}
}

162 
	$bôm≠_is£t
(
bôm≠
 *
b
, 
ödex
)

164 
ix
;

165 
WORD_TYPE
 
mask
;

167 
	`bôm≠_å™¶©e
(
ödex
, &
ix
, &
mask
);

168  (
b
->
v
[
ix
] & 
mask
);

169 
	}
}

172 
	$bôm≠_de°roy
(
bôm≠
 *
b
)

174 
	`k‰ì
(
b
->
v
);

175 
	`k‰ì
(
b
);

176 
	}
}

	@lib/bswap.c

30 
	~<ty≥s.h
>

31 
	~<ídün.h
>

46 
uöt16_t


47 
	$bsw≠16
(
uöt16_t
 
vÆ
)

49  ((
vÆ
 & 0x00ff) << 8)

50 | ((
vÆ
 & 0xff00) >> 8);

51 
	}
}

53 
uöt32_t


54 
	$bsw≠32
(
uöt32_t
 
vÆ
)

56  ((
vÆ
 & 0x000000ff) << 24)

57 | ((
vÆ
 & 0x0000ff00) << 8)

58 | ((
vÆ
 & 0x00ff0000) >> 8)

59 | ((
vÆ
 & 0xff000000) >> 24);

60 
	}
}

62 
uöt64_t


63 
	$bsw≠64
(
uöt64_t
 
vÆ
)

65  ((
vÆ
 & 0x00000000000000ff) << 56)

66 | ((
vÆ
 & 0x000000000000ff00) << 40)

67 | ((
vÆ
 & 0x0000000000ff0000) << 24)

68 | ((
vÆ
 & 0x00000000ff000000) << 8)

69 | ((
vÆ
 & 0x000000ff00000000) << 8)

70 | ((
vÆ
 & 0x0000ff0000000000) << 24)

71 | ((
vÆ
 & 0x00ff000000000000) >> 40)

72 | ((
vÆ
 & 0xff00000000000000) >> 56);

73 
	}
}

94 #i‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


95 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

96 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(val); } \

97 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  
bsw≠
##
	`bôs
(vÆ); }

	)

105 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


106 
	#TO
(
èg
, 
bôs
, 
ty≥
) \

107 
ty≥
 
¡oh
##
	`èg
—y≥ 
vÆ
) {  val; } \

108 
ty≥
 
ht⁄
##
	`èg
—y≥ 
vÆ
Ë{  vÆ; }

	)

111 #i‡
_BYTE_ORDER
 =
_PDP_ENDIAN


115 #i‚de‡
TO


119 
	$TO
(
s
, 16, 
uöt16_t
)

120 
	$TO
(
l
, 32, 
uöt32_t
)

121 
	$TO
(
Œ
, 64, 
uöt64_t
)

138 
	$joö32to64
(
uöt32_t
 
x1
, uöt32_à
x2
, 
uöt64_t
 *
y2
)

140 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


141 *
y2
 = ((
uöt64_t
)
x1
 << 32Ë| (uöt64_t)
x2
;

142 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


143 *
y2
 = (
uöt64_t
)
x1
 | ((uöt64_t)
x2
 << 32);

147 
	}
}

150 
	$•lô64to32
(
uöt64_t
 
x
, 
uöt32_t
 *
y1
, uöt32_à*
y2
)

152 #i‡
_BYTE_ORDER
 =
_BIG_ENDIAN


153 *
y1
 = 
x
 >> 32;

154 *
y2
 = 
x
 & 0xffffffff;

155 #ñi‡
_BYTE_ORDER
 =
_LITTLE_ENDIAN


156 *
y1
 = 
x
 & 0xffffffff;

157 *
y2
 = 
x
 >> 32;

161 
	}
}

	@lib/kgets.c

31 
	~<ty≥s.h
>

32 
	~<lib.h
>

41 
	$back•
()

43 
	`putch
('\b');

44 
	`putch
(' ');

45 
	`putch
('\b');

46 
	}
}

54 
	$kgës
(*
buf
, 
size_t
 
maxÀn
)

56 
size_t
 
pos
 = 0;

57 
ch
;

60 
ch
 = 
	`gëch
();

61 i‡(
ch
=='\n' || ch=='\r') {

62 
	`putch
('\n');

67 i‡(
ch
>=32 && ch<127 && 
pos
 < 
maxÀn
-1) {

68 
	`putch
(
ch
);

69 
buf
[
pos
++] = 
ch
;

71 i‡((
ch
=='\b' || ch==127Ë&& 
pos
>0) {

73 
	`back•
();

74 
pos
--;

76 i‡(
ch
==3) {

78 
	`putch
('^');

79 
	`putch
('C');

80 
	`putch
('\n');

81 
pos
 = 0;

84 i‡(
ch
==18) {

86 
buf
[
pos
] = 0;

87 
	`k¥ötf
("^R\n%s", 
buf
);

89 i‡(
ch
==21) {

91 
pos
 > 0) {

92 
	`back•
();

93 
pos
--;

96 i‡(
ch
==23) {

98 
pos
 > 0 && 
buf
[pos-1]==' ') {

99 
	`back•
();

100 
pos
--;

102 
pos
 > 0 && 
buf
[pos-1]!=' ') {

103 
	`back•
();

104 
pos
--;

108 
	`bìp
();

112 
buf
[
pos
] = 0;

113 
	}
}

	@lib/kprintf.c

30 
	~<ty≥s.h
>

31 
	~<kîn/uni°d.h
>

32 
	~<°d¨g.h
>

33 
	~<lib.h
>

34 
	~<•l.h
>

35 
	~<˝u.h
>

36 
	~<thªad.h
>

37 
	~<cuºít.h
>

38 
	~<synch.h
>

39 
	~<maöbus.h
>

40 
	~<vfs.h
>

41 
	~<œmebus/…ø˚.h
>

45 
uöt32_t
 
	gdbÊags
 = 0;

48 
lock
 *
	gk¥ötf_lock
;

51 
•ölock
 
	gk¥ötf_•ölock
;

65 
	$k¥ötf_boŸ°øp
()

67 
	`KASSERT
(
k¥ötf_lock
 =
NULL
);

69 
k¥ötf_lock
 = 
	`lock_¸óã
("kprintf_lock");

70 i‡(
k¥ötf_lock
 =
NULL
) {

71 
	`∑nic
("CouldÇot create kprintf_lock\n");

73 
	`•ölock_öô
(&
k¥ötf_•ölock
);

74 
	}
}

81 
	$c⁄sﬁe_£nd
(*
junk
, c⁄° *
d©a
, 
size_t
 
Àn
)

83 
size_t
 
i
;

85 ()
junk
;

87 
i
=0; i<
Àn
; i++) {

88 
	`putch
(
d©a
[
i
]);

90 
	}
}

96 
	$k¥ötf
(c⁄° *
fmt
, ...)

98 
ch¨s
;

99 
va_li°
 
≠
;

100 
boﬁ
 
dﬁock
;

102 
dﬁock
 = 
k¥ötf_lock
 !
NULL


103 && 
cuπhªad
->
t_ö_öãºu±
 =
Ál£


104 && 
cuπhªad
->
t_cur•l
 == 0

105 && 
cur˝u
->
c_•ölocks
 == 0;

107 i‡(
dﬁock
) {

108 
	`lock_acquúe
(
k¥ötf_lock
);

111 
	`•ölock_acquúe
(&
k¥ötf_•ölock
);

114 
	`va_°¨t
(
≠
, 
fmt
);

115 
ch¨s
 = 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

116 
	`va_íd
(
≠
);

118 i‡(
dﬁock
) {

119 
	`lock_ªÀa£
(
k¥ötf_lock
);

122 
	`•ölock_ªÀa£
(&
k¥ötf_•ölock
);

125  
ch¨s
;

126 
	}
}

134 
	$∑nic
(c⁄° *
fmt
, ...)

136 
va_li°
 
≠
;

149 vﬁ©ûê
evû
;

151 i‡(
evû
 == 0) {

152 
evû
 = 1;

160 
	`•lhigh
();

163 i‡(
evû
 == 1) {

164 
evû
 = 2;

167 
	`thªad_∑nic
();

170 i‡(
evû
 == 2) {

171 
evû
 = 3;

174 
	`k¥ötf
("panic: ");

175 
	`va_°¨t
(
≠
, 
fmt
);

176 
	`__v¥ötf
(
c⁄sﬁe_£nd
, 
NULL
, 
fmt
, 
≠
);

177 
	`va_íd
(
≠
);

180 i‡(
evû
 == 3) {

181 
evû
 = 4;

184 
	`…ø˚_°›
(0);

187 i‡(
evû
 == 4) {

188 
evû
 = 5;

191 
	`vfs_sync
();

194 i‡(
evû
 == 5) {

195 
evû
 = 6;

198 
	`maöbus_∑nic
();

206 
	}
}

212 
	$badas£π
(c⁄° *
ex¥
, c⁄° *
fûe
, 
löe
, c⁄° *
func
)

214 
	`∑nic
("Assertion failed: %s,át %s:%d (%s)\n",

215 
ex¥
, 
fûe
, 
löe
, 
func
);

216 
	}
}

	@lib/misc.c

30 
	~<ty≥s.h
>

31 
	~<kîn/îrmsg.h
>

32 
	~<lib.h
>

38 
	$k°rdup
(c⁄° *
s
)

40 *
z
;

42 
z
 = 
	`kmÆloc
(
	`°æí
(
s
)+1);

43 i‡(
z
 =
NULL
) {

44  
NULL
;

46 
	`°r˝y
(
z
, 
s
);

47  
z
;

48 
	}
}

55 
	$°ªº‹
(
îrcode
)

57 i‡(
îrcode
>=0 &&Éºcodê< 
sys_√º
) {

58  
sys_îæi°
[
îrcode
];

60 
	`∑nic
("InvÆidÉº‹ codê%d\n", 
îrcode
);

61  
NULL
;

62 
	}
}

	@lib/time.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

37 
	$time•ec_add
(c⁄° 
time•ec
 *
ts1
,

38 c⁄° 
time•ec
 *
ts2
,

39 
time•ec
 *
ªt
)

41 
ªt
->
tv_n£c
 = 
ts1
->tv_n£¯+ 
ts2
->tv_nsec;

42 
ªt
->
tv_£c
 = 
ts1
->tv_£¯+ 
ts2
->tv_sec;

43 i‡(
ªt
->
tv_n£c
 >= 1000000000) {

44 
ªt
->
tv_n£c
 -= 1000000000;

45 
ªt
->
tv_£c
 += 1;

47 
	}
}

53 
	$time•ec_sub
(c⁄° 
time•ec
 *
ts1
,

54 c⁄° 
time•ec
 *
ts2
,

55 
time•ec
 *
ªt
)

58 
time•ec
 
r
;

60 
r
 = *
ts1
;

61 i‡(
r
.
tv_n£c
 < 
ts2
->tv_nsec) {

62 
r
.
tv_n£c
 += 1000000000;

63 
r
.
tv_£c
--;

66 
r
.
tv_n£c
 -
ts2
->tv_nsec;

67 
r
.
tv_£c
 -
ts2
->tv_sec;

68 *
ªt
 = 
r
;

69 
	}
}

	@lib/uio.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<uio.h
>

33 
	~<¥oc.h
>

34 
	~<cuºít.h
>

35 
	~<c›yöout.h
>

42 
	$uiomove
(*
±r
, 
size_t
 
n
, 
uio
 *uio)

44 
iovec
 *
iov
;

45 
size_t
 
size
;

46 
ªsu…
;

48 i‡(
uio
->
uio_rw
 !
UIO_READ
 && uio->uio_rw !
UIO_WRITE
) {

49 
	`∑nic
("uiomove: InvÆid uio_rw %d\n", (Ë
uio
->
uio_rw
);

51 i‡(
uio
->
uio_£gÊg
==
UIO_SYSSPACE
) {

52 
	`KASSERT
(
uio
->
uio_•a˚
 =
NULL
);

55 
	`KASSERT
(
uio
->
uio_•a˚
 =
	`¥oc_gëas
());

58 
n
 > 0 && 
uio
->
uio_ªsid
 > 0) {

60 
iov
 = 
uio
->
uio_iov
;

61 
size
 = 
iov
->
iov_Àn
;

63 i‡(
size
 > 
n
) {

64 
size
 = 
n
;

67 i‡(
size
 == 0) {

69 
uio
->
uio_iov
++;

70 
uio
->
uio_iov˙t
--;

71 i‡(
uio
->
uio_iov˙t
 == 0) {

78 
	`∑nic
("uiomove:Ñan out of buffers\n");

83 
uio
->
uio_£gÊg
) {

84 
UIO_SYSSPACE
:

85 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

86 
	`memmove
(
iov
->
iov_kba£
, 
±r
, 
size
);

89 
	`memmove
(
±r
, 
iov
->
iov_kba£
, 
size
);

91 
iov
->
iov_kba£
 = ((*)iov->iov_kba£+
size
);

93 
UIO_USERSPACE
:

94 
UIO_USERISPACE
:

95 i‡(
uio
->
uio_rw
 =
UIO_READ
) {

96 
ªsu…
 = 
	`c›yout
(
±r
, 
iov
->
iov_uba£
,
size
);

99 
ªsu…
 = 
	`c›yö
(
iov
->
iov_uba£
, 
±r
, 
size
);

101 i‡(
ªsu…
) {

102  
ªsu…
;

104 
iov
->
iov_uba£
 +
size
;

107 
	`∑nic
("uiomove: Invalid uio_segflg %d\n",

108 ()
uio
->
uio_£gÊg
);

111 
iov
->
iov_Àn
 -
size
;

112 
uio
->
uio_ªsid
 -
size
;

113 
uio
->
uio_off£t
 +
size
;

114 
±r
 = ((*Ìå + 
size
);

115 
n
 -
size
;

119 
	}
}

122 
	$uiomovezîos
(
size_t
 
n
, 
uio
 *uio)

125 
zîos
[16];

126 
size_t
 
amt
;

127 
ªsu…
;

130 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

132 
n
 > 0) {

133 
amt
 = (
zîos
);

134 i‡(
amt
 > 
n
) {

135 
amt
 = 
n
;

137 
ªsu…
 = 
	`uiomove
(
zîos
, 
amt
, 
uio
);

138 i‡(
ªsu…
) {

139  
ªsu…
;

141 
n
 -
amt
;

145 
	}
}

152 
	$uio_köô
(
iovec
 *
iov
, 
uio
 *
u
,

153 *
kbuf
, 
size_t
 
Àn
, 
off_t
 
pos
, 
uio_rw
 
rw
)

155 
iov
->
iov_kba£
 = 
kbuf
;

156 
iov
->
iov_Àn
 = 
Àn
;

157 
u
->
uio_iov
 = 
iov
;

158 
u
->
uio_iov˙t
 = 1;

159 
u
->
uio_off£t
 = 
pos
;

160 
u
->
uio_ªsid
 = 
Àn
;

161 
u
->
uio_£gÊg
 = 
UIO_SYSSPACE
;

162 
u
->
uio_rw
 = 
rw
;

163 
u
->
uio_•a˚
 = 
NULL
;

164 
	}
}

	@main/main.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/ªboŸ.h
>

37 
	~<kîn/uni°d.h
>

38 
	~<lib.h
>

39 
	~<•l.h
>

40 
	~<˛ock.h
>

41 
	~<thªad.h
>

42 
	~<¥oc.h
>

43 
	~<cuºít.h
>

44 
	~<synch.h
>

45 
	~<vm.h
>

46 
	~<maöbus.h
>

47 
	~<vfs.h
>

48 
	~<buf.h
>

49 
	~<devi˚.h
>

50 
	~<sysˇŒ.h
>

51 
	~<ã°.h
>

52 
	~<vîsi⁄.h
>

53 
	~"autoc⁄f.h
"

65 c⁄° 
buûdvîsi⁄
;

66 c⁄° 
buûdc⁄fig
[];

71 c⁄° 
	gh¨v¨d_c›yright
[] =

81 
	$boŸ
()

100 
	`k¥ötf
("\n");

101 
	`k¥ötf
("OS/161 ba£ sy°em vîsi⁄ %s\n", 
BASE_VERSION
);

102 
	`k¥ötf
("%s", 
h¨v¨d_c›yright
);

103 
	`k¥ötf
("\n");

105 
	`k¥ötf
("Put-your-group-name-here's system version %s (%s #%d)\n",

106 
GROUP_VERSION
, 
buûdc⁄fig
, 
buûdvîsi⁄
);

107 
	`k¥ötf
("\n");

110 
	`øm_boŸ°øp
();

111 
	`¥oc_boŸ°øp
();

112 
	`thªad_boŸ°øp
();

113 
	`h¨d˛ock_boŸ°øp
();

114 
	`vfs_boŸ°øp
();

115 
	`khóp_√xtgíî©i⁄
();

118 
	`k¥ötf
("DeviceÖrobe...\n");

119 
	`KASSERT
(
cuπhªad
->
t_cur•l
 > 0);

120 
	`maöbus_boŸ°øp
();

121 
	`KASSERT
(
cuπhªad
->
t_cur•l
 == 0);

123 
	`p£udoc⁄fig
();

124 
	`k¥ötf
("\n");

125 
	`khóp_√xtgíî©i⁄
();

128 
	`vm_boŸ°øp
();

129 
	`k¥ötf_boŸ°øp
();

130 
	`thªad_°¨t_˝us
();

133 
	`buf„r_boŸ°øp
();

136 
	`vfs_£tboŸfs
("emu0");

138 
	`khóp_√xtgíî©i⁄
();

143 
	`COMPILE_ASSERT
((
u£Ωå_t
) == (*));

144 
	`COMPILE_ASSERT
((*(
u£Ωå_t
)0) == ());

145 
	}
}

152 
	$shutdown
()

155 
	`k¥ötf
("Shutting down.\n");

157 
	`vfs_˛órboŸfs
();

158 
	`vfs_˛órcurdú
();

159 
	`vfs_unmou¡Æl
();

161 
	`thªad_shutdown
();

163 
	`•lhigh
();

164 
	}
}

176 
	$sys_ªboŸ
(
code
)

178 
code
) {

179 
RB_REBOOT
:

180 
RB_HALT
:

181 
RB_POWEROFF
:

184  
EINVAL
;

187 
	`shutdown
();

189 
code
) {

190 
RB_HALT
:

191 
	`k¥ötf
("The system is halted.\n");

192 
	`maöbus_hÆt
();

194 
RB_REBOOT
:

195 
	`k¥ötf
("Rebooting...\n");

196 
	`maöbus_ªboŸ
();

198 
RB_POWEROFF
:

199 
	`k¥ötf
("The system is halted.\n");

200 
	`maöbus_powîoff
();

204 
	`∑nic
("reboot operation failed\n");

206 
	}
}

213 
	$kmaö
(*
¨gumíts
)

215 
	`boŸ
();

217 
	`míu
(
¨gumíts
);

220 
	}
}

	@main/menu.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<kîn/ªboŸ.h
>

33 
	~<kîn/uni°d.h
>

34 
	~<limôs.h
>

35 
	~<lib.h
>

36 
	~<uio.h
>

37 
	~<˛ock.h
>

38 
	~<thªad.h
>

39 
	~<¥oc.h
>

40 
	~<vfs.h
>

41 
	~<buf.h
>

42 
	~<sfs.h
>

43 
	~<sysˇŒ.h
>

44 
	~<ã°.h
>

45 
	~"›t-synch¥obs.h
"

46 
	~"›t-sfs.h
"

47 
	~"›t-√t.h
"

53 
	#_PATH_SHELL
 "/bö/sh"

	)

55 
	#MAXMENUARGS
 16

	)

74 
	$cmd_¥ogthªad
(*
±r
, 
«rgs
)

76 **
¨gs
 = 
±r
;

77 
¥og«me
[128];

78 
ªsu…
;

80 
	`KASSERT
(
«rgs
 >= 1);

82 i‡(
«rgs
 > 2) {

83 
	`k¥ötf
("Warning:árgumentÖassing from menuÇot supported\n");

87 
	`KASSERT
(
	`°æí
(
¨gs
[0]Ë< (
¥og«me
));

89 
	`°r˝y
(
¥og«me
, 
¨gs
[0]);

91 
ªsu…
 = 
	`ru≈rogøm
(
¥og«me
);

92 i‡(
ªsu…
) {

93 
	`k¥ötf
("Ru¬ögÖrogøm %†Áûed: %s\n", 
¨gs
[0],

94 
	`°ªº‹
(
ªsu…
));

99 
	}
}

115 
	$comm⁄_¥og
(
«rgs
, **
¨gs
)

117 
¥oc
 *proc;

118 
ªsu…
;

121 
¥oc
 = 
	`¥oc_¸óã_ru≈rogøm
(
¨gs
[0] );

122 i‡(
¥oc
 =
NULL
) {

123  
ENOMEM
;

126 
ªsu…
 = 
	`thªad_f‹k
(
¨gs
[0] ,

127 
¥oc
 ,

128 
cmd_¥ogthªad
 ,

129 
¨gs
 , 
«rgs
 );

130 i‡(
ªsu…
) {

131 
	`k¥ötf
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

132 
	`¥oc_de°roy
(
¥oc
);

133  
ªsu…
;

142 
	}
}

149 
	$cmd_¥og
(
«rgs
, **
¨gs
)

151 i‡(
«rgs
 < 2) {

152 
	`k¥ötf
("Usage:ÖÖrogram [arguments]\n");

153  
EINVAL
;

157 
¨gs
++;

158 
«rgs
--;

160  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

161 
	}
}

168 
	$cmd_shñl
(
«rgs
, **
¨gs
)

170 ()
¨gs
;

171 i‡(
«rgs
 != 1) {

172 
	`k¥ötf
("Usage: s\n");

173  
EINVAL
;

176 
¨gs
[0] = (*)
_PATH_SHELL
;

178  
	`comm⁄_¥og
(
«rgs
, 
¨gs
);

179 
	}
}

186 
	$cmd_chdú
(
«rgs
, **
¨gs
)

188 i‡(
«rgs
 != 2) {

189 
	`k¥ötf
("Usage: cd directory\n");

190  
EINVAL
;

193  
	`vfs_chdú
(
¨gs
[1]);

194 
	}
}

201 
	$cmd_pwd
(
«rgs
, **
¨gs
)

203 
buf
[
PATH_MAX
+1];

204 
ªsu…
;

205 
iovec
 
iov
;

206 
uio
 
ku
;

208 ()
«rgs
;

209 ()
¨gs
;

211 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-1, 0, 
UIO_READ
);

212 
ªsu…
 = 
	`vfs_gëcwd
(&
ku
);

213 i‡(
ªsu…
) {

214 
	`k¥ötf
("vfs_gëcwd faûed (%s)\n", 
	`°ªº‹
(
ªsu…
));

215  
ªsu…
;

219 
buf
[(buf)-1-
ku
.
uio_ªsid
] = 0;

222 
	`k¥ötf
("%s\n", 
buf
);

225 
	}
}

232 
	$cmd_sync
(
«rgs
, **
¨gs
)

234 ()
«rgs
;

235 ()
¨gs
;

237 
	`vfs_sync
();

240 
	}
}

247 
	$cmd_∑nic
(
«rgs
, **
¨gs
)

249 ()
«rgs
;

250 ()
¨gs
;

252 
	`∑nic
("UserÑequestedÖanic\n");

254 
	}
}

261 
	$cmd_quô
(
«rgs
, **
¨gs
)

263 ()
«rgs
;

264 ()
¨gs
;

266 
	`vfs_sync
();

267 
	`sys_ªboŸ
(
RB_POWEROFF
);

268 
	`thªad_exô
();

270 
	}
}

278 c⁄° *
	m«me
;

279 (*
	mfunc
)(c⁄° *
	mdevi˚
);

280 } 
	gmou¡èbÀ
[] = {

281 #i‡
OPT_SFS


282 { "sfs", 
sfs_mou¡
 },

288 
	$cmd_mou¡
(
«rgs
, **
¨gs
)

290 *
f°y≥
;

291 *
devi˚
;

292 
i
;

294 i‡(
«rgs
 != 3) {

295 
	`k¥ötf
("Usage: mount fstype device:\n");

296  
EINVAL
;

299 
f°y≥
 = 
¨gs
[1];

300 
devi˚
 = 
¨gs
[2];

303 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

304 
devi˚
[
	`°æí
(device)-1] = 0;

307 
i
=0; i<
	`ARRAYCOUNT
(
mou¡èbÀ
); i++) {

308 i‡(!
	`°rcmp
(
mou¡èbÀ
[
i
].
«me
, 
f°y≥
)) {

309  
mou¡èbÀ
[
i
].
	`func
(
devi˚
);

312 
	`k¥ötf
("Unknow¿fûesy°emÅy≥ %s\n", 
f°y≥
);

313  
EINVAL
;

314 
	}
}

318 
	$cmd_unmou¡
(
«rgs
, **
¨gs
)

320 *
devi˚
;

322 i‡(
«rgs
 != 2) {

323 
	`k¥ötf
("Usage: unmount device:\n");

324  
EINVAL
;

327 
devi˚
 = 
¨gs
[1];

330 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

331 
devi˚
[
	`°æí
(device)-1] = 0;

334  
	`vfs_unmou¡
(
devi˚
);

335 
	}
}

347 
	$cmd_boŸfs
(
«rgs
, **
¨gs
)

349 *
devi˚
;

351 i‡(
«rgs
 != 2) {

352 
	`k¥ötf
("Usage: bootfs device\n");

353  
EINVAL
;

356 
devi˚
 = 
¨gs
[1];

359 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

360 
devi˚
[
	`°æí
(device)-1] = 0;

363  
	`vfs_£tboŸfs
(
devi˚
);

364 
	}
}

368 
	$cmd_khóp°©s
(
«rgs
, **
¨gs
)

370 ()
«rgs
;

371 ()
¨gs
;

373 
	`khóp_¥öt°©s
();

376 
	}
}

380 
	$cmd_khópgíî©i⁄
(
«rgs
, **
¨gs
)

382 ()
«rgs
;

383 ()
¨gs
;

385 
	`khóp_√xtgíî©i⁄
();

388 
	}
}

392 
	$cmd_khópdump
(
«rgs
, **
¨gs
)

394 i‡(
«rgs
 == 1) {

395 
	`khóp_dump
();

397 i‡(
«rgs
 =2 && !
	`°rcmp
(
¨gs
[1], "all")) {

398 
	`khóp_dum∑Œ
();

401 
	`k¥ötf
("Usage: khdump [all]\n");

405 
	}
}

409 
	$cmd_buf°©s
(
«rgs
, **
¨gs
)

411 i‡(
«rgs
 == 1) {

412 ()
¨gs
;

413 
	`buf„r_¥öt°©s
();

416 
	`k¥ötf
("Usage: buf\n");

420 
	}
}

428 
	$showmíu
(c⁄° *
«me
, c⁄° *
x
[])

430 
˘
, 
hÆf
, 
i
;

432 
	`k¥ötf
("\n");

433 
	`k¥ötf
("%s\n", 
«me
);

435 
i
=
˘
=0; 
x
[i]; i++) {

436 
˘
++;

438 
hÆf
 = (
˘
+1)/2;

440 
i
=0; i<
hÆf
; i++) {

441 
	`k¥ötf
(" %-36s", 
x
[
i
]);

442 i‡(
i
+
hÆf
 < 
˘
) {

443 
	`k¥ötf
("%s", 
x
[
i
+
hÆf
]);

445 
	`k¥ötf
("\n");

448 
	`k¥ötf
("\n");

449 
	}
}

451 c⁄° *
	g›smíu
[] = {

463 
NULL


468 
	$cmd_›smíu
(
n
, **
a
)

470 ()
n
;

471 ()
a
;

473 
	`showmíu
("OS/161 o≥øti⁄†míu", 
›smíu
);

475 
	}
}

477 c⁄° *
	gã°míu
[] = {

489 #i‡
OPT_NET


503 
NULL


508 
	$cmd_ã°míu
(
n
, **
a
)

510 ()
n
;

511 ()
a
;

513 
	`showmíu
("OS/161Åe°†míu", 
ã°míu
);

514 
	`k¥ötf
(" (1) TheseÅests will fail until you finishÅhe "

516 
	`k¥ötf
("\n");

519 
	}
}

521 c⁄° *
	gmaömíu
[] = {

528 #i‡
OPT_SYNCHPROBS


533 
NULL


538 
	$cmd_maömíu
(
n
, **
a
)

540 ()
n
;

541 ()
a
;

543 
	`showmíu
("OS/161 kî√»míu", 
maömíu
);

545 
	}
}

552 c⁄° *
	m«me
;

553 (*
	mfunc
)(
	m«rgs
, **
	m¨gs
);

554 } 
	gcmdèbÀ
[] = {

556 { "?", 
cmd_maömíu
 },

557 { "h", 
cmd_maömíu
 },

558 { "hñp", 
cmd_maömíu
 },

559 { "?o", 
cmd_›smíu
 },

560 { "?t", 
cmd_ã°míu
 },

563 { "s", 
cmd_shñl
 },

564 { "p", 
cmd_¥og
 },

565 { "mou¡", 
cmd_mou¡
 },

566 { "unmou¡", 
cmd_unmou¡
 },

567 { "boŸfs", 
cmd_boŸfs
 },

568 { "pf", 
¥ötfûe
 },

569 { "cd", 
cmd_chdú
 },

570 { "pwd", 
cmd_pwd
 },

571 { "sync", 
cmd_sync
 },

572 { "∑nic", 
cmd_∑nic
 },

573 { "q", 
cmd_quô
 },

574 { "exô", 
cmd_quô
 },

575 { "hÆt", 
cmd_quô
 },

578 { "kh", 
cmd_khóp°©s
 },

579 { "khgí", 
cmd_khópgíî©i⁄
 },

580 { "khdump", 
cmd_khópdump
 },

581 { "buf", 
cmd_buf°©s
 },

584 { "©", 
¨øyã°
 },

585 { "©2", 
¨øyã°2
 },

586 { "bt", 
bôm≠ã°
 },

587 { "ét", 
thªadli°ã°
 },

588 { "km1", 
kmÆlo˘e°
 },

589 { "km2", 
kmÆloc°ªss
 },

590 { "km3", 
kmÆlo˘e°3
 },

591 { "km4", 
kmÆlo˘e°4
 },

592 #i‡
OPT_NET


593 { "√t", 
√âe°
 },

595 { "â1", 
thªadã°
 },

596 { "â2", 
thªadã°2
 },

597 { "â3", 
thªadã°3
 },

598 { "sy1", 
£mã°
 },

601 { "sy2", 
lockã°
 },

602 { "sy3", 
cvã°
 },

603 { "sy4", 
cvã°2
 },

604 #i‡
OPT_SYNCHPROBS


605 { "•1", 
ñves
 },

606 { "•2", 
aúbÆlo⁄
 },

610 { "£mu1", 
£mu1
 },

611 { "£mu2", 
£mu2
 },

612 { "£mu3", 
£mu3
 },

613 { "£mu4", 
£mu4
 },

614 { "£mu5", 
£mu5
 },

615 { "£mu6", 
£mu6
 },

616 { "£mu7", 
£mu7
 },

617 { "£mu8", 
£mu8
 },

618 { "£mu9", 
£mu9
 },

619 { "£mu10", 
£mu10
 },

620 { "£mu11", 
£mu11
 },

621 { "£mu12", 
£mu12
 },

622 { "£mu13", 
£mu13
 },

623 { "£mu14", 
£mu14
 },

624 { "£mu15", 
£mu15
 },

625 { "£mu16", 
£mu16
 },

626 { "£mu17", 
£mu17
 },

627 { "£mu18", 
£mu18
 },

628 { "£mu19", 
£mu19
 },

629 { "£mu20", 
£mu20
 },

630 { "£mu21", 
£mu21
 },

631 { "£mu22", 
£mu22
 },

634 { "fs1", 
f°e°
 },

635 { "fs2", 
ªad°ªss
 },

636 { "fs3", 
wrôe°ªss
 },

637 { "fs4", 
wrôe°ªss2
 },

638 { "fs5", 
l⁄g°ªss
 },

639 { "fs6", 
¸óã°ªss
 },

641 { 
NULL
, NULL }

649 
	$cmd_di•©ch
(*
cmd
)

651 
time•ec
 
bef‹e
, 
a·î
, 
duøti⁄
;

652 *
¨gs
[
MAXMENUARGS
];

653 
«rgs
=0;

654 *
w‹d
;

655 *
c⁄ãxt
;

656 
i
, 
ªsu…
;

658 
w‹d
 = 
	`°πok_r
(
cmd
, " \t", &
c⁄ãxt
);

659 
w‹d
 !
NULL
;

660 
w‹d
 = 
	`°πok_r
(
NULL
, " \t", &
c⁄ãxt
)) {

662 i‡(
«rgs
 >
MAXMENUARGS
) {

663 
	`k¥ötf
("CommandÜine hasÅoo many words\n");

664  
E2BIG
;

666 
¨gs
[
«rgs
++] = 
w‹d
;

669 i‡(
«rgs
==0) {

673 
i
=0; 
cmdèbÀ
[i].
«me
; i++) {

674 i‡(*
cmdèbÀ
[
i
].
«me
 && !
	`°rcmp
(
¨gs
[0], cmdtable[i].name)) {

675 
	`KASSERT
(
cmdèbÀ
[
i
].
func
!=
NULL
);

677 
	`gëtime
(&
bef‹e
);

679 
ªsu…
 = 
cmdèbÀ
[
i
].
	`func
(
«rgs
, 
¨gs
);

681 
	`gëtime
(&
a·î
);

682 
	`time•ec_sub
(&
a·î
, &
bef‹e
, &
duøti⁄
);

684 
	`k¥ötf
("OperationÅook %llu.%09lu seconds\n",

685 (Ë
duøti⁄
.
tv_£c
,

686 (Ë
duøti⁄
.
tv_n£c
);

688  
ªsu…
;

692 
	`k¥ötf
("%s: Comm™dÇŸ found\n", 
¨gs
[0]);

693  
EINVAL
;

694 
	}
}

705 
	$míu_execuã
(*
löe
, 
ißrgs
)

707 *
comm™d
;

708 *
c⁄ãxt
;

709 
ªsu…
;

711 
comm™d
 = 
	`°πok_r
(
löe
, ";", &
c⁄ãxt
);

712 
comm™d
 !
NULL
;

713 
comm™d
 = 
	`°πok_r
(
NULL
, ";", &
c⁄ãxt
)) {

715 i‡(
ißrgs
) {

716 
	`k¥ötf
("OS/161 kî√l: %s\n", 
comm™d
);

719 
ªsu…
 = 
	`cmd_di•©ch
(
comm™d
);

720 i‡(
ªsu…
) {

721 
	`k¥ötf
("Míu comm™d faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

722 i‡(
ißrgs
) {

723 
	`∑nic
("FailureÖrocessing kernelárguments\n");

727 
	}
}

747 
	$míu
(*
¨gs
)

749 
buf
[64];

751 
	`míu_execuã
(
¨gs
, 1);

754 
	`k¥ötf
("OS/161 kernel [? for menu]: ");

755 
	`kgës
(
buf
, (buf));

756 
	`míu_execuã
(
buf
, 0);

758 
	}
}

	@proc/proc.c

45 
	~<ty≥s.h
>

46 
	~<•l.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<addr•a˚.h
>

50 
	~<vnode.h
>

55 
¥oc
 *
	gk¥oc
;

61 
¥oc
 *

62 
	$¥oc_¸óã
(c⁄° *
«me
)

64 
¥oc
 *proc;

66 
¥oc
 = 
	`kmÆloc
((*proc));

67 i‡(
¥oc
 =
NULL
) {

68  
NULL
;

70 
¥oc
->
p_«me
 = 
	`k°rdup
(
«me
);

71 i‡(
¥oc
->
p_«me
 =
NULL
) {

72 
	`k‰ì
(
¥oc
);

73  
NULL
;

76 
¥oc
->
p_numthªads
 = 0;

77 
	`•ölock_öô
(&
¥oc
->
p_lock
);

80 
¥oc
->
p_addr•a˚
 = 
NULL
;

83 
¥oc
->
p_cwd
 = 
NULL
;

85  
¥oc
;

86 
	}
}

95 
	$¥oc_de°roy
(
¥oc
 *proc)

105 
	`KASSERT
(
¥oc
 !
NULL
);

106 
	`KASSERT
(
¥oc
 !
k¥oc
);

115 i‡(
¥oc
->
p_cwd
) {

116 
	`VOP_DECREF
(
¥oc
->
p_cwd
);

117 
¥oc
->
p_cwd
 = 
NULL
;

121 i‡(
¥oc
->
p_addr•a˚
) {

155 
addr•a˚
 *
as
;

157 i‡(
¥oc
 =
cuΩroc
) {

158 
as
 = 
	`¥oc_£ès
(
NULL
);

159 
	`as_dó˘iv©e
();

162 
as
 = 
¥oc
->
p_addr•a˚
;

163 
¥oc
->
p_addr•a˚
 = 
NULL
;

165 
	`as_de°roy
(
as
);

168 
	`KASSERT
(
¥oc
->
p_numthªads
 == 0);

169 
	`•ölock_˛ónup
(&
¥oc
->
p_lock
);

171 
	`k‰ì
(
¥oc
->
p_«me
);

172 
	`k‰ì
(
¥oc
);

173 
	}
}

179 
	$¥oc_boŸ°øp
()

181 
k¥oc
 = 
	`¥oc_¸óã
("[kernel]");

182 i‡(
k¥oc
 =
NULL
) {

183 
	`∑nic
("proc_create for kproc failed\n");

185 
	}
}

193 
¥oc
 *

194 
	$¥oc_¸óã_ru≈rogøm
(c⁄° *
«me
)

196 
¥oc
 *
√w¥oc
;

198 
√w¥oc
 = 
	`¥oc_¸óã
(
«me
);

199 i‡(
√w¥oc
 =
NULL
) {

200  
NULL
;

205 
√w¥oc
->
p_addr•a˚
 = 
NULL
;

214 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

215 i‡(
cuΩroc
->
p_cwd
 !
NULL
) {

216 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

217 
√w¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd;

219 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

221  
√w¥oc
;

222 
	}
}

234 
	$¥oc_addthªad
(
¥oc
 *¥oc, 
thªad
 *
t
)

236 
•l
;

238 
	`KASSERT
(
t
->
t_¥oc
 =
NULL
);

240 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

241 
¥oc
->
p_numthªads
++;

242 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

244 
•l
 = 
	`•lhigh
();

245 
t
->
t_¥oc
 = 
¥oc
;

246 
	`•lx
(
•l
);

249 
	}
}

261 
	$¥oc_ªmthªad
(
thªad
 *
t
)

263 
¥oc
 *proc;

264 
•l
;

266 
¥oc
 = 
t
->
t_¥oc
;

267 
	`KASSERT
(
¥oc
 !
NULL
);

269 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

270 
	`KASSERT
(
¥oc
->
p_numthªads
 > 0);

271 
¥oc
->
p_numthªads
--;

272 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

274 
•l
 = 
	`•lhigh
();

275 
t
->
t_¥oc
 = 
NULL
;

276 
	`•lx
(
•l
);

277 
	}
}

287 
addr•a˚
 *

288 
	$¥oc_gëas
()

290 
addr•a˚
 *
as
;

291 
¥oc
 *¥o¯
cuΩroc
;

293 i‡(
¥oc
 =
NULL
) {

294  
NULL
;

297 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

298 
as
 = 
¥oc
->
p_addr•a˚
;

299 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

300  
as
;

301 
	}
}

307 
addr•a˚
 *

308 
	$¥oc_£ès
(
addr•a˚
 *
√was
)

310 
addr•a˚
 *
ﬁdas
;

311 
¥oc
 *¥o¯
cuΩroc
;

313 
	`KASSERT
(
¥oc
 !
NULL
);

315 
	`•ölock_acquúe
(&
¥oc
->
p_lock
);

316 
ﬁdas
 = 
¥oc
->
p_addr•a˚
;

317 
¥oc
->
p_addr•a˚
 = 
√was
;

318 
	`•ölock_ªÀa£
(&
¥oc
->
p_lock
);

319  
ﬁdas
;

320 
	}
}

	@synchprobs/airballoon.c

105 
	~<ty≥s.h
>

106 
	~<lib.h
>

107 
	~<wch™.h
>

108 
	~<thªad.h
>

109 
	~<synch.h
>

110 
	~<ã°.h
>

111 
	~<kîn/î∫o.h
>

112 
	~"comm⁄.h
"

114 
	#NROPES
 128

	)

115 
	#NTHREADS
 10

116 

	)

117 vﬁ©ûê
	gnum_dñëed
 = 0;

119 
	sbÆlo⁄_hook
 {

120 vﬁ©ûê
	mground_ndx
;

121 vﬁ©ûê
boﬁ
 
	mis_m≠≥d
;

124 
	sground_°ake
 {

125 vﬁ©ûê
	mbÆlo⁄_ndx
;

126 vﬁ©ûê
boﬁ
 
	mis_m≠≥d
;

129 
lock
 *
	mlk
;

136 
£m≠h‹e
 *
	gexô_£m
;

139 
lock
 *
	gnum_dñëed_lk
;

142 
bÆlo⁄_hook
 
	gbÆlo⁄_hooks
[
NROPES
];

143 
ground_°ake
 
	gground_°akes
[
NROPES
];

149 
	e≥rs⁄
 {

150 
	mDANDELION
,

151 
	mMARIGOLD
,

159 
	$¥öt_dñëed_m≠pög
(
≥rs⁄
 
who
,

160 
bÆlo⁄_ödex
,

161 
ground_ödex
,

162 
num_dñëed_cuºít
) {

163 c⁄° *
«me
 = (
who
 =
DANDELION
) ? "dandelion" : "marigold";

164 
	`k¥ötf
("{who: %s, balloon: %u, ground: %u, deleted: %u}\n",

165 
«me
, 
bÆlo⁄_ödex
, 
ground_ödex
, 
num_dñëed_cuºít
);

166 
	`thªad_yõld
();

167 
	}
}

174 
	$öô_m≠pögs
() {

175 
bÆlo⁄_ndx
, 
ground_ndx
, 
i
;

176 
¨øy
[
NROPES
];

178 
i
 = 0; i < 
NROPES
; i++) {

179 
¨øy
[
i
] = i;

183 
	`shufÊe
(
¨øy
, 
NROPES
);

184 
i
 = 0; i < 
NROPES
; i++) {

185 
bÆlo⁄_ndx
 = 
i
;

186 
ground_ndx
 = 
¨øy
[
i
];

188 
bÆlo⁄_hooks
[
bÆlo⁄_ndx
].
ground_ndx
 = ground_ndx;

189 
bÆlo⁄_hooks
[
bÆlo⁄_ndx
].
is_m≠≥d
 = 
åue
;

191 
ground_°akes
[
ground_ndx
].
bÆlo⁄_ndx
 = balloon_ndx;

192 
ground_°akes
[
ground_ndx
].
is_m≠≥d
 = 
åue
;

194 
	}
}

198 
	$d™dñi⁄
(*
d©a
, 
junk
) {

200 
bÆlo⁄_ndx
, 
ground_ndx
;

201 
num_dñëed_cuºít
;

204 (Ë
d©a
;

205 (Ë
junk
;

210 
	`lock_acquúe
(
num_dñëed_lk
);

211 i‡(
num_dñëed
 =
NROPES
) {

212 
	`lock_ªÀa£
(
num_dñëed_lk
);

215 
	`lock_ªÀa£
(
num_dñëed_lk
);

218 
bÆlo⁄_ndx
 = 
	`øndom
(Ë% 
NROPES
;

219 i‡(!
bÆlo⁄_hooks
[
bÆlo⁄_ndx
].
is_m≠≥d
) {

224 
ground_ndx
 = 
bÆlo⁄_hooks
[
bÆlo⁄_ndx
].ground_ndx;

230 i‡(
ground_ndx
 >
NROPES
)

233 
	`lock_acquúe
(
ground_°akes
[
ground_ndx
].
lk
);

239 i‡(
ground_°akes
[
ground_ndx
].
bÆlo⁄_ndx
 != balloon_ndx ||

240 !
ground_°akes
[
ground_ndx
].
is_m≠≥d
) {

241 
	`lock_ªÀa£
(
ground_°akes
[
ground_ndx
].
lk
);

250 
bÆlo⁄_hooks
[
bÆlo⁄_ndx
].
is_m≠≥d
 = 
Ál£
;

251 
ground_°akes
[
ground_ndx
].
is_m≠≥d
 = 
Ál£
;

252 
bÆlo⁄_hooks
[
bÆlo⁄_ndx
].
ground_ndx
 = 0xDEADBEEF;

253 
ground_°akes
[
ground_ndx
].
bÆlo⁄_ndx
 = 0xBAADBEEF;

255 
	`lock_acquúe
(
num_dñëed_lk
);

256 
num_dñëed_cuºít
 = ++
num_dñëed
;

257 
	`lock_ªÀa£
(
num_dñëed_lk
);

261 
	`lock_ªÀa£
(
ground_°akes
[
ground_ndx
].
lk
);

263 
	`¥öt_dñëed_m≠pög
(
DANDELION
,

264 
bÆlo⁄_ndx
, 
ground_ndx
, 
num_dñëed_cuºít
);

267 
	`V
(
exô_£m
);

268 
	}
}

272 
	$m¨igﬁd
(*
d©a
, 
junk
) {

274 
bÆlo⁄_ndx
, 
ground_ndx
;

275 
num_dñëed_cuºít
;

278 (Ë
d©a
;

279 (Ë
junk
;

285 
	`lock_acquúe
(
num_dñëed_lk
);

286 i‡(
num_dñëed
 =
NROPES
) {

287 
	`lock_ªÀa£
(
num_dñëed_lk
);

290 
	`lock_ªÀa£
(
num_dñëed_lk
);

293 
ground_ndx
 = 
	`øndom
(Ë% 
NROPES
;

294 i‡(!
ground_°akes
[
ground_ndx
].
is_m≠≥d
) {

298 
	`lock_acquúe
(
ground_°akes
[
ground_ndx
].
lk
);

301 i‡(!
ground_°akes
[
ground_ndx
].
is_m≠≥d
) {

302 
	`lock_ªÀa£
(
ground_°akes
[
ground_ndx
].
lk
);

309 
bÆlo⁄_ndx
 = 
ground_°akes
[
ground_ndx
].balloon_ndx;

312 
ground_°akes
[
ground_ndx
].
is_m≠≥d
 = 
Ál£
;

313 
bÆlo⁄_hooks
[
bÆlo⁄_ndx
].
is_m≠≥d
 = 
Ál£
;

314 
ground_°akes
[
ground_ndx
].
bÆlo⁄_ndx
 = 0xBEEFDEAD;

315 
bÆlo⁄_hooks
[
bÆlo⁄_ndx
].
ground_ndx
 = 0xFEEDBEEF;

317 
	`lock_acquúe
(
num_dñëed_lk
);

318 
num_dñëed_cuºít
 = ++
num_dñëed
;

319 
	`lock_ªÀa£
(
num_dñëed_lk
);

322 
	`lock_ªÀa£
(
ground_°akes
[
ground_ndx
].
lk
);

324 
	`¥öt_dñëed_m≠pög
(
MARIGOLD
,

325 
bÆlo⁄_ndx
, 
ground_ndx
, 
num_dñëed_cuºít
);

329 
	`V
(
exô_£m
);

330 
	}
}

334 
	$KûÀrFlowî
(*
d©a
, 
junk
){

336 
gndx_a
, 
gndx_b
, 
i
, 
m≠pögs_to_ch™ge
, 
ãmp
;

339 (Ë
d©a
;

340 (Ë
junk
;

342 
m≠pögs_to_ch™ge
 = 
	`øndom
(Ë% 
NROPES
;

344 
i
 = 0; i < 
m≠pögs_to_ch™ge
; i++) {

346 
gndx_a
 = 
	`øndom
(Ë% 
NROPES
;

347 
gndx_b
 = 
	`øndom
(Ë% 
NROPES
;

350 i‡(
gndx_a
 =
gndx_b
) {

355 
	`lock_acquúe
(
ground_°akes
[
gndx_a
].
lk
);

356 
	`lock_acquúe
(
ground_°akes
[
gndx_b
].
lk
);

360 i‡(
ground_°akes
[
gndx_a
].
is_m≠≥d
 &&

361 
ground_°akes
[
gndx_b
].
is_m≠≥d
) {

364 
bÆlo⁄_hooks
[
ground_°akes
[
gndx_a
].
bÆlo⁄_ndx
].
ground_ndx


365 
gndx_b
;

366 
bÆlo⁄_hooks
[
ground_°akes
[
gndx_b
].
bÆlo⁄_ndx
].
ground_ndx


367 
gndx_a
;

370 
ãmp
 = 
ground_°akes
[
gndx_a
].
bÆlo⁄_ndx
;

372 
ground_°akes
[
gndx_a
].
bÆlo⁄_ndx
 =

373 
ground_°akes
[
gndx_b
].
bÆlo⁄_ndx
;

374 
ground_°akes
[
gndx_b
].
bÆlo⁄_ndx
 = 
ãmp
;

377 
	`lock_ªÀa£
(
ground_°akes
[
gndx_a
].
lk
);

378 
	`lock_ªÀa£
(
ground_°akes
[
gndx_b
].
lk
);

381 
	`V
(
exô_£m
);

382 
	}
}

385 
	$aúbÆlo⁄
(
«rgs
, **
¨gs
) {

386 
i
;

388 (Ë
«rgs
;

389 (Ë
¨gs
;

390 
	`öô_m≠pögs
();

391 
num_dñëed
 = 0;

393 
i
 = 0; i < 
NROPES
; ++i) {

394 
ground_°akes
[
i
].
lk
 = 
	`lock_¸óã
("groundÜock");

395 
	`KASSERT
–
ground_°akes
[
i
].
lk
 !
NULL
 );

398 
num_dñëed_lk
 = 
	`lock_¸óã
("num_deletedÜock");

399 
	`KASSERT
–
num_dñëed_lk
 !
NULL
 );

400 
exô_£m
 = 
	`£m_¸óã
("exit_sem",0);

401 
	`KASSERT
–
exô_£m
 !
NULL
 );

403 
	`thªad_f‹k_‹_∑nic
("FlowîKûÀr", 
NULL
, 
KûÀrFlowî
, NULL, 0);

406 
i
 = 0; i < 
NTHREADS
; i++) {

407 
	`thªad_f‹k_‹_∑nic
("D™dñi⁄", 
NULL
, 
d™dñi⁄
, NULL, 0);

408 
	`thªad_f‹k_‹_∑nic
("M¨igﬁd", 
NULL
, 
m¨igﬁd
, NULL, 0);

411 
i
 = 0; i < 2*
NTHREADS
 + 1; ++i)

412 
	`P
(
exô_£m
);

415 
num_dñëed
 = 0;

416 
	`£m_de°roy
(
exô_£m
);

417 
	`lock_de°roy
(
num_dñëed_lk
);

418 
i
 = 0; i < 
NROPES
; ++i) {

419 
	`lock_de°roy
(
ground_°akes
[
i
].
lk
);

423 
	}
}

	@synchprobs/common.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<wch™.h
>

33 
	~<thªad.h
>

34 
	~<synch.h
>

35 
	~<ã°.h
>

36 
	~<kîn/î∫o.h
>

37 
	~"comm⁄.h
"

40 
thªad_f‹k_‹_∑nic
(c⁄° *
«me
, 
¥oc
 *proc,

41 (*
func
)(*, ),

42 *
d©a1
, 
d©a2
)

44 
ªsu…
;

46 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
¥oc
, 
func
, 
d©a1
, 
d©a2
);

47 i‡(
ªsu…
) {

48 
	`∑nic
("thªad_f‹k: %s\n", 
	`°ªº‹
(
ªsu…
));

50 
	}
}

54 
	$sw≠
(*
a
, *
b
)

56 
tmp
;

58 
tmp
 = *
a
;

59 *
a
 = *
b
;

60 *
b
 = 
tmp
;

61 
	}
}

64 
	$shufÊe
(*
¨øy
, 
Àn
)

66 
i
, 
sw≠_©
;

72 
i
 = 0; i < 
Àn
; i++) {

73 
sw≠_©
 = 
i
 + (
	`øndom
(Ë% (
Àn
 - i));

74 
	`sw≠
(&
¨øy
[
i
], &¨øy[
sw≠_©
]);

76 
	}
}

	@synchprobs/common.h

30 #i‚de‡
COMMON_H


31 
	#COMMON_H


	)

33 
thªad_f‹k_‹_∑nic
(c⁄° *
«me
, 
¥oc
 *proc,

34 (*
func
)(*, ),

35 *
d©a1
, 
d©a2
);

37 
	`shufÊe
(*
¨øy
, 
Àn
);

	@synchprobs/elves.c

49 
	~<ty≥s.h
>

50 
	~<lib.h
>

51 
	~<wch™.h
>

52 
	~<thªad.h
>

53 
	~<synch.h
>

54 
	~<ã°.h
>

55 
	~<kîn/î∫o.h
>

56 
	~"comm⁄.h
"

58 
	#NUM_TASKS
 16

	)

60 c⁄° *
	gèsks
[
NUM_TASKS
] = {

84 
	$w‹k
(
ñf_num
)

86 
r
;

88 
r
 = 
	`øndom
(Ë% 
NUM_TASKS
;

89 
r
 != 0) {

90 
	`k¥ötf
("El‡%3u: %s\n", 
ñf_num
, 
èsks
[
r
]);

91 
r
 = 
	`øndom
(Ë% 
NUM_TASKS
;

92 
	`thªad_yõld
();

94 
	}
}

98 
	ssu≥rvis‹_¨gs
 {

99 
	mnum_ñves
;

102 
£m≠h‹e
 *
	msu≥rvis‹_exô
;

107 
	sñf_¨gs
 {

108 
£m≠h‹e
 *
	msu≥rvis‹_ªady
;

109 
£m≠h‹e
 *
	mñf_d⁄e
;

110 vﬁ©ûê
	mexôed_ñf
;

115 
	$ñf
(*
¨gs
, 
id
)

117 
ñf_¨gs
 *
órgs
 = (ñf_¨g†*Ë
¨gs
;

118 
	`w‹k
(
id
);

121 
	`P
(
órgs
->
su≥rvis‹_ªady
);

124 
órgs
->
exôed_ñf
 = 
id
;

125 
	`V
(
órgs
->
ñf_d⁄e
);

126 
	}
}

130 
	$su≥rvis‹
(*
¨gs
, 
junk
)

132 
su≥rvis‹_¨gs
 *
ßrgs
 = (su≥rvis‹_¨g†*Ë
¨gs
;

133 ()
junk
;

135 
ñf_¨gs
 
órgs
 = {

136 .
su≥rvis‹_ªady
 = 
	`£m_¸óã
("supervisor_ready",0),

137 .
ñf_d⁄e
 = 
	`£m_¸óã
("elf_done",0)

139 
	`KASSERT
–(
órgs
.
su≥rvis‹_ªady
 !
NULL
 &&É¨gs.
ñf_d⁄e
 != NULL) &&

144 
i
 = 0; i < 
ßrgs
->
num_ñves
; ++i) {

145 i‡(
	`thªad_f‹k
("ñf", 
NULL
, 
ñf
, &
órgs
, 
i
) != 0)

146 
	`∑nic
("CouldÇot forkÉlf. TryáskingÅhe dwarves.");

149 
i
 = 0; i < 
ßrgs
->
num_ñves
; ++i) {

150 
	`V
(
órgs
.
su≥rvis‹_ªady
);

151 
	`P
(
órgs
.
ñf_d⁄e
);

152 
	`k¥ötf
("Th™k†f‹ you∏w‹k ELF %3u\n", 
órgs
.
exôed_ñf
);

156 
	`V
(
ßrgs
->
su≥rvis‹_exô
);

159 
	`£m_de°roy
(
órgs
.
su≥rvis‹_ªady
);

160 
	`£m_de°roy
(
órgs
.
ñf_d⁄e
);

161 
	}
}

164 
	$ñves
(
«rgs
, **
¨gs
)

167 
num_ñves
 = 10;

168 i‡(
«rgs
 == 2) {

169 
num_ñves
 = 
	`©oi
(
¨gs
[1]);

173 
su≥rvis‹_¨gs
 
ßrgs
 = {

174 .
num_ñves
 =Çum_elves,

175 .
su≥rvis‹_exô
 = 
	`£m_¸óã
("supervisor_exit", 0)

178 
	`KASSERT
–(
ßrgs
.
su≥rvis‹_exô
 !
NULL
) && "FailedÅo create supervisor_exit sem");

181 i‡(
	`thªad_f‹k
("su≥rvis‹", 
NULL
, 
su≥rvis‹
, &
ßrgs
, 0) != 0)

182 
	`∑nic
("FailedÅo create supervisorÅhread");

185 
	`P
(
ßrgs
.
su≥rvis‹_exô
);

188 
	`£m_de°roy
(
ßrgs
.
su≥rvis‹_exô
);

191 
	}
}

	@syscall/loadelf.c

53 
	~<ty≥s.h
>

54 
	~<kîn/î∫o.h
>

55 
	~<lib.h
>

56 
	~<uio.h
>

57 
	~<¥oc.h
>

58 
	~<cuºít.h
>

59 
	~<addr•a˚.h
>

60 
	~<vnode.h
>

61 
	~<ñf.h
>

79 
	$lﬂd_£gmít
(
addr•a˚
 *
as
, 
vnode
 *
v
,

80 
off_t
 
off£t
, 
vaddr_t
 
vaddr
,

81 
size_t
 
memsize
, size_à
fûesize
,

82 
is_execuèbÀ
)

84 
iovec
 
iov
;

85 
uio
 
u
;

86 
ªsu…
;

88 i‡(
fûesize
 > 
memsize
) {

89 
	`k¥ötf
("ELF: warning: segment filesize > segment memsize\n");

90 
fûesize
 = 
memsize
;

93 
	`DEBUG
(
DB_EXEC
, "ELF: Loading %lu bytesÅo 0x%lx\n",

94 (Ë
fûesize
, (Ë
vaddr
);

96 
iov
.
iov_uba£
 = (
u£Ωå_t
)
vaddr
;

97 
iov
.
iov_Àn
 = 
memsize
;

98 
u
.
uio_iov
 = &
iov
;

99 
u
.
uio_iov˙t
 = 1;

100 
u
.
uio_ªsid
 = 
fûesize
;

101 
u
.
uio_off£t
 = 
off£t
;

102 
u
.
uio_£gÊg
 = 
is_execuèbÀ
 ? 
UIO_USERISPACE
 : 
UIO_USERSPACE
;

103 
u
.
uio_rw
 = 
UIO_READ
;

104 
u
.
uio_•a˚
 = 
as
;

106 
ªsu…
 = 
	`VOP_READ
(
v
, &
u
);

107 i‡(
ªsu…
) {

108  
ªsu…
;

111 i‡(
u
.
uio_ªsid
 != 0) {

113 
	`k¥ötf
("ELF: shortÑead on segment - fileÅruncated?\n");

114  
ENOEXEC
;

133 
size_t
 
fûœmt
;

135 
fûœmt
 = 
memsize
 - 
fûesize
;

136 i‡(
fûœmt
 > 0) {

137 
	`DEBUG
(
DB_EXEC
, "ELF: Zero-filling %lu more bytes\n",

138 (Ë
fûœmt
);

139 
u
.
uio_ªsid
 +
fûœmt
;

140 
ªsu…
 = 
	`uiomovezîos
(
fûœmt
, &
u
);

145  
ªsu…
;

146 
	}
}

154 
	$lﬂd_ñf
(
vnode
 *
v
, 
vaddr_t
 *
íåypoöt
)

156 
Elf_Ehdr
 
eh
;

157 
Elf_Phdr
 
ph
;

158 
ªsu…
, 
i
;

159 
iovec
 
iov
;

160 
uio
 
ku
;

161 
addr•a˚
 *
as
;

163 
as
 = 
	`¥oc_gëas
();

169 
	`uio_köô
(&
iov
, &
ku
, &
eh
, ”h), 0, 
UIO_READ
);

170 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

171 i‡(
ªsu…
) {

172  
ªsu…
;

175 i‡(
ku
.
uio_ªsid
 != 0) {

177 
	`k¥ötf
("ELF: shortÑead on header - fileÅruncated?\n");

178  
ENOEXEC
;

192 i‡(
eh
.
e_idít
[
EI_MAG0
] !
ELFMAG0
 ||

193 
eh
.
e_idít
[
EI_MAG1
] !
ELFMAG1
 ||

194 
eh
.
e_idít
[
EI_MAG2
] !
ELFMAG2
 ||

195 
eh
.
e_idít
[
EI_MAG3
] !
ELFMAG3
 ||

196 
eh
.
e_idít
[
EI_CLASS
] !
ELFCLASS32
 ||

197 
eh
.
e_idít
[
EI_DATA
] !
ELFDATA2MSB
 ||

198 
eh
.
e_idít
[
EI_VERSION
] !
EV_CURRENT
 ||

199 
eh
.
e_vîsi⁄
 !
EV_CURRENT
 ||

200 
eh
.
e_ty≥
!=
ET_EXEC
 ||

201 
eh
.
e_machöe
!=
EM_MACHINE
) {

202  
ENOEXEC
;

220 
i
=0; i<
eh
.
e_phnum
; i++) {

221 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

222 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

224 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

225 i‡(
ªsu…
) {

226  
ªsu…
;

229 i‡(
ku
.
uio_ªsid
 != 0) {

231 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

232  
ENOEXEC
;

235 
ph
.
p_ty≥
) {

236 
PT_NULL
: ;

237 
PT_PHDR
: ;

238 
PT_MIPS_REGINFO
: ;

239 
PT_LOAD
: ;

241 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

242 
ph
.
p_ty≥
);

243  
ENOEXEC
;

246 
ªsu…
 = 
	`as_deföe_ªgi⁄
(
as
,

247 
ph
.
p_vaddr
,Öh.
p_memsz
,

248 
ph
.
p_Êags
 & 
PF_R
,

249 
ph
.
p_Êags
 & 
PF_W
,

250 
ph
.
p_Êags
 & 
PF_X
);

251 i‡(
ªsu…
) {

252  
ªsu…
;

256 
ªsu…
 = 
	`as_¥ï¨e_lﬂd
(
as
);

257 i‡(
ªsu…
) {

258  
ªsu…
;

265 
i
=0; i<
eh
.
e_phnum
; i++) {

266 
off_t
 
off£t
 = 
eh
.
e_phoff
 + 
i
*eh.
e_phítsize
;

267 
	`uio_köô
(&
iov
, &
ku
, &
ph
, ’h), 
off£t
, 
UIO_READ
);

269 
ªsu…
 = 
	`VOP_READ
(
v
, &
ku
);

270 i‡(
ªsu…
) {

271  
ªsu…
;

274 i‡(
ku
.
uio_ªsid
 != 0) {

276 
	`k¥ötf
("ELF: shortÑead onÖhdr - fileÅruncated?\n");

277  
ENOEXEC
;

280 
ph
.
p_ty≥
) {

281 
PT_NULL
: ;

282 
PT_PHDR
: ;

283 
PT_MIPS_REGINFO
: ;

284 
PT_LOAD
: ;

286 
	`k¥ötf
("loadelf: unknown segmentÅype %d\n",

287 
ph
.
p_ty≥
);

288  
ENOEXEC
;

291 
ªsu…
 = 
	`lﬂd_£gmít
(
as
, 
v
, 
ph
.
p_off£t
,Öh.
p_vaddr
,

292 
ph
.
p_memsz
,Öh.
p_fûesz
,

293 
ph
.
p_Êags
 & 
PF_X
);

294 i‡(
ªsu…
) {

295  
ªsu…
;

299 
ªsu…
 = 
	`as_com∂ëe_lﬂd
(
as
);

300 i‡(
ªsu…
) {

301  
ªsu…
;

304 *
íåypoöt
 = 
eh
.
e_íåy
;

307 
	}
}

	@syscall/runprogram.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<lib.h
>

40 
	~<¥oc.h
>

41 
	~<cuºít.h
>

42 
	~<addr•a˚.h
>

43 
	~<vm.h
>

44 
	~<vfs.h
>

45 
	~<sysˇŒ.h
>

46 
	~<ã°.h
>

55 
	$ru≈rogøm
(*
¥og«me
)

57 
addr•a˚
 *
as
;

58 
vnode
 *
v
;

59 
vaddr_t
 
íåypoöt
, 
°ack±r
;

60 
ªsu…
;

63 
ªsu…
 = 
	`vfs_›í
(
¥og«me
, 
O_RDONLY
, 0, &
v
);

64 i‡(
ªsu…
) {

65  
ªsu…
;

69 
	`KASSERT
(
	`¥oc_gëas
(Ë=
NULL
);

72 
as
 = 
	`as_¸óã
();

73 i‡(
as
 =
NULL
) {

74 
	`vfs_˛o£
(
v
);

75  
ENOMEM
;

79 
	`¥oc_£ès
(
as
);

80 
	`as_a˘iv©e
();

83 
ªsu…
 = 
	`lﬂd_ñf
(
v
, &
íåypoöt
);

84 i‡(
ªsu…
) {

86 
	`vfs_˛o£
(
v
);

87  
ªsu…
;

91 
	`vfs_˛o£
(
v
);

94 
ªsu…
 = 
	`as_deföe_°ack
(
as
, &
°ack±r
);

95 i‡(
ªsu…
) {

97  
ªsu…
;

101 
	`íãr_√w_¥o˚ss
(0 , 
NULL
 ,

102 
NULL
 ,

103 
°ack±r
, 
íåypoöt
);

106 
	`∑nic
("enter_new_processÑeturned\n");

107  
EINVAL
;

108 
	}
}

	@syscall/time_syscalls.c

30 
	~<ty≥s.h
>

31 
	~<˛ock.h
>

32 
	~<c›yöout.h
>

33 
	~<sysˇŒ.h
>

39 
	$sys___time
(
u£Ωå_t
 
u£r_£c⁄ds_±r
, u£Ωå_à
u£r_«no£c⁄ds_±r
)

41 
time•ec
 
ts
;

42 
ªsu…
;

44 
	`gëtime
(&
ts
);

46 
ªsu…
 = 
	`c›yout
(&
ts
.
tv_£c
, 
u£r_£c⁄ds_±r
, (ts.tv_sec));

47 i‡(
ªsu…
) {

48  
ªsu…
;

51 
ªsu…
 = 
	`c›yout
(&
ts
.
tv_n£c
, 
u£r_«no£c⁄ds_±r
,

52 (
ts
.
tv_n£c
));

53 i‡(
ªsu…
) {

54  
ªsu…
;

58 
	}
}

	@test/arraytest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<¨øy.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 73

	)

36 
	#BIGTESTSIZE
 3000

	)

37 
	#NTH
(
i
Ë((*)(0xb007 + 3*(i)))

	)

41 
	$ã°a
(
¨øy
 *
a
)

43 
ã°¨øy
[
TESTSIZE
];

44 
i
, 
j
, 
n
, 
r
, *
p
;

46 
i
=0; i<
TESTSIZE
; i++) {

47 
ã°¨øy
[
i
]=i;

50 
n
 = 
	`¨øy_num
(
a
);

51 
	`KASSERT
(
n
==0);

53 
i
=0; i<
TESTSIZE
; i++) {

54 
r
 = 
	`¨øy_add
(
a
, &
ã°¨øy
[
i
], 
NULL
);

55 
	`KASSERT
(
r
==0);

56 
n
 = 
	`¨øy_num
(
a
);

57 
	`KASSERT
(
n
==
i
+1);

59 
n
 = 
	`¨øy_num
(
a
);

60 
	`KASSERT
(
n
==
TESTSIZE
);

62 
i
=0; i<
TESTSIZE
; i++) {

63 
p
 = 
	`¨øy_gë
(
a
, 
i
);

64 
	`KASSERT
(*
p
 =
i
);

66 
n
 = 
	`¨øy_num
(
a
);

67 
	`KASSERT
(
n
==
TESTSIZE
);

69 
j
=0; j<
TESTSIZE
*4; j++) {

70 
i
 = 
	`øndom
()%
TESTSIZE
;

71 
p
 = 
	`¨øy_gë
(
a
, 
i
);

72 
	`KASSERT
(*
p
 =
i
);

74 
n
 = 
	`¨øy_num
(
a
);

75 
	`KASSERT
(
n
==
TESTSIZE
);

77 
i
=0; i<
TESTSIZE
; i++) {

78 
	`¨øy_£t
(
a
, 
i
, &
ã°¨øy
[
TESTSIZE
-i-1]);

81 
i
=0; i<
TESTSIZE
; i++) {

82 
p
 = 
	`¨øy_gë
(
a
, 
i
);

83 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

86 
r
 = 
	`¨øy_£tsize
(
a
, 
TESTSIZE
/2);

87 
	`KASSERT
(
r
==0);

89 
i
=0; i<
TESTSIZE
/2; i++) {

90 
p
 = 
	`¨øy_gë
(
a
, 
i
);

91 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-1);

94 
	`¨øy_ªmove
(
a
, 1);

96 
i
=1; i<
TESTSIZE
/2 - 1; i++) {

97 
p
 = 
	`¨øy_gë
(
a
, 
i
);

98 
	`KASSERT
(*
p
 =
TESTSIZE
-
i
-2);

100 
p
 = 
	`¨øy_gë
(
a
, 0);

101 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

103 
	`¨øy_£tsize
(
a
, 2);

104 
p
 = 
	`¨øy_gë
(
a
, 0);

105 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

106 
p
 = 
	`¨øy_gë
(
a
, 1);

107 
	`KASSERT
(*
p
 =
TESTSIZE
-3);

109 
	`¨øy_£t
(
a
, 1, 
NULL
);

110 
	`¨øy_£tsize
(
a
, 2);

111 
p
 = 
	`¨øy_gë
(
a
, 0);

112 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

113 
p
 = 
	`¨øy_gë
(
a
, 1);

114 
	`KASSERT
(
p
==
NULL
);

116 
	`¨øy_£tsize
(
a
, 
TESTSIZE
*10);

117 
p
 = 
	`¨øy_gë
(
a
, 0);

118 
	`KASSERT
(*
p
 =
TESTSIZE
-1);

119 
p
 = 
	`¨øy_gë
(
a
, 1);

120 
	`KASSERT
(
p
==
NULL
);

121 
	}
}

124 
	$¨øyã°
(
«rgs
, **
¨gs
)

126 
¨øy
 *
a
;

128 ()
«rgs
;

129 ()
¨gs
;

131 
	`k¥ötf
("BeginningárrayÅest...\n");

132 
a
 = 
	`¨øy_¸óã
();

133 
	`KASSERT
(
a
 !
NULL
);

135 
	`ã°a
(
a
);

137 
	`¨øy_£tsize
(
a
, 0);

139 
	`ã°a
(
a
);

141 
	`¨øy_£tsize
(
a
, 0);

142 
	`¨øy_de°roy
(
a
);

144 
	`k¥ötf
("ArrayÅest complete\n");

146 
	}
}

149 
	$¨øyã°2
(
«rgs
, **
¨gs
)

151 
¨øy
 *
a
;

152 *
p
;

153 
i
, 
x
;

154 
ªsu…
;

156 ()
«rgs
;

157 ()
¨gs
;

159 
	`k¥ötf
("BeginningÜargeárrayÅest...\n");

160 
a
 = 
	`¨øy_¸óã
();

161 
	`KASSERT
(
a
 !
NULL
);

164 
p
 = (*)0xc0ffee;

165 
i
=0; i<
BIGTESTSIZE
; i++) {

166 
ªsu…
 = 
	`¨øy_add
(
a
, 
p
, &
x
);

167 
	`KASSERT
(
ªsu…
 == 0);

168 
	`KASSERT
(
x
 =
i
);

170 
	`KASSERT
(
	`¨øy_num
(
a
Ë=
BIGTESTSIZE
);

173 
i
=0; i<
BIGTESTSIZE
; i++) {

174 
	`KASSERT
(
	`¨øy_gë
(
a
, 
i
Ë=
p
);

178 
ªsu…
 = 
	`¨øy_£tsize
(
a
, 0);

179 
	`KASSERT
(
ªsu…
 == 0);

182 
ªsu…
 = 
	`¨øy_£tsize
(
a
, 
BIGTESTSIZE
);

183 
	`KASSERT
(
ªsu…
 == 0);

184 
i
=0; i<
BIGTESTSIZE
; i++) {

185 
	`¨øy_£t
(
a
, 
i
, 
	`NTH
(i));

189 
i
=0; i<
BIGTESTSIZE
; i++) {

190 
	`KASSERT
(
	`¨øy_gë
(
a
, 
i
Ë=
	`NTH
(i));

194 
	`¨øy_ªmove
(
a
, 1);

195 
	`KASSERT
(
	`¨øy_gë
(
a
, 0Ë=
	`NTH
(0));

196 
	`KASSERT
(
	`¨øy_num
(
a
Ë=
BIGTESTSIZE
-1);

197 
i
=1; i<
BIGTESTSIZE
-1; i++) {

198 
	`KASSERT
(
	`¨øy_gë
(
a
, 
i
Ë=
	`NTH
(i+1));

202 
ªsu…
 = 
	`¨øy_£tsize
(
a
, 
BIGTESTSIZE
*2);

203 
	`KASSERT
(
ªsu…
 == 0);

204 
	`KASSERT
(
	`¨øy_gë
(
a
, 0Ë=
	`NTH
(0));

205 
i
=1; i<
BIGTESTSIZE
-1; i++) {

206 
	`KASSERT
(
	`¨øy_gë
(
a
, 
i
Ë=
	`NTH
(i+1));

210 
ªsu…
 = 
	`¨øy_£tsize
(
a
, 0);

211 
	`KASSERT
(
ªsu…
 == 0);

212 
	`¨øy_de°roy
(
a
);

214 
	`k¥ötf
("Done.\n");

217 
	}
}

	@test/bitmaptest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<bôm≠.h
>

33 
	~<ã°.h
>

35 
	#TESTSIZE
 533

	)

38 
	$bôm≠ã°
(
«rgs
, **
¨gs
)

40 
bôm≠
 *
b
;

41 
d©a
[
TESTSIZE
];

42 
uöt32_t
 
x
;

43 
i
;

45 ()
«rgs
;

46 ()
¨gs
;

48 
	`k¥ötf
("Starting bitmapÅest...\n");

50 
i
=0; i<
TESTSIZE
; i++) {

51 
d©a
[
i
] = 
	`øndom
()%2;

54 
b
 = 
	`bôm≠_¸óã
(
TESTSIZE
);

55 
	`KASSERT
(
b
 !
NULL
);

57 
i
=0; i<
TESTSIZE
; i++) {

58 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

61 
i
=0; i<
TESTSIZE
; i++) {

62 i‡(
d©a
[
i
]) {

63 
	`bôm≠_m¨k
(
b
, 
i
);

66 
i
=0; i<
TESTSIZE
; i++) {

67 i‡(
d©a
[
i
]) {

68 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

71 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

75 
i
=0; i<
TESTSIZE
; i++) {

76 i‡(
d©a
[
i
]) {

77 
	`bôm≠_unm¨k
(
b
, 
i
);

80 
	`bôm≠_m¨k
(
b
, 
i
);

83 
i
=0; i<
TESTSIZE
; i++) {

84 i‡(
d©a
[
i
]) {

85 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
)==0);

88 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

92 
	`bôm≠_Æloc
(
b
, &
x
)==0) {

93 
	`KASSERT
(
x
 < 
TESTSIZE
);

94 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
x
));

95 
	`KASSERT
(
d©a
[
x
]==1);

96 
d©a
[
x
] = 0;

99 
i
=0; i<
TESTSIZE
; i++) {

100 
	`KASSERT
(
	`bôm≠_is£t
(
b
, 
i
));

101 
	`KASSERT
(
d©a
[
i
]==0);

104 
	`k¥ötf
("BitmapÅest complete\n");

106 
	}
}

	@test/fstest.c

41 
	~<ty≥s.h
>

42 
	~<kîn/î∫o.h
>

43 
	~<kîn/f˙é.h
>

44 
	~<lib.h
>

45 
	~<uio.h
>

46 
	~<thªad.h
>

47 
	~<synch.h
>

48 
	~<vfs.h
>

49 
	~<fs.h
>

50 
	~<vnode.h
>

51 
	~<ã°.h
>

53 
	#SLOGAN
 "HODIE MIHI - CRAS TIBI\n"

	)

54 
	#FILENAME
 "f°e°.tmp"

	)

55 
	#NCHUNKS
 720

	)

56 
	#NTHREADS
 12

	)

57 
	#NLONG
 32

	)

58 
	#NCREATE
 24

	)

60 
£m≠h‹e
 *
	gthªad£m
 = 
NULL
;

64 
	$öô_thªad£m
()

66 i‡(
thªad£m
==
NULL
) {

67 
thªad£m
 = 
	`£m_¸óã
("fstestsem", 0);

68 i‡(
thªad£m
 =
NULL
) {

69 
	`∑nic
("fstest: sem_create failed\n");

72 
	}
}

80 
	$rŸ©e
(*
°r
, 
amt
)

82 
i
, 
ch
;

84 
amt
 = (amt+2600)%26;

85 
	`KASSERT
(
amt
>=0);

87 
i
=0; 
°r
[i]; i++) {

88 
ch
 = 
°r
[
i
];

89 i‡(
ch
>='A' && ch<='Z') {

90 
ch
 = ch - 'A';

91 
ch
 +
amt
;

92 
ch
 %= 26;

93 
ch
 = ch + 'A';

94 
	`KASSERT
(
ch
>='A' && ch<='Z');

96 
°r
[
i
] = 
ch
;

98 
	}
}

104 
	$f°e°_makíame
(*
buf
, 
size_t
 
buÊí
,

105 c⁄° *
fs
, c⁄° *
«mesuffix
)

107 
	`¢¥ötf
(
buf
, 
buÊí
, "%s:%s%s", 
fs
, 
FILENAME
, 
«mesuffix
);

108 
	`KASSERT
(
	`°æí
(
buf
Ë< 
buÊí
);

109 
	}
}

111 
	#MAKENAME
(Ë
	`f°e°_makíame
(
«me
, “ame), 
fs
, 
«mesuffix
)

	)

115 
	$f°e°_ªmove
(c⁄° *
fs
, c⁄° *
«mesuffix
)

117 
«me
[32];

118 
buf
[32];

119 
îr
;

121 
	`MAKENAME
();

123 
	`°r˝y
(
buf
, 
«me
);

124 
îr
 = 
	`vfs_ªmove
(
buf
);

125 i‡(
îr
) {

126 
	`k¥ötf
("CouldÇŸÑemovê%s: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

131 
	}
}

135 
	$f°e°_wrôe
(c⁄° *
fs
, c⁄° *
«mesuffix
,

136 
°ridesize
, 
°ridïos
)

138 
vnode
 *
vn
;

139 
îr
;

140 
i
;

141 
size_t
 
shouldbyãs
=0;

142 
size_t
 
byãs
=0;

143 
off_t
 
pos
=0;

144 
«me
[32];

145 
buf
[32];

146 
iovec
 
iov
;

147 
uio
 
ku
;

148 
Êags
;

150 
	`KASSERT
((
buf
Ë> 
	`°æí
(
SLOGAN
));

152 
	`MAKENAME
();

154 
Êags
 = 
O_WRONLY
|
O_CREAT
;

155 i‡(
°ridesize
 == 1) {

156 
Êags
 |
O_TRUNC
;

160 
	`°r˝y
(
buf
, 
«me
);

161 
îr
 = 
	`vfs_›í
(
buf
, 
Êags
, 0664, &
vn
);

162 i‡(
îr
) {

163 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

164 
«me
, 
	`°ªº‹
(
îr
));

168 
i
=0; i<
NCHUNKS
; i++) {

169 i‡(
i
 % 
°ridesize
 !
°ridïos
) {

170 
pos
 +
	`°æí
(
SLOGAN
);

173 
	`°r˝y
(
buf
, 
SLOGAN
);

174 
	`rŸ©e
(
buf
, 
i
);

175 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
pos
, 
UIO_WRITE
);

176 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

177 i‡(
îr
) {

178 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

179 
	`vfs_˛o£
(
vn
);

180 
	`vfs_ªmove
(
«me
);

184 i‡(
ku
.
uio_ªsid
 > 0) {

185 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

186 
«me
, (Ë
ku
.
uio_ªsid
);

187 
	`vfs_˛o£
(
vn
);

188 
	`vfs_ªmove
(
«me
);

192 
byãs
 +(
ku
.
uio_off£t
 - 
pos
);

193 
shouldbyãs
 +
	`°æí
(
SLOGAN
);

194 
pos
 = 
ku
.
uio_off£t
;

197 
	`vfs_˛o£
(
vn
);

199 i‡(
byãs
 !
shouldbyãs
) {

200 
	`k¥ötf
("%s: %lu bytes written, should have been %lu!\n",

201 
«me
, (Ë
byãs
,

202 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

203 
	`vfs_ªmove
(
«me
);

206 
	`k¥ötf
("%s: %lu byã†wrôãn\n", 
«me
, (Ë
byãs
);

209 
	}
}

213 
	$f°e°_ªad
(c⁄° *
fs
, c⁄° *
«mesuffix
)

215 
vnode
 *
vn
;

216 
îr
;

217 
i
;

218 
size_t
 
byãs
=0;

219 
«me
[32];

220 
buf
[32];

221 
iovec
 
iov
;

222 
uio
 
ku
;

224 
	`MAKENAME
();

227 
	`°r˝y
(
buf
, 
«me
);

228 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

229 i‡(
îr
) {

230 
	`k¥ötf
("CouldÇot openÅest file forÑead: %s\n",

231 
	`°ªº‹
(
îr
));

235 
i
=0; i<
NCHUNKS
; i++) {

236 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 
byãs
, 
UIO_READ
);

237 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

238 i‡(
îr
) {

239 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

240 
	`vfs_˛o£
(
vn
);

244 i‡(
ku
.
uio_ªsid
 > 0) {

245 
	`k¥ötf
("%s: Sh‹àªad: %lu byã†À· ovî\n", 
«me
,

246 (Ë
ku
.
uio_ªsid
);

247 
	`vfs_˛o£
(
vn
);

250 
buf
[
	`°æí
(
SLOGAN
)] = 0;

251 
	`rŸ©e
(
buf
, -
i
);

252 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

253 
	`k¥ötf
("%s: Test failed:Üine %d mismatched: %s\n",

254 
«me
, 
i
+1, 
buf
);

255 
	`vfs_˛o£
(
vn
);

259 
byãs
 = 
ku
.
uio_off£t
;

262 
	`vfs_˛o£
(
vn
);

264 i‡(
byãs
 !
NCHUNKS
*
	`°æí
(
SLOGAN
)) {

265 
	`k¥ötf
("%s: %lu bytesÑead, should have been %lu!\n",

266 
«me
, (Ë
byãs
,

267 (Ë(
NCHUNKS
*
	`°æí
(
SLOGAN
)));

270 
	`k¥ötf
("%s: %lu byã†ªad\n", 
«me
, (Ë
byãs
);

272 
	}
}

278 
	$dof°e°
(c⁄° *
fûesys
)

280 
	`k¥ötf
("*** Sèπög fûesy°emÅe° o¿%s:\n", 
fûesys
);

282 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

283 
	`k¥ötf
("*** Test failed\n");

287 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

288 
	`k¥ötf
("*** Test failed\n");

292 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

293 
	`k¥ötf
("*** Test failed\n");

297 
	`k¥ötf
("*** FilesystemÅest done\n");

298 
	}
}

304 
	$ªad°ªss_thªad
(*
fs
, 
num
)

306 c⁄° *
fûesys
 = 
fs
;

307 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

308 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

310 
	`V
(
thªad£m
);

311 
	}
}

315 
	$d‹ód°ªss
(c⁄° *
fûesys
)

317 
i
, 
îr
;

319 
	`öô_thªad£m
();

321 
	`k¥ötf
("*** Sèπög f†ªad såes†ã° o¿%s:\n", 
fûesys
);

323 i‡(
	`f°e°_wrôe
(
fûesys
, "", 1, 0)) {

324 
	`k¥ötf
("*** Test failed\n");

328 
i
=0; i<
NTHREADS
; i++) {

329 
îr
 = 
	`thªad_f‹k
("ªad°ªss", 
NULL
,

330 
ªad°ªss_thªad
, (*)
fûesys
, 
i
);

331 i‡(
îr
) {

332 
	`∑nic
("readstress:Åhread_fork failed: %s\n",

333 
	`°ªº‹
(
îr
));

337 
i
=0; i<
NTHREADS
; i++) {

338 
	`P
(
thªad£m
);

341 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

342 
	`k¥ötf
("*** Test failed\n");

346 
	`k¥ötf
("*** fsÑead stressÅest done\n");

347 
	}
}

353 
	$wrôe°ªss_thªad
(*
fs
, 
num
)

355 c⁄° *
fûesys
 = 
fs
;

356 
num°r
[8];

357 
	`¢¥ötf
(
num°r
, “um°r), "%lu", 
num
);

359 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

360 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

361 
	`V
(
thªad£m
);

365 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

366 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

367 
	`V
(
thªad£m
);

371 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

372 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

375 
	`k¥ötf
("*** Thªad %lu: d⁄e\n", 
num
);

377 
	`V
(
thªad£m
);

378 
	}
}

382 
	$dowrôe°ªss
(c⁄° *
fûesys
)

384 
i
, 
îr
;

386 
	`öô_thªad£m
();

388 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° o¿%s:\n", 
fûesys
);

390 
i
=0; i<
NTHREADS
; i++) {

391 
îr
 = 
	`thªad_f‹k
("wrôe°ªss", 
NULL
,

392 
wrôe°ªss_thªad
, (*)
fûesys
, 
i
);

393 i‡(
îr
) {

394 
	`∑nic
("thªad_f‹k faûed %s\n", 
	`°ªº‹
(
îr
));

398 
i
=0; i<
NTHREADS
; i++) {

399 
	`P
(
thªad£m
);

402 
	`k¥ötf
("*** fs write stressÅest done\n");

403 
	}
}

409 
	$wrôe°ªss2_thªad
(*
fs
, 
num
)

411 c⁄° *
fûesys
 = 
fs
;

413 i‡(
	`f°e°_wrôe
(
fûesys
, "", 
NTHREADS
, 
num
)) {

414 
	`k¥ötf
("*** Thªad %lu: faûed\n", 
num
);

415 
	`V
(
thªad£m
);

419 
	`V
(
thªad£m
);

420 
	}
}

424 
	$dowrôe°ªss2
(c⁄° *
fûesys
)

426 
i
, 
îr
;

427 
«me
[32];

428 
vnode
 *
vn
;

430 
	`öô_thªad£m
();

432 
	`k¥ötf
("*** Sèπög f†wrôê°ªs†ã° 2 o¿%s:\n", 
fûesys
);

435 
	`f°e°_makíame
(
«me
, “ame), 
fûesys
, "");

436 
îr
 = 
	`vfs_›í
(
«me
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

437 i‡(
îr
) {

438 
	`k¥ötf
("CouldÇŸ cª©êã° fûe: %s\n", 
	`°ªº‹
(
îr
));

439 
	`k¥ötf
("*** Test failed\n");

442 
	`vfs_˛o£
(
vn
);

444 
i
=0; i<
NTHREADS
; i++) {

445 
îr
 = 
	`thªad_f‹k
("wrôe°ªss2", 
NULL
,

446 
wrôe°ªss2_thªad
, (*)
fûesys
, 
i
);

447 i‡(
îr
) {

448 
	`∑nic
("writestress2:Åhread_fork failed: %s\n",

449 
	`°ªº‹
(
îr
));

453 
i
=0; i<
NTHREADS
; i++) {

454 
	`P
(
thªad£m
);

457 i‡(
	`f°e°_ªad
(
fûesys
, "")) {

458 
	`k¥ötf
("*** Test failed\n");

462 i‡(
	`f°e°_ªmove
(
fûesys
, "")) {

463 
	`k¥ötf
("*** Test failed\n");

467 
	`k¥ötf
("*** fs write stressÅest 2 done\n");

468 
	}
}

474 
	$l⁄g°ªss_thªad
(*
fs
, 
num
)

476 c⁄° *
fûesys
 = 
fs
;

477 
i
;

478 
num°r
[16];

480 
i
=0; i<
NLONG
; i++) {

482 
	`¢¥ötf
(
num°r
, “um°r), "%lu-%d", 
num
, 
i
);

484 i‡(
	`f°e°_wrôe
(
fûesys
, 
num°r
, 1, 0)) {

485 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

486 
	`V
(
thªad£m
);

490 i‡(
	`f°e°_ªad
(
fûesys
, 
num°r
)) {

491 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

492 
	`V
(
thªad£m
);

496 i‡(
	`f°e°_ªmove
(
fûesys
, 
num°r
)) {

497 
	`k¥ötf
("*** Thªad %lu: fûê%d: faûed\n", 
num
, 
i
);

498 
	`V
(
thªad£m
);

504 
	`V
(
thªad£m
);

505 
	}
}

509 
	$dﬁ⁄g°ªss
(c⁄° *
fûesys
)

511 
i
, 
îr
;

513 
	`öô_thªad£m
();

515 
	`k¥ötf
("*** Sèπög f†l⁄g såes†ã° o¿%s:\n", 
fûesys
);

517 
i
=0; i<
NTHREADS
; i++) {

518 
îr
 = 
	`thªad_f‹k
("l⁄g°ªss", 
NULL
,

519 
l⁄g°ªss_thªad
, (*)
fûesys
, 
i
);

520 i‡(
îr
) {

521 
	`∑nic
("longstress:Åhread_fork failed %s\n",

522 
	`°ªº‹
(
îr
));

526 
i
=0; i<
NTHREADS
; i++) {

527 
	`P
(
thªad£m
);

530 
	`k¥ötf
("*** fsÜong stressÅest done\n");

531 
	}
}

537 
	$¸óã°ªss_thªad
(*
fs
, 
num
)

539 c⁄° *
fûesys
 = 
fs
;

540 
i
, 
îr
;

541 
«mesuffix
[16];

542 
«me
[32];

543 
buf
[32];

544 
vnode
 *
vn
;

545 
iovec
 
iov
;

546 
uio
 
ku
;

547 
size_t
 
byãs
;

548 
numwrôãn
 = 0, 
numªad
 = 0, 
numªmoved
 = 0;

550 
i
=0; i<
NCREATE
; i++) {

551 
	`¢¥ötf
(
«mesuffix
, “amesuffix), "%lu-%d", 
num
, 
i
);

552 
	`MAKENAME
();

555 
	`°r˝y
(
buf
, 
«me
);

556 
îr
 = 
	`vfs_›í
(
buf
, 
O_WRONLY
|
O_CREAT
|
O_TRUNC
, 0664, &
vn
);

557 i‡(
îr
) {

558 
	`k¥ötf
("CouldÇot open %s for write: %s\n",

559 
«me
, 
	`°ªº‹
(
îr
));

563 
	`°r˝y
(
buf
, 
SLOGAN
);

564 
	`rŸ©e
(
buf
, 
i
);

566 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 0, 
UIO_WRITE
);

567 
îr
 = 
	`VOP_WRITE
(
vn
, &
ku
);

568 
	`vfs_˛o£
(
vn
);

569 i‡(
îr
) {

570 
	`k¥ötf
("%s: Wrôêîr‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

573 i‡(
ku
.
uio_ªsid
 > 0) {

574 
	`k¥ötf
("%s: Short write: %lu bytesÜeft over\n",

575 
«me
, (Ë
ku
.
uio_ªsid
);

579 
byãs
 = 
ku
.
uio_off£t
;

580 i‡(
byãs
 !
	`°æí
(
SLOGAN
)) {

581 
	`k¥ötf
("%s: %lu bytes written,Éxpected %lu!\n",

582 
«me
, (Ë
byãs
,

583 (Ë
	`°æí
(
SLOGAN
));

586 
numwrôãn
++;

588 
	`k¥ötf
("Thªad %lu: %u fûe†wrôãn\n", 
num
, 
numwrôãn
);

590 
i
=0; i<
NCREATE
; i++) {

591 
	`¢¥ötf
(
«mesuffix
, “amesuffix), "%lu-%d", 
num
, 
i
);

592 
	`MAKENAME
();

595 
	`°r˝y
(
buf
, 
«me
);

596 
îr
 = 
	`vfs_›í
(
buf
, 
O_RDONLY
, 0664, &
vn
);

597 i‡(
îr
) {

598 
	`k¥ötf
("CouldÇot open %s forÑead: %s\n",

599 
«me
, 
	`°ªº‹
(
îr
));

603 
	`uio_köô
(&
iov
, &
ku
, 
buf
, 
	`°æí
(
SLOGAN
), 0, 
UIO_READ
);

604 
îr
 = 
	`VOP_READ
(
vn
, &
ku
);

605 
	`vfs_˛o£
(
vn
);

606 i‡(
îr
) {

607 
	`k¥ötf
("%s: RódÉº‹: %s\n", 
«me
, 
	`°ªº‹
(
îr
));

610 i‡(
ku
.
uio_ªsid
 > 0) {

611 
	`k¥ötf
("%s: ShortÑead: %lu bytesÜeft over\n",

612 
«me
, (Ë
ku
.
uio_ªsid
);

616 
buf
[
	`°æí
(
SLOGAN
)] = 0;

617 
	`rŸ©e
(
buf
, -
i
);

619 i‡(
	`°rcmp
(
buf
, 
SLOGAN
)) {

620 
	`k¥ötf
("%s: Test failed: file mismatched: %s\n",

621 
«me
, 
buf
);

625 
byãs
 = 
ku
.
uio_off£t
;

626 i‡(
byãs
 !
	`°æí
(
SLOGAN
)) {

627 
	`k¥ötf
("%s: %lu bytesÑead,Éxpected %lu!\n",

628 
«me
, (Ë
byãs
,

629 (Ë
	`°æí
(
SLOGAN
));

633 
numªad
++;

635 
	`k¥ötf
("Thªad %lu: %u fûe†ªad\n", 
num
, 
numªad
);

637 
i
=0; i<
NCREATE
; i++) {

638 
	`¢¥ötf
(
«mesuffix
, “amesuffix), "%lu-%d", 
num
, 
i
);

639 i‡(
	`f°e°_ªmove
(
fûesys
, 
«mesuffix
)) {

642 
numªmoved
++;

644 
	`k¥ötf
("Thªad %lu: %u fûe†ªmoved\n", 
num
, 
numªmoved
);

646 
	`V
(
thªad£m
);

647 
	}
}

651 
	$do¸óã°ªss
(c⁄° *
fûesys
)

653 
i
, 
îr
;

655 
	`öô_thªad£m
();

657 
	`k¥ötf
("*** Sèπög f†¸óã såes†ã° o¿%s:\n", 
fûesys
);

659 
i
=0; i<
NTHREADS
; i++) {

660 
îr
 = 
	`thªad_f‹k
("¸óã°ªss", 
NULL
,

661 
¸óã°ªss_thªad
, (*)
fûesys
, 
i
);

662 i‡(
îr
) {

663 
	`∑nic
("createstress:Åhread_fork failed %s\n",

664 
	`°ªº‹
(
îr
));

668 
i
=0; i<
NTHREADS
; i++) {

669 
	`P
(
thªad£m
);

672 
	`k¥ötf
("*** fs create stressÅest done\n");

673 
	}
}

679 
	$checkfûesy°em
(
«rgs
, **
¨gs
)

681 *
devi˚
;

683 i‡(
«rgs
 != 2) {

684 
	`k¥ötf
("Usage: fs[12345] filesystem:\n");

685  
EINVAL
;

688 
devi˚
 = 
¨gs
[1];

691 i‡(
devi˚
[
	`°æí
(device)-1]==':') {

692 
devi˚
[
	`°æí
(device)-1] = 0;

696 
	}
}

698 
	#DEFTEST
(
ã°«me
) \

700 
	`ã°«me
(
«rgs
, **
¨gs
) \

702 
ªsu…
; \

703 
ªsu…
 = 
	`checkfûesy°em
(
«rgs
, 
¨gs
); \

704 i‡(
ªsu…
) { \

705  
ªsu…
; \

707 do##
	`ã°«me
(
¨gs
[1]); \

709 }

	)

711 
DEFTEST
(
f°e°
);

712 
DEFTEST
(
ªad°ªss
);

713 
DEFTEST
(
wrôe°ªss
);

714 
DEFTEST
(
wrôe°ªss2
);

715 
DEFTEST
(
l⁄g°ªss
);

716 
DEFTEST
(
¸óã°ªss
);

721 
	$¥ötfûe
(
«rgs
, **
¨gs
)

723 
vnode
 *
rv
, *
wv
;

724 
iovec
 
iov
;

725 
uio
 
ku
;

726 
off_t
 
Ωos
=0, 
wpos
=0;

727 
buf
[128];

728 
outfûe
[16];

729 
ªsu…
;

730 
d⁄e
=0;

732 i‡(
«rgs
 != 2) {

733 
	`k¥ötf
("Usage:Öf filename\n");

734  
EINVAL
;

738 
	`°r˝y
(
outfûe
, "con:");

740 
ªsu…
 = 
	`vfs_›í
(
¨gs
[1], 
O_RDONLY
, 0664, &
rv
);

741 i‡(
ªsu…
) {

742 
	`k¥ötf
("¥ötfûe: %s\n", 
	`°ªº‹
(
ªsu…
));

743  
ªsu…
;

746 
ªsu…
 = 
	`vfs_›í
(
outfûe
, 
O_WRONLY
, 0664, &
wv
);

747 i‡(
ªsu…
) {

748 
	`k¥ötf
("¥ötfûe: ouçut: %s\n", 
	`°ªº‹
(
ªsu…
));

749 
	`vfs_˛o£
(
rv
);

750  
ªsu…
;

753 !
d⁄e
) {

754 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf), 
Ωos
, 
UIO_READ
);

755 
ªsu…
 = 
	`VOP_READ
(
rv
, &
ku
);

756 i‡(
ªsu…
) {

757 
	`k¥ötf
("RódÉº‹: %s\n", 
	`°ªº‹
(
ªsu…
));

760 
Ωos
 = 
ku
.
uio_off£t
;

762 i‡(
ku
.
uio_ªsid
 > 0) {

763 
d⁄e
 = 1;

766 
	`uio_köô
(&
iov
, &
ku
, 
buf
, (buf)-ku.
uio_ªsid
, 
wpos
,

767 
UIO_WRITE
);

768 
ªsu…
 = 
	`VOP_WRITE
(
wv
, &
ku
);

769 i‡(
ªsu…
) {

770 
	`k¥ötf
("Wrôêîr‹: %s\n", 
	`°ªº‹
(
ªsu…
));

773 
wpos
 = 
ku
.
uio_off£t
;

775 i‡(
ku
.
uio_ªsid
 > 0) {

776 
	`k¥ötf
("Warning: short write\n");

780 
	`vfs_˛o£
(
wv
);

781 
	`vfs_˛o£
(
rv
);

784 
	}
}

	@test/kmalloctest.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<vm.h
>

39 
	~<ã°.h
>

41 
	~"›t-dumbvm.h
"

57 
	#NTRIES
 1200

	)

58 
	#ITEMSIZE
 997

	)

59 
	#NTHREADS
 8

	)

63 
	$kmÆlo˘hªad
(*
sm
, 
num
)

65 
£m≠h‹e
 *
£m
 = 
sm
;

66 *
±r
;

67 *
ﬁd±r
=
NULL
;

68 *
ﬁd±r2
=
NULL
;

69 
i
;

71 
i
=0; i<
NTRIES
; i++) {

72 
±r
 = 
	`kmÆloc
(
ITEMSIZE
);

73 i‡(
±r
==
NULL
) {

74 i‡(
£m
) {

75 
	`k¥ötf
("thread %lu: kmallocÑeturned NULL\n",

76 
num
);

77 
d⁄e
;

79 
	`k¥ötf
("kmallocÑeturnedÇull;Åest failed.\n");

80 
d⁄e
;

82 i‡(
ﬁd±r2
) {

83 
	`k‰ì
(
ﬁd±r2
);

85 
ﬁd±r2
 = 
ﬁd±r
;

86 
ﬁd±r
 = 
±r
;

88 
d⁄e
:

89 i‡(
ﬁd±r2
) {

90 
	`k‰ì
(
ﬁd±r2
);

92 i‡(
ﬁd±r
) {

93 
	`k‰ì
(
ﬁd±r
);

95 i‡(
£m
) {

96 
	`V
(
£m
);

98 
	}
}

101 
	$kmÆlo˘e°
(
«rgs
, **
¨gs
)

103 ()
«rgs
;

104 ()
¨gs
;

106 
	`k¥ötf
("Starting kmallocÅest...\n");

107 
	`kmÆlo˘hªad
(
NULL
, 0);

108 
	`k¥ötf
("kmallocÅest done\n");

111 
	}
}

114 
	$kmÆloc°ªss
(
«rgs
, **
¨gs
)

116 
£m≠h‹e
 *
£m
;

117 
i
, 
ªsu…
;

119 ()
«rgs
;

120 ()
¨gs
;

122 
£m
 = 
	`£m_¸óã
("kmallocstress", 0);

123 i‡(
£m
 =
NULL
) {

124 
	`∑nic
("kmallocstress: sem_create failed\n");

127 
	`k¥ötf
("Starting kmalloc stressÅest...\n");

129 
i
=0; i<
NTHREADS
; i++) {

130 
ªsu…
 = 
	`thªad_f‹k
("kmÆloc°ªss", 
NULL
,

131 
kmÆlo˘hªad
, 
£m
, 
i
);

132 i‡(
ªsu…
) {

133 
	`∑nic
("kmallocstress:Åhread_fork failed: %s\n",

134 
	`°ªº‹
(
ªsu…
));

138 
i
=0; i<
NTHREADS
; i++) {

139 
	`P
(
£m
);

142 
	`£m_de°roy
(
£m
);

143 
	`k¥ötf
("kmalloc stressÅest done\n");

146 
	}
}

173 
	$kmÆlo˘e°3
(
«rgs
, **
¨gs
)

175 
	#NUM_KM3_SIZES
 5

	)

176 c⁄° 
sizes
[
NUM_KM3_SIZES
] = { 32, 41, 109, 86, 9 };

177 
num±rs
;

178 
size_t
 
±r•a˚
;

179 
size_t
 
blocksize
;

180 
num±rblocks
;

181 ***
±rblocks
;

182 
curblock
, 
cuΩos
, 
cursizeödex
, 
cursize
;

183 
size_t
 
tŸÆsize
;

184 
i
, 
j
;

185 *
±r
;

187 i‡(
«rgs
 != 2) {

188 
	`k¥ötf
("kmalloctest3: usage: km3Çumobjects\n");

189  
EINVAL
;

193 
num±rs
 = 
	`©oi
(
¨gs
[1]);

194 
±r•a˚
 = 
num±rs
 * (*);

197 
blocksize
 = 
PAGE_SIZE
 / 4;

198 
num±rblocks
 = 
	`DIVROUNDUP
(
±r•a˚
, 
blocksize
);

200 
	`k¥ötf
("kmalloctest3: %u objects, %uÖointer blocks\n",

201 
num±rs
, 
num±rblocks
);

204 
±rblocks
 = 
	`kmÆloc
(
num±rblocks
 * (ptrblocks[0]));

205 i‡(
±rblocks
 =
NULL
) {

206 
	`∑nic
("kmalloctest3: failed onÖointer blockárray\n");

209 
i
=0; i<
num±rblocks
; i++) {

210 
±rblocks
[
i
] = 
	`kmÆloc
(
blocksize
);

211 i‡(
±rblocks
[
i
] =
NULL
) {

212 
	`∑nic
("kmÆlo˘e°3: faûed o¿poöã∏block %u\n", 
i
);

217 
curblock
 = 0;

218 
cuΩos
 = 0;

219 
cursizeödex
 = 0;

220 
tŸÆsize
 = 0;

221 
i
=0; i<
num±rs
; i++) {

222 
cursize
 = 
sizes
[
cursizeödex
];

223 
±r
 = 
	`kmÆloc
(
cursize
);

224 i‡(
±r
 =
NULL
) {

225 
	`k¥ötf
("kmalloctest3: failed on object %u size %u\n",

226 
i
, 
cursize
);

227 
	`k¥ötf
("kmalloctest3:Öos %u inÖointer block %u\n",

228 
cuΩos
, 
curblock
);

229 
	`k¥ötf
("kmÆlo˘e°3:ÅŸÆ sÿÁ∏%zu\n", 
tŸÆsize
);

230 
	`∑nic
("kmalloctest3: failed.\n");

233 
j
=0; j<
cursize
; j++) {

234 
±r
[
j
] = (Ë
i
;

237 
±rblocks
[
curblock
][
cuΩos
] = 
±r
;

238 
cuΩos
++;

239 i‡(
cuΩos
 >
blocksize
 / (*)) {

240 
curblock
++;

241 
cuΩos
 = 0;

244 
tŸÆsize
 +
cursize
;

245 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

248 
	`k¥ötf
("kmÆlo˘e°3: %zu byã†Æloˇãd\n", 
tŸÆsize
);

251 
curblock
 = 0;

252 
cuΩos
 = 0;

253 
cursizeödex
 = 0;

254 
i
=0; i<
num±rs
; i++) {

255 
cursize
 = 
sizes
[
cursizeödex
];

256 
±r
 = 
±rblocks
[
curblock
][
cuΩos
];

257 
	`KASSERT
(
±r
 !
NULL
);

258 
j
=0; j<
cursize
; j++) {

259 i‡(
±r
[
j
] =(Ë
i
) {

262 
	`k¥ötf
("kmalloctest3: failed on object %u size %u\n",

263 
i
, 
cursize
);

264 
	`k¥ötf
("kmalloctest3:Öos %u inÖointer block %u\n",

265 
cuΩos
, 
curblock
);

266 
	`k¥ötf
("kmÆlo˘e°3:áàobje˘ off£à%u\n", 
j
);

267 
	`k¥ötf
("kmalloctest3:Éxpected 0x%x, found 0x%x\n",

268 
±r
[
j
], (Ë
i
);

269 
	`∑nic
("kmalloctest3: failed.\n");

271 
	`k‰ì
(
±r
);

272 
cuΩos
++;

273 i‡(
cuΩos
 >
blocksize
 / (*)) {

274 
curblock
++;

275 
cuΩos
 = 0;

277 
	`KASSERT
(
tŸÆsize
 > 0);

278 
tŸÆsize
 -
cursize
;

279 
cursizeödex
 = (cursizeödex + 1Ë% 
NUM_KM3_SIZES
;

281 
	`KASSERT
(
tŸÆsize
 == 0);

284 
i
=0; i<
num±rblocks
; i++) {

285 
	`KASSERT
(
±rblocks
[
i
] !
NULL
);

286 
	`k‰ì
(
±rblocks
[
i
]);

289 
	`k‰ì
(
±rblocks
);

291 
	`k¥ötf
("kmalloctest3:Öassed\n");

293 
	}
}

300 
	$kmÆlo˘e°4thªad
(*
sm
, 
num
)

302 
	#NUM_KM4_SIZES
 5

	)

303 c⁄° 
sizes
[
NUM_KM4_SIZES
] = { 1, 3, 5, 2, 4 };

305 
£m≠h‹e
 *
£m
 = 
sm
;

306 *
±rs
[
NUM_KM4_SIZES
];

307 
p
, 
q
;

308 
i
;

310 
i
=0; i<
NUM_KM4_SIZES
; i++) {

311 
±rs
[
i
] = 
NULL
;

313 
p
 = 0;

314 
q
 = 
NUM_KM4_SIZES
 / 2;

316 
i
=0; i<
NTRIES
; i++) {

317 i‡(
±rs
[
q
] !
NULL
) {

318 
	`k‰ì
(
±rs
[
q
]);

319 
±rs
[
q
] = 
NULL
;

321 
±rs
[
p
] = 
	`kmÆloc
(
sizes
[p] * 
PAGE_SIZE
);

322 i‡(
±rs
[
p
] =
NULL
) {

323 
	`∑nic
("kmalloctest4:Åhread %lu: "

325 
num
, 
sizes
[
p
]);

327 
p
 = (∞+ 1Ë% 
NUM_KM4_SIZES
;

328 
q
 = (q + 1Ë% 
NUM_KM4_SIZES
;

331 
i
=0; i<
NUM_KM4_SIZES
; i++) {

332 i‡(
±rs
[
i
] !
NULL
) {

333 
	`k‰ì
(
±rs
[
i
]);

337 
	`V
(
£m
);

338 
	}
}

341 
	$kmÆlo˘e°4
(
«rgs
, **
¨gs
)

343 
£m≠h‹e
 *
£m
;

344 
¡hªads
;

345 
i
;

346 
ªsu…
;

348 ()
«rgs
;

349 ()
¨gs
;

351 
	`k¥ötf
("Starting multipage kmallocÅest...\n");

352 #i‡
OPT_DUMBVM


353 
	`k¥ötf
("(ThisÅest willÇot work with dumbvm)\n");

356 
£m
 = 
	`£m_¸óã
("kmalloctest4", 0);

357 i‡(
£m
 =
NULL
) {

358 
	`∑nic
("kmalloctest4: sem_create failed\n");

362 
¡hªads
 = (3*
NTHREADS
)/4;

364 
i
=0; i<
¡hªads
; i++) {

365 
ªsu…
 = 
	`thªad_f‹k
("kmÆlo˘e°4", 
NULL
,

366 
kmÆlo˘e°4thªad
, 
£m
, 
i
);

367 i‡(
ªsu…
) {

368 
	`∑nic
("kmallocstress:Åhread_fork failed: %s\n",

369 
	`°ªº‹
(
ªsu…
));

373 
i
=0; i<
¡hªads
; i++) {

374 
	`P
(
£m
);

377 
	`£m_de°roy
(
£m
);

378 
	`k¥ötf
("Multipage kmallocÅest done\n");

380 
	}
}

	@test/nettest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<ã°.h
>

38 
	$√âe°
(
«rgs
, **
¨gs
)

40 ()
«rgs
;

41 ()
¨gs
;

42 
	`k¥ötf
("NoÇetwork supportávailable\n");

44 
	}
}

	@test/semunit.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<synch.h
>

34 
	~<thªad.h
>

35 
	~<cuºít.h
>

36 
	~<˛ock.h
>

37 
	~<ã°.h
>

56 
	#NAMESTRING
 "some-sûly-«me"

	)

61 
	gwaôîs_ru¬ög
 = 0;

62 
•ölock
 
	gwaôîs_lock
 = 
SPINLOCK_INITIALIZER
;

66 
	$ok
()

68 
	`k¥ötf
("TestÖassed;Çow cleaning up.\n");

69 
	}
}

75 
£m≠h‹e
 *

76 
	$make£m
(
cou¡
)

78 
£m≠h‹e
 *
£m
;

80 
£m
 = 
	`£m_¸óã
(
NAMESTRING
, 
cou¡
);

81 i‡(
£m
 =
NULL
) {

82 
	`∑nic
("semunit: whoops: sem_create failed\n");

84  
£m
;

85 
	}
}

92 
	$waôî
(*
v£m
, 
junk
)

94 
£m≠h‹e
 *
£m
 = 
v£m
;

95 ()
junk
;

97 
	`P
(
£m
);

99 
	`•ölock_acquúe
(&
waôîs_lock
);

100 
	`KASSERT
(
waôîs_ru¬ög
 > 0);

101 
waôîs_ru¬ög
--;

102 
	`•ölock_ªÀa£
(&
waôîs_lock
);

103 
	}
}

110 
	$makewaôî
(
£m≠h‹e
 *
£m
)

112 
ªsu…
;

114 
	`•ölock_acquúe
(&
waôîs_lock
);

115 
waôîs_ru¬ög
++;

116 
	`•ölock_ªÀa£
(&
waôîs_lock
);

118 
ªsu…
 = 
	`thªad_f‹k
("£munô waôî", 
NULL
, 
waôî
, 
£m
, 0);

119 i‡(
ªsu…
) {

120 
	`∑nic
("semunit:Åhread_fork failed\n");

122 
	`k¥ötf
("Sleeping for waiterÅoÑun\n");

123 
	`˛ock¶ìp
(1);

124 
	}
}

137 
boﬁ


138 
	$•ölock_nŸ_hñd
(
•ölock
 *
•lk
)

140  
•lk
->
•lk_hﬁdî
 =
NULL
;

141 
	}
}

155 
	$£mu1
(
«rgs
, **
¨gs
)

157 
£m≠h‹e
 *
£m
;

158 c⁄° *
«me
 = 
NAMESTRING
;

160 ()
«rgs
; ()
¨gs
;

162 
£m
 = 
	`£m_¸óã
(
«me
, 56);

163 i‡(
£m
 =
NULL
) {

164 
	`∑nic
("semu1: whoops: sem_create failed\n");

166 
	`KASSERT
(!
	`°rcmp
(
£m
->
£m_«me
, 
«me
));

167 
	`KASSERT
(
£m
->
£m_«me
 !
«me
);

168 
	`KASSERT
(
£m
->
£m_wch™
 !
NULL
);

169 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

170 
	`KASSERT
(
£m
->
£m_cou¡
 == 56);

172 
	`ok
();

174 
	`£m_de°roy
(
£m
);

176 
	}
}

182 
	$£mu2
(
«rgs
, **
¨gs
)

184 
£m≠h‹e
 *
£m
;

186 ()
«rgs
; ()
¨gs
;

188 
	`k¥ötf
("This should crash withá kernelÇull dereference\n");

189 
£m
 = 
	`£m_¸óã
(
NULL
, 44);

190 ()
£m
;

191 
	`∑nic
("semu2: sem_createácceptedáÇullÇame\n");

193 
	}
}

199 
	$£mu3
(
«rgs
, **
¨gs
)

201 ()
«rgs
; ()
¨gs
;

203 
	`k¥ötf
("This shouldássertÅhat sem != NULL\n");

204 
	`£m_de°roy
(
NULL
);

205 
	`∑nic
("semu3: sem_destroyácceptedáÇull semaphore\n");

206 
	}
}

213 
	$£mu4
(
«rgs
, **
¨gs
)

215 
£m≠h‹e
 *
£m
;

217 ()
«rgs
; ()
¨gs
;

220 
£m
 = 
	`make£m
(0);

222 
£m
->
£m_cou¡
--;

224 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

227 
	`ok
();

228 
	`£m_de°roy
(
£m
);

230 
	}
}

237 
	$£mu5
(
«rgs
, **
¨gs
)

239 
£m≠h‹e
 *
£m
;

241 ()
«rgs
; ()
¨gs
;

243 
£m
 = 
	`£m_¸óã
(
NAMESTRING
, 0xf0000000U);

244 i‡(
£m
 =
NULL
) {

246 
	`∑nic
("semu5: sem_create failed\n");

248 
	`KASSERT
(
£m
->
£m_cou¡
 == 0xf0000000U);

251 
	`ok
();

252 
	`£m_de°roy
(
£m
);

254 
	}
}

261 
	$£mu6
(
«rgs
, **
¨gs
)

263 
£m≠h‹e
 *
£m
;

265 ()
«rgs
; ()
¨gs
;

267 
£m
 = 
	`make£m
(0);

268 
	`makewaôî
(
£m
);

269 
	`k¥ötf
("This shouldássertÅhatÅhe wchan'sÅhreadlist isÉmpty\n");

270 
	`£m_de°roy
(
£m
);

271 
	`∑nic
("semu6: wchan_destroy with waiters succeeded\n");

273 
	}
}

280 
	$£mu7
(
«rgs
, **
¨gs
)

282 
£m≠h‹e
 *
£m
;

283 
•ölock
 
lk
;

285 ()
«rgs
; ()
¨gs
;

287 
£m
 = 
	`make£m
(0);

293 
	`•ölock_öô
(&
lk
);

294 
	`•ölock_acquúe
(&
lk
);

297 
	`V
(
£m
);

298 
	`V
(
£m
);

299 
	`V
(
£m
);

302 
	`ok
();

303 
	`•ölock_ªÀa£
(&
lk
);

304 
	`•ölock_˛ónup
(&
lk
);

305 
	`£m_de°roy
(
£m
);

307 
	}
}

320 
	$do_£mu89
(
boﬁ
 
öãºu±h™dÀr
)

322 
£m≠h‹e
 *
£m
;

323 
wch™
 *wchan;

324 c⁄° *
«me
;

326 
£m
 = 
	`make£m
(0);

329 
«me
 = 
£m
->
£m_«me
;

330 
wch™
 = 
£m
->
£m_wch™
;

331 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

332 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

342 i‡(
öãºu±h™dÀr
) {

343 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

344 
cuπhªad
->
t_ö_öãºu±
 = 
åue
;

347 
	`V
(
£m
);

349 i‡(
öãºu±h™dÀr
) {

350 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
åue
);

351 
cuπhªad
->
t_ö_öãºu±
 = 
Ál£
;

355 
	`KASSERT
(
«me
 =
£m
->
£m_«me
);

356 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

357 
	`KASSERT
(
wch™
 =
£m
->
£m_wch™
);

358 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

359 
	`KASSERT
(
£m
->
£m_cou¡
 == 1);

362 
	`ok
();

363 
	`£m_de°roy
(
£m
);

364 
	}
}

367 
	$£mu8
(
«rgs
, **
¨gs
)

369 ()
«rgs
; ()
¨gs
;

371 
	`do_£mu89
(
Ál£
 );

373 
	}
}

376 
	$£mu9
(
«rgs
, **
¨gs
)

378 ()
«rgs
; ()
¨gs
;

380 
	`do_£mu89
(
åue
 );

382 
	}
}

397 
	$do_£mu1011
(
boﬁ
 
öãºu±h™dÀr
)

399 
£m≠h‹e
 *
£m
;

400 
wch™
 *wchan;

401 c⁄° *
«me
;

403 
£m
 = 
	`make£m
(0);

404 
	`makewaôî
(
£m
);

407 
«me
 = 
£m
->
£m_«me
;

408 
wch™
 = 
£m
->
£m_wch™
;

409 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

410 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

411 
	`•ölock_acquúe
(&
waôîs_lock
);

412 
	`KASSERT
(
waôîs_ru¬ög
 == 1);

413 
	`•ölock_ªÀa£
(&
waôîs_lock
);

416 i‡(
öãºu±h™dÀr
) {

417 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

418 
cuπhªad
->
t_ö_öãºu±
 = 
åue
;

421 
	`V
(
£m
);

423 i‡(
öãºu±h™dÀr
) {

424 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
åue
);

425 
cuπhªad
->
t_ö_öãºu±
 = 
Ál£
;

429 
	`˛ock¶ìp
(1);

432 
	`KASSERT
(
«me
 =
£m
->
£m_«me
);

433 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

434 
	`KASSERT
(
wch™
 =
£m
->
£m_wch™
);

435 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

436 
	`KASSERT
(
£m
->
£m_cou¡
 == 0);

437 
	`•ölock_acquúe
(&
waôîs_lock
);

438 
	`KASSERT
(
waôîs_ru¬ög
 == 0);

439 
	`•ölock_ªÀa£
(&
waôîs_lock
);

442 
	`ok
();

443 
	`£m_de°roy
(
£m
);

446 
	}
}

449 
	$£mu10
(
«rgs
, **
¨gs
)

451 ()
«rgs
; ()
¨gs
;

453 
	`do_£mu1011
(
Ál£
 );

455 
	}
}

458 
	$£mu11
(
«rgs
, **
¨gs
)

460 ()
«rgs
; ()
¨gs
;

462 
	`do_£mu1011
(
åue
 );

464 
	}
}

479 
	$£mu1213
(
boﬁ
 
öãºu±h™dÀr
)

481 
£m≠h‹e
 *
£m
;

482 
wch™
 *wchan;

483 c⁄° *
«me
;

485 
£m
 = 
	`make£m
(0);

486 
	`makewaôî
(
£m
);

487 
	`makewaôî
(
£m
);

490 
«me
 = 
£m
->
£m_«me
;

491 
wch™
 = 
£m
->
£m_wch™
;

492 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

493 
wch™
 = 
£m
->
£m_wch™
;

494 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

495 
	`•ölock_acquúe
(&
waôîs_lock
);

496 
	`KASSERT
(
waôîs_ru¬ög
 == 2);

497 
	`•ölock_ªÀa£
(&
waôîs_lock
);

500 i‡(
öãºu±h™dÀr
) {

501 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

502 
cuπhªad
->
t_ö_öãºu±
 = 
åue
;

505 
	`V
(
£m
);

507 i‡(
öãºu±h™dÀr
) {

508 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
åue
);

509 
cuπhªad
->
t_ö_öãºu±
 = 
Ál£
;

513 
	`˛ock¶ìp
(1);

516 
	`KASSERT
(
«me
 =
£m
->
£m_«me
);

517 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

518 
	`KASSERT
(
wch™
 =
£m
->
£m_wch™
);

519 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

520 
	`KASSERT
(
£m
->
£m_cou¡
 == 0);

521 
	`•ölock_acquúe
(&
waôîs_lock
);

522 
	`KASSERT
(
waôîs_ru¬ög
 == 1);

523 
	`•ölock_ªÀa£
(&
waôîs_lock
);

526 
	`ok
();

527 
	`V
(
£m
);

528 
	`˛ock¶ìp
(1);

529 
	`•ölock_acquúe
(&
waôîs_lock
);

530 
	`KASSERT
(
waôîs_ru¬ög
 == 0);

531 
	`•ölock_ªÀa£
(&
waôîs_lock
);

532 
	`£m_de°roy
(
£m
);

533 
	}
}

536 
	$£mu12
(
«rgs
, **
¨gs
)

538 ()
«rgs
; ()
¨gs
;

540 
	`£mu1213
(
Ál£
 );

542 
	}
}

545 
	$£mu13
(
«rgs
, **
¨gs
)

547 ()
«rgs
; ()
¨gs
;

549 
	`£mu1213
(
åue
 );

551 
	}
}

558 
	$£mu14
(
«rgs
, **
¨gs
)

560 
£m≠h‹e
 *
£m
;

562 ()
«rgs
; ()
¨gs
;

564 
	`k¥ötf
("This shouldássertÅhat sem_count is > 0.\n");

565 
£m
 = 
	`make£m
(0);

571 
£m
->
£m_cou¡
--;

572 
	`V
(
£m
);

573 
	`KASSERT
(
£m
->
£m_cou¡
 == 0);

574 
	`∑nic
("semu14: VÅolerated count wraparound\n");

576 
	}
}

582 
	$£mu15
(
«rgs
, **
¨gs
)

584 ()
«rgs
; ()
¨gs
;

586 
	`k¥ötf
("This shouldássertÅhatÅhe semaphore isn'tÇull.\n");

587 
	`V
(
NULL
);

588 
	`∑nic
("semu15: VÅoleratedÇull semaphore\n");

590 
	}
}

596 
	$£mu16
(
«rgs
, **
¨gs
)

598 
£m≠h‹e
 *
£m
;

599 
•ölock
 
lk
;

601 ()
«rgs
; ()
¨gs
;

603 
£m
 = 
	`make£m
(1);

606 
	`•ölock_öô
(&
lk
);

607 
	`•ölock_acquúe
(&
lk
);

609 
	`P
(
£m
);

611 
	`ok
();

612 
	`•ölock_ªÀa£
(&
lk
);

613 
	`•ölock_˛ónup
(&
lk
);

614 
	`£m_de°roy
(
£m
);

616 
	}
}

622 
thªad
 *
	g£mu17_thªad
;

626 
	$£mu17_sub
(*
£mv
, 
junk
)

628 
£m≠h‹e
 *
£m
 = 
£mv
;

630 ()
junk
;

632 
£mu17_thªad
 = 
cuπhªad
;

635 
	`KASSERT
(
£m
->
£m_cou¡
 == 0);

637 
	`P
(
£m
);

638 
	}
}

641 
	$£mu17
(
«rgs
, **
¨gs
)

643 
£m≠h‹e
 *
£m
;

644 
ªsu…
;

646 ()
«rgs
; ()
¨gs
;

648 
£mu17_thªad
 = 
NULL
;

650 
£m
 = 
	`make£m
(0);

651 
ªsu…
 = 
	`thªad_f‹k
("£mu17_sub", 
NULL
, 
£mu17_sub
, 
£m
, 0);

652 i‡(
ªsu…
) {

653 
	`∑nic
("semu17: whoops:Åhread_fork failed\n");

655 
	`k¥ötf
("Waiting for subthread...\n");

656 
	`˛ock¶ìp
(1);

659 
	`KASSERT
(
£mu17_thªad
 !
NULL
);

660 
	`KASSERT
(
£mu17_thªad
->
t_°©e
 =
S_SLEEP
);

663 
	`ok
();

664 
	`V
(
£m
);

665 
	`˛ock¶ìp
(1);

666 
	`£m_de°roy
(
£m
);

667 
£mu17_thªad
 = 
NULL
;

669 
	}
}

679 
	$£mu18
(
«rgs
, **
¨gs
)

681 
£m≠h‹e
 *
£m
;

682 
wch™
 *wchan;

683 c⁄° *
«me
;

685 ()
«rgs
; ()
¨gs
;

687 
£m
 = 
	`make£m
(1);

690 
«me
 = 
£m
->
£m_«me
;

691 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

692 
wch™
 = 
£m
->
£m_wch™
;

693 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

694 
	`KASSERT
(
£m
->
£m_cou¡
 == 1);

696 
	`P
(
£m
);

699 
	`KASSERT
(
«me
 =
£m
->
£m_«me
);

700 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

701 
	`KASSERT
(
wch™
 =
£m
->
£m_wch™
);

702 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

703 
	`KASSERT
(
£m
->
£m_cou¡
 == 0);

706 
	}
}

719 
	$£mu19_sub
(*
£mv
, 
junk
)

721 
£m≠h‹e
 *
£m
 = 
£mv
;

723 ()
junk
;

725 
	`k¥ötf
("semu19: waiting forÖarentÅo sleep\n");

726 
	`˛ock¶ìp
(1);

732 
	`V
(
£m
);

733 
	}
}

736 
	$£mu19
(
«rgs
, **
¨gs
)

738 
£m≠h‹e
 *
£m
;

739 
wch™
 *wchan;

740 c⁄° *
«me
;

741 
ªsu…
;

743 ()
«rgs
; ()
¨gs
;

745 
£m
 = 
	`make£m
(0);

746 
ªsu…
 = 
	`thªad_f‹k
("£mu19_sub", 
NULL
, 
£mu19_sub
, 
£m
, 0);

747 i‡(
ªsu…
) {

748 
	`∑nic
("semu19: whoops:Åhread_fork failed\n");

752 
«me
 = 
£m
->
£m_«me
;

753 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

754 
wch™
 = 
£m
->
£m_wch™
;

755 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

756 
	`KASSERT
(
£m
->
£m_cou¡
 == 0);

758 
	`P
(
£m
);

761 
	`KASSERT
(
«me
 =
£m
->
£m_«me
);

762 
	`KASSERT
(!
	`°rcmp
(
«me
, 
NAMESTRING
));

763 
	`KASSERT
(
wch™
 =
£m
->
£m_wch™
);

764 
	`KASSERT
(
	`•ölock_nŸ_hñd
(&
£m
->
£m_lock
));

765 
	`KASSERT
(
£m
->
£m_cou¡
 == 0);

768 
	}
}

775 
	$£mu20
(
«rgs
, **
¨gs
)

777 
£m≠h‹e
 *
£m
;

779 ()
«rgs
; ()
¨gs
;

781 
	`k¥ötf
("This shouldássertÅhat weáren't inán interrupt\n");

783 
£m
 = 
	`make£m
(0);

785 
cuπhªad
->
t_ö_öãºu±
 = 
åue
;

786 
	`P
(
£m
);

787 
	`∑nic
("semu20: PÅolerated being inán interrupt handler\n");

789 
	}
}

792 
	$£mu21
(
«rgs
, **
¨gs
)

794 
£m≠h‹e
 *
£m
;

796 ()
«rgs
; ()
¨gs
;

798 
	`k¥ötf
("This shouldássertÅhat weáren't inán interrupt\n");

800 
£m
 = 
	`make£m
(1);

802 
cuπhªad
->
t_ö_öãºu±
 = 
åue
;

803 
	`P
(
£m
);

804 
	`∑nic
("semu21: PÅolerated being inán interrupt handler\n");

806 
	}
}

812 
	$£mu22
(
«rgs
, **
¨gs
)

814 ()
«rgs
; ()
¨gs
;

816 
	`k¥ötf
("This shouldássertÅhatÅhe semaphore isn'tÇull.\n");

817 
	`P
(
NULL
);

818 
	`∑nic
("semu22: PÅoleratedÇull semaphore\n");

820 
	}
}

	@test/synchtest.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˛ock.h
>

37 
	~<thªad.h
>

38 
	~<synch.h
>

39 
	~<ã°.h
>

41 
	#NSEMLOOPS
 63

	)

42 
	#NLOCKLOOPS
 120

	)

43 
	#NCVLOOPS
 5

	)

44 
	#NTHREADS
 32

	)

46 vﬁ©ûê
	gã°vÆ1
;

47 vﬁ©ûê
	gã°vÆ2
;

48 vﬁ©ûê
	gã°vÆ3
;

49 
£m≠h‹e
 *
	gã°£m
;

50 
lock
 *
	gã°lock
;

51 
cv
 *
	gã°cv
;

52 
£m≠h‹e
 *
	gd⁄e£m
;

56 
	$öôôems
()

58 i‡(
ã°£m
==
NULL
) {

59 
ã°£m
 = 
	`£m_¸óã
("testsem", 2);

60 i‡(
ã°£m
 =
NULL
) {

61 
	`∑nic
("synchtest: sem_create failed\n");

64 i‡(
ã°lock
==
NULL
) {

65 
ã°lock
 = 
	`lock_¸óã
("testlock");

66 i‡(
ã°lock
 =
NULL
) {

67 
	`∑nic
("synchtest:Üock_create failed\n");

70 i‡(
ã°cv
==
NULL
) {

71 
ã°cv
 = 
	`cv_¸óã
("testlock");

72 i‡(
ã°cv
 =
NULL
) {

73 
	`∑nic
("synchtest: cv_create failed\n");

76 i‡(
d⁄e£m
==
NULL
) {

77 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

78 i‡(
d⁄e£m
 =
NULL
) {

79 
	`∑nic
("synchtest: sem_create failed\n");

82 
	}
}

86 
	$£mã°thªad
(*
junk
, 
num
)

88 
i
;

89 ()
junk
;

94 
	`P
(
ã°£m
);

95 
	`k¥ötf
("Thªad %2lu: ", 
num
);

96 
i
=0; i<
NSEMLOOPS
; i++) {

97 
	`k¥ötf
("%c", ()
num
+64);

99 
	`k¥ötf
("\n");

100 
	`V
(
d⁄e£m
);

101 
	}
}

104 
	$£mã°
(
«rgs
, **
¨gs
)

106 
i
, 
ªsu…
;

108 ()
«rgs
;

109 ()
¨gs
;

111 
	`öôôems
();

112 
	`k¥ötf
("Starting semaphoreÅest...\n");

113 
	`k¥ötf
("IfÅhis hangs, it's broken: ");

114 
	`P
(
ã°£m
);

115 
	`P
(
ã°£m
);

116 
	`k¥ötf
("ok\n");

118 
i
=0; i<
NTHREADS
; i++) {

119 
ªsu…
 = 
	`thªad_f‹k
("£mã°", 
NULL
, 
£mã°thªad
, NULL, 
i
);

120 i‡(
ªsu…
) {

121 
	`∑nic
("semtest:Åhread_fork failed: %s\n",

122 
	`°ªº‹
(
ªsu…
));

126 
i
=0; i<
NTHREADS
; i++) {

127 
	`V
(
ã°£m
);

128 
	`P
(
d⁄e£m
);

132 
	`V
(
ã°£m
);

133 
	`V
(
ã°£m
);

135 
	`k¥ötf
("SemaphoreÅest done.\n");

137 
	}
}

141 
	$Áû
(
num
, c⁄° *
msg
)

143 
	`k¥ötf
("thªad %lu: Mism©ch o¿%s\n", 
num
, 
msg
);

144 
	`k¥ötf
("Test failed\n");

146 
	`lock_ªÀa£
(
ã°lock
);

148 
	`V
(
d⁄e£m
);

149 
	`thªad_exô
();

150 
	}
}

154 
	$lockã°thªad
(*
junk
, 
num
)

156 
i
;

157 ()
junk
;

159 
i
=0; i<
NLOCKLOOPS
; i++) {

160 
	`lock_acquúe
(
ã°lock
);

161 
ã°vÆ1
 = 
num
;

162 
ã°vÆ2
 = 
num
*num;

163 
ã°vÆ3
 = 
num
%3;

165 i‡(
ã°vÆ2
 !
ã°vÆ1
*testval1) {

166 
	`Áû
(
num
, "testval2/testval1");

169 i‡(
ã°vÆ2
%3 !(
ã°vÆ3
*testval3)%3) {

170 
	`Áû
(
num
, "testval2/testval3");

173 i‡(
ã°vÆ3
 !
ã°vÆ1
%3) {

174 
	`Áû
(
num
, "testval3/testval1");

177 i‡(
ã°vÆ1
 !
num
) {

178 
	`Áû
(
num
, "testval1/num");

181 i‡(
ã°vÆ2
 !
num
*num) {

182 
	`Áû
(
num
, "testval2/num");

185 i‡(
ã°vÆ3
 !
num
%3) {

186 
	`Áû
(
num
, "testval3/num");

189 
	`lock_ªÀa£
(
ã°lock
);

191 
	`V
(
d⁄e£m
);

192 
	}
}

196 
	$lockã°
(
«rgs
, **
¨gs
)

198 
i
, 
ªsu…
;

200 ()
«rgs
;

201 ()
¨gs
;

203 
	`öôôems
();

204 
	`k¥ötf
("StartingÜockÅest.........\n");

206 
i
=0; i<
NTHREADS
; i++) {

207 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
lockã°thªad
,

208 
NULL
, 
i
);

209 i‡(
ªsu…
) {

210 
	`∑nic
("locktest:Åhread_fork failed: %s\n",

211 
	`°ªº‹
(
ªsu…
));

214 
i
=0; i<
NTHREADS
; i++) {

215 
	`P
(
d⁄e£m
);

218 
	`k¥ötf
("LockÅest doneeeee.\n");

221 
	}
}

225 
	$cvã°thªad
(*
junk
, 
num
)

227 
i
;

228 vﬁ©ûê
j
;

229 
time•ec
 
ts1
, 
ts2
;

231 ()
junk
;

233 
i
=0; i<
NCVLOOPS
; i++) {

234 
	`lock_acquúe
(
ã°lock
);

235 
ã°vÆ1
 !
num
) {

236 
	`gëtime
(&
ts1
);

237 
	`cv_waô
(
ã°cv
, 
ã°lock
);

238 
	`gëtime
(&
ts2
);

241 
	`time•ec_sub
(&
ts2
, &
ts1
, &ts2);

244 i‡(
ts2
.
tv_£c
 =0 &&Ås2.
tv_n£c
 < 40*2000) {

245 
	`k¥ötf
("cv_waitÅook only %uÇs\n",

246 
ts2
.
tv_n£c
);

247 
	`k¥ötf
("That'sÅoo fast... you must be "

249 
	`V
(
d⁄e£m
);

250 
	`thªad_exô
();

254 
	`k¥ötf
("Thªad %lu\n", 
num
);

255 
ã°vÆ1
 = (ã°vÆ1 + 
NTHREADS
 - 1)%NTHREADS;

261 
j
=0; j<3000; j++);

263 
	`cv_brﬂdˇ°
(
ã°cv
, 
ã°lock
);

264 
	`lock_ªÀa£
(
ã°lock
);

266 
	`V
(
d⁄e£m
);

267 
	}
}

270 
	$cvã°
(
«rgs
, **
¨gs
)

273 
i
, 
ªsu…
;

275 ()
«rgs
;

276 ()
¨gs
;

278 
	`öôôems
();

279 
	`k¥ötf
("Starting CVÅest...\n");

280 
	`k¥ötf
("Threads shouldÖrint out inÑeverse order.\n");

282 
ã°vÆ1
 = 
NTHREADS
-1;

284 
i
=0; i<
NTHREADS
; i++) {

285 
ªsu…
 = 
	`thªad_f‹k
("synchã°", 
NULL
, 
cvã°thªad
, NULL, 
i
);

286 i‡(
ªsu…
) {

287 
	`∑nic
("cvtest:Åhread_fork failed: %s\n",

288 
	`°ªº‹
(
ªsu…
));

291 
i
=0; i<
NTHREADS
; i++) {

292 
	`P
(
d⁄e£m
);

295 
	`k¥ötf
("CVÅest done\n");

298 
	}
}

310 
	#NCVS
 250

	)

311 
	#NLOOPS
 40

	)

312 
cv
 *
	gã°cvs
[
NCVS
];

313 
lock
 *
	gã°locks
[
NCVS
];

314 
£m≠h‹e
 *
	gg©e£m
;

315 
£m≠h‹e
 *
	gexô£m
;

319 
	$¶ì±hªad
(*
junk1
, 
junk2
)

321 
i
, 
j
;

323 ()
junk1
;

324 ()
junk2
;

326 
j
=0; j<
NLOOPS
; j++) {

327 
i
=0; i<
NCVS
; i++) {

328 
	`lock_acquúe
(
ã°locks
[
i
]);

329 
	`V
(
g©e£m
);

330 
	`cv_waô
(
ã°cvs
[
i
], 
ã°locks
[i]);

331 
	`lock_ªÀa£
(
ã°locks
[
i
]);

333 
	`k¥ötf
("¶ì±hªad: %u\n", 
j
);

335 
	`V
(
exô£m
);

336 
	}
}

340 
	$wakëhªad
(*
junk1
, 
junk2
)

342 
i
, 
j
;

344 ()
junk1
;

345 ()
junk2
;

347 
j
=0; j<
NLOOPS
; j++) {

348 
i
=0; i<
NCVS
; i++) {

349 
	`P
(
g©e£m
);

350 
	`lock_acquúe
(
ã°locks
[
i
]);

351 
	`cv_sig«l
(
ã°cvs
[
i
], 
ã°locks
[i]);

352 
	`lock_ªÀa£
(
ã°locks
[
i
]);

354 
	`k¥ötf
("wakëhªad: %u\n", 
j
);

356 
	`V
(
exô£m
);

357 
	}
}

360 
	$cvã°2
(
«rgs
, **
¨gs
)

362 
i
;

363 
ªsu…
;

365 ()
«rgs
;

366 ()
¨gs
;

368 
i
=0; i<
NCVS
; i++) {

369 
ã°locks
[
i
] = 
	`lock_¸óã
("cvtest2Üock");

370 
ã°cvs
[
i
] = 
	`cv_¸óã
("cvtest2 cv");

372 
g©e£m
 = 
	`£m_¸óã
("gatesem", 0);

373 
exô£m
 = 
	`£m_¸óã
("exitsem", 0);

375 
	`k¥ötf
("cvtest2...\n");

377 
ªsu…
 = 
	`thªad_f‹k
("cvã°2", 
NULL
, 
¶ì±hªad
, NULL, 0);

378 i‡(
ªsu…
) {

379 
	`∑nic
("cvtest2:Åhread_fork failed\n");

381 
ªsu…
 = 
	`thªad_f‹k
("cvã°2", 
NULL
, 
wakëhªad
, NULL, 0);

382 i‡(
ªsu…
) {

383 
	`∑nic
("cvtest2:Åhread_fork failed\n");

386 
	`P
(
exô£m
);

387 
	`P
(
exô£m
);

389 
	`£m_de°roy
(
exô£m
);

390 
	`£m_de°roy
(
g©e£m
);

391 
exô£m
 = 
g©e£m
 = 
NULL
;

392 
i
=0; i<
NCVS
; i++) {

393 
	`lock_de°roy
(
ã°locks
[
i
]);

394 
	`cv_de°roy
(
ã°cvs
[
i
]);

395 
ã°locks
[
i
] = 
NULL
;

396 
ã°cvs
[
i
] = 
NULL
;

399 
	`k¥ötf
("cvtest2 done\n");

401 
	}
}

	@test/threadlisttest.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<thªad.h
>

33 
	~<thªadli°.h
>

34 
	~<ã°.h
>

36 
	#NUMNAMES
 7

	)

37 c⁄° *c⁄° 
	g«mes
[
NUMNAMES
] = {

47 
thªad
 *
	gÁkëhªads
[
NUMNAMES
];

52 
	#FAKE_MAGIC
 ((*)0xbØbØ)

	)

58 
thªad
 *

59 
	$Ákëhªad_¸óã
(c⁄° *
«me
)

61 
thªad
 *
t
;

63 
t
 = 
	`kmÆloc
((*t));

64 i‡(
t
 =
NULL
) {

65 
	`∑nic
("threadlisttest: Out of memory\n");

68 
	`bzîo
(
t
, (*t));

69 
t
->
t_«me
 = 
	`k°rdup
(
«me
);

70 i‡(
t
->
t_«me
 =
NULL
) {

71 
	`∑nic
("threadlisttest: Out of memory\n");

73 
t
->
t_°ack
 = 
FAKE_MAGIC
;

74 
	`thªadli°node_öô
(&
t
->
t_li°node
,Å);

75  
t
;

76 
	}
}

83 
	$Ákëhªad_de°roy
(
thªad
 *
t
)

85 
	`KASSERT
(
t
->
t_°ack
 =
FAKE_MAGIC
);

86 
	`thªadli°node_˛ónup
(&
t
->
t_li°node
);

87 
	`k‰ì
(
t
->
t_«me
);

88 
	`k‰ì
(
t
);

89 
	}
}

96 
	$check_‹dî
(
thªadli°
 *
é
, 
boﬁ
 
ªv
)

98 c⁄° 
°rög0
[] = "...";

99 c⁄° 
°rögN
[] = "~~~";

101 
thªad
 *
t
;

102 c⁄° *
fú°
 = 
ªv
 ? 
°rögN
 : 
°rög0
;

103 c⁄° *
œ°
 = 
ªv
 ? 
°rög0
 : 
°rögN
;

104 c⁄° *
¥ev
;

105 
cmp
;

107 
¥ev
 = 
fú°
;

108 
	`THREADLIST_FORALL
(
t
, *
é
) {

109 
cmp
 = 
	`°rcmp
(
¥ev
, 
t
->
t_«me
);

110 
	`KASSERT
(
ªv
 ? (
cmp
 > 0) : (cmp < 0));

111 
¥ev
 = 
t
->
t_«me
;

113 
cmp
 = 
	`°rcmp
(
¥ev
, 
œ°
);

114 
	`KASSERT
(
ªv
 ? (
cmp
 > 0) : (cmp < 0));

115 
	}
}

122 
	$thªadli°ã°_a
()

124 
thªadli°
 
é
;

126 
	`thªadli°_öô
(&
é
);

127 
	`KASSERT
(
	`thªadli°_i£m±y
(&
é
));

128 
	`thªadli°_˛ónup
(&
é
);

129 
	}
}

133 
	$thªadli°ã°_b
()

135 
thªadli°
 
é
;

136 
thªad
 *
t
;

138 
	`thªadli°_öô
(&
é
);

140 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

141 
	`check_‹dî
(&
é
, 
Ál£
);

142 
	`check_‹dî
(&
é
, 
åue
);

143 
	`KASSERT
(
é
.
é_cou¡
 == 1);

144 
t
 = 
	`thªadli°_ªmhód
(&
é
);

145 
	`KASSERT
(
é
.
é_cou¡
 == 0);

146 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

148 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[0]);

149 
	`check_‹dî
(&
é
, 
Ál£
);

150 
	`check_‹dî
(&
é
, 
åue
);

151 
	`KASSERT
(
é
.
é_cou¡
 == 1);

152 
t
 = 
	`thªadli°_ªmèû
(&
é
);

153 
	`KASSERT
(
é
.
é_cou¡
 == 0);

154 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

156 
	`thªadli°_˛ónup
(&
é
);

157 
	}
}

161 
	$thªadli°ã°_c
()

163 
thªadli°
 
é
;

164 
thªad
 *
t
;

166 
	`thªadli°_öô
(&
é
);

168 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

169 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[1]);

170 
	`KASSERT
(
é
.
é_cou¡
 == 2);

172 
	`check_‹dî
(&
é
, 
åue
);

174 
t
 = 
	`thªadli°_ªmhód
(&
é
);

175 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

176 
t
 = 
	`thªadli°_ªmhód
(&
é
);

177 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

178 
	`KASSERT
(
é
.
é_cou¡
 == 0);

180 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[0]);

181 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[1]);

182 
	`KASSERT
(
é
.
é_cou¡
 == 2);

184 
	`check_‹dî
(&
é
, 
Ál£
);

186 
t
 = 
	`thªadli°_ªmèû
(&
é
);

187 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

188 
t
 = 
	`thªadli°_ªmèû
(&
é
);

189 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

190 
	`KASSERT
(
é
.
é_cou¡
 == 0);

192 
	`thªadli°_˛ónup
(&
é
);

193 
	}
}

197 
	$thªadli°ã°_d
()

199 
thªadli°
 
é
;

200 
thªad
 *
t
;

202 
	`thªadli°_öô
(&
é
);

204 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

205 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[1]);

206 
	`KASSERT
(
é
.
é_cou¡
 == 2);

208 
	`check_‹dî
(&
é
, 
Ál£
);

210 
t
 = 
	`thªadli°_ªmhód
(&
é
);

211 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

212 
t
 = 
	`thªadli°_ªmèû
(&
é
);

213 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

214 
	`KASSERT
(
é
.
é_cou¡
 == 0);

216 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[0]);

217 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[1]);

218 
	`KASSERT
(
é
.
é_cou¡
 == 2);

220 
	`check_‹dî
(&
é
, 
Ál£
);

222 
t
 = 
	`thªadli°_ªmèû
(&
é
);

223 
	`KASSERT
(
t
 =
Ákëhªads
[1]);

224 
t
 = 
	`thªadli°_ªmèû
(&
é
);

225 
	`KASSERT
(
t
 =
Ákëhªads
[0]);

226 
	`KASSERT
(
é
.
é_cou¡
 == 0);

228 
	`thªadli°_˛ónup
(&
é
);

229 
	}
}

233 
	$thªadli°ã°_e
()

235 
thªadli°
 
é
;

236 
thªad
 *
t
;

237 
i
;

239 
	`thªadli°_öô
(&
é
);

241 
	`thªadli°_addhód
(&
é
, 
Ákëhªads
[1]);

242 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[3]);

243 
	`KASSERT
(
é
.
é_cou¡
 == 2);

244 
	`check_‹dî
(&
é
, 
Ál£
);

246 
	`thªadli°_ö£πa·î
(&
é
, 
Ákëhªads
[3], fakethreads[4]);

247 
	`KASSERT
(
é
.
é_cou¡
 == 3);

248 
	`check_‹dî
(&
é
, 
Ál£
);

250 
	`thªadli°_ö£πbef‹e
(&
é
, 
Ákëhªads
[0], fakethreads[1]);

251 
	`KASSERT
(
é
.
é_cou¡
 == 4);

252 
	`check_‹dî
(&
é
, 
Ál£
);

254 
	`thªadli°_ö£πa·î
(&
é
, 
Ákëhªads
[1], fakethreads[2]);

255 
	`KASSERT
(
é
.
é_cou¡
 == 5);

256 
	`check_‹dî
(&
é
, 
Ál£
);

258 
	`KASSERT
(
Ákëhªads
[4]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

259 
Ákëhªads
[3]);

260 
	`KASSERT
(
Ákëhªads
[3]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

261 
Ákëhªads
[2]);

262 
	`KASSERT
(
Ákëhªads
[2]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

263 
Ákëhªads
[1]);

264 
	`KASSERT
(
Ákëhªads
[1]->
t_li°node
.
én_¥ev
->
én_£lf
 ==

265 
Ákëhªads
[0]);

267 
i
=0; i<5; i++) {

268 
t
 = 
	`thªadli°_ªmhód
(&
é
);

269 
	`KASSERT
(
t
 =
Ákëhªads
[
i
]);

271 
	`KASSERT
(
é
.
é_cou¡
 == 0);

273 
	`thªadli°_˛ónup
(&
é
);

274 
	}
}

278 
	$thªadli°ã°_f
()

280 
thªadli°
 
é
;

281 
thªad
 *
t
;

282 
i
;

284 
	`thªadli°_öô
(&
é
);

286 
i
=0; i<
NUMNAMES
; i++) {

287 
	`thªadli°_addèû
(&
é
, 
Ákëhªads
[
i
]);

289 
	`KASSERT
(
é
.
é_cou¡
 =
NUMNAMES
);

291 
i
=0;

292 
	`THREADLIST_FORALL
(
t
, 
é
) {

293 
	`KASSERT
(
t
 =
Ákëhªads
[
i
]);

294 
i
++;

296 
	`KASSERT
(
i
 =
NUMNAMES
);

298 
i
=0;

299 
	`THREADLIST_FORALL_REV
(
t
, 
é
) {

300 
	`KASSERT
(
t
 =
Ákëhªads
[
NUMNAMES
 - 
i
 - 1]);

301 
i
++;

303 
	`KASSERT
(
i
 =
NUMNAMES
);

305 
i
=0; i<
NUMNAMES
; i++) {

306 
t
 = 
	`thªadli°_ªmhód
(&
é
);

307 
	`KASSERT
(
t
 =
Ákëhªads
[
i
]);

309 
	`KASSERT
(
é
.
é_cou¡
 == 0);

310 
	}
}

316 
	$thªadli°ã°
(
«rgs
, **
¨gs
)

318 
i
;

320 ()
«rgs
;

321 ()
¨gs
;

323 
	`k¥ötf
("TestingÅhreadlists...\n");

325 
i
=0; i<
NUMNAMES
; i++) {

326 
Ákëhªads
[
i
] = 
	`Ákëhªad_¸óã
(
«mes
[i]);

329 
	`thªadli°ã°_a
();

330 
	`thªadli°ã°_b
();

331 
	`thªadli°ã°_c
();

332 
	`thªadli°ã°_d
();

333 
	`thªadli°ã°_e
();

334 
	`thªadli°ã°_f
();

336 
i
=0; i<
NUMNAMES
; i++) {

337 
	`Ákëhªad_de°roy
(
Ákëhªads
[
i
]);

338 
Ákëhªads
[
i
] = 
NULL
;

341 
	`k¥ötf
("Done.\n");

343 
	}
}

	@test/threadtest.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<thªad.h
>

36 
	~<synch.h
>

37 
	~<ã°.h
>

39 
	#NTHREADS
 8

	)

41 
£m≠h‹e
 *
	gt£m
 = 
NULL
;

45 
	$öô_£m
()

47 i‡(
t£m
==
NULL
) {

48 
t£m
 = 
	`£m_¸óã
("tsem", 0);

49 i‡(
t£m
 =
NULL
) {

50 
	`∑nic
("threadtest: sem_create failed\n");

53 
	}
}

57 
	$loudthªad
(*
junk
, 
num
)

59 
ch
 = '0' + 
num
;

60 
i
;

62 ()
junk
;

64 
i
=0; i<120; i++) {

65 
	`putch
(
ch
);

67 
	`V
(
t£m
);

68 
	}
}

82 
	$quõâhªad
(*
junk
, 
num
)

84 
ch
 = '0' + 
num
;

85 vﬁ©ûê
i
;

87 ()
junk
;

89 
	`putch
(
ch
);

90 
i
=0; i<200000; i++);

91 
	`putch
(
ch
);

93 
	`V
(
t£m
);

94 
	}
}

98 
	$ru¡hªads
(
dﬁoud
)

100 
«me
[16];

101 
i
, 
ªsu…
;

103 
i
=0; i<
NTHREADS
; i++) {

104 
	`¢¥ötf
(
«me
, “ame), "thªadã°%d", 
i
);

105 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
,

106 
dﬁoud
 ? 
loudthªad
 : 
quõâhªad
,

107 
NULL
, 
i
);

108 i‡(
ªsu…
) {

109 
	`∑nic
("threadtest:Åhread_fork failed %s)\n",

110 
	`°ªº‹
(
ªsu…
));

114 
i
=0; i<
NTHREADS
; i++) {

115 
	`P
(
t£m
);

117 
	}
}

121 
	$thªadã°
(
«rgs
, **
¨gs
)

123 ()
«rgs
;

124 ()
¨gs
;

126 
	`öô_£m
();

127 
	`k¥ötf
("StartingÅhreadÅest............\n");

128 
	`ru¡hªads
(1);

129 
	`k¥ötf
("\nThreadÅest done.\n");

132 
	}
}

135 
	$thªadã°2
(
«rgs
, **
¨gs
)

137 ()
«rgs
;

138 ()
¨gs
;

140 
	`öô_£m
();

141 
	`k¥ötf
("StartingÅhreadÅest 2...\n");

142 
	`ru¡hªads
(0);

143 
	`k¥ötf
("\nThreadÅest 2 done.\n");

146 
	}
}

	@test/tt3.c

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<wch™.h
>

36 
	~<thªad.h
>

37 
	~<synch.h
>

38 
	~<ã°.h
>

42 
	#DIM
 70

	)

45 
	#SLEEPALOT_PRINTS
 20

	)

46 
	#SLEEPALOT_ITERS
 4

	)

48 
	#WAKER_WAKES
 100

	)

50 
	#COMPUTE_ITERS
 10

	)

53 
	#NWAITCHANS
 12

	)

54 
•ölock
 
	g•ölocks
[
NWAITCHANS
];

55 
wch™
 *
	gwaôch™s
[
NWAITCHANS
];

57 vﬁ©ûê
	gwakîd⁄e
;

58 
£m≠h‹e
 *
	gwakî£m
;

59 
£m≠h‹e
 *
	gd⁄e£m
;

63 
	$£tup
()

65 
tmp
[16];

66 
i
;

68 i‡(
wakî£m
 =
NULL
) {

69 
wakî£m
 = 
	`£m_¸óã
("wakersem", 1);

70 
d⁄e£m
 = 
	`£m_¸óã
("donesem", 0);

71 
i
=0; i<
NWAITCHANS
; i++) {

72 
	`•ölock_öô
(&
•ölocks
[
i
]);

73 
	`¢¥ötf
(
tmp
, —mp), "wc%d", 
i
);

74 
waôch™s
[
i
] = 
	`wch™_¸óã
(
	`k°rdup
(
tmp
));

77 
wakîd⁄e
 = 0;

78 
	}
}

82 
	$¶ì∑lŸ_thªad
(*
junk
, 
num
)

84 
i
, 
j
;

86 ()
junk
;

88 
i
=0; i<
SLEEPALOT_PRINTS
; i++) {

89 
j
=0; j<
SLEEPALOT_ITERS
; j++) {

90 
n
;

91 
•ölock
 *
lk
;

92 
wch™
 *
wc
;

94 
n
 = 
	`øndom
(Ë% 
NWAITCHANS
;

95 
lk
 = &
•ölocks
[
n
];

96 
wc
 = 
waôch™s
[
n
];

97 
	`•ölock_acquúe
(
lk
);

98 
	`wch™_¶ìp
(
wc
, 
lk
);

99 
	`•ölock_ªÀa£
(
lk
);

101 
	`k¥ötf
("[%lu]", 
num
);

103 
	`V
(
d⁄e£m
);

104 
	}
}

108 
	$wakî_thªad
(*
junk1
, 
junk2
)

110 
i
, 
d⁄e
;

112 ()
junk1
;

113 ()
junk2
;

116 
	`P
(
wakî£m
);

117 
d⁄e
 = 
wakîd⁄e
;

118 
	`V
(
wakî£m
);

119 i‡(
d⁄e
) {

123 
i
=0; i<
WAKER_WAKES
; i++) {

124 
n
;

125 
•ölock
 *
lk
;

126 
wch™
 *
wc
;

128 
n
 = 
	`øndom
(Ë% 
NWAITCHANS
;

129 
lk
 = &
•ölocks
[
n
];

130 
wc
 = 
waôch™s
[
n
];

131 
	`•ölock_acquúe
(
lk
);

132 
	`wch™_wakóŒ
(
wc
, 
lk
);

133 
	`•ölock_ªÀa£
(
lk
);

135 
	`thªad_yõld
();

138 
	`V
(
d⁄e£m
);

139 
	}
}

143 
	$make_¶ì∑lŸs
(
howm™y
)

145 
«me
[16];

146 
i
, 
ªsu…
;

148 
i
=0; i<
howm™y
; i++) {

149 
	`¢¥ötf
(
«me
, “ame), "¶ì∑lŸ%d", 
i
);

150 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
¶ì∑lŸ_thªad
, NULL, 
i
);

151 i‡(
ªsu…
) {

152 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

155 
ªsu…
 = 
	`thªad_f‹k
("wakî", 
NULL
, 
wakî_thªad
, NULL, 0);

156 i‡(
ªsu…
) {

157 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

159 
	}
}

163 
	$compuã_thªad
(*
junk1
, 
num
)

165 
	sm©rix
 {

166 
m
[
DIM
][DIM];

168 
m©rix
 *
m1
, *
m2
, *
m3
;

169 
tŸ
;

170 
i
, 
j
, 
k
, 
m
;

171 
uöt32_t
 
ønd
;

173 ()
junk1
;

175 
m1
 = 
	`kmÆloc
((
m©rix
));

176 
	`KASSERT
(
m1
 !
NULL
);

177 
m2
 = 
	`kmÆloc
((
m©rix
));

178 
	`KASSERT
(
m2
 !
NULL
);

179 
m3
 = 
	`kmÆloc
((
m©rix
));

180 
	`KASSERT
(
m3
 !
NULL
);

182 
m
=0; m<
COMPUTE_ITERS
; m++) {

184 
i
=0; i<
DIM
; i++) {

185 
j
=0; j<
DIM
; j++) {

186 
ønd
 = 
	`øndom
();

187 
m1
->
m
[
i
][
j
] = 
ønd
 >> 16;

188 
m2
->
m
[
i
][
j
] = 
ønd
 & 0xffff;

192 
i
=0; i<
DIM
; i++) {

193 
j
=0; j<
DIM
; j++) {

194 
tŸ
 = 0;

195 
k
=0; k<
DIM
; k++) {

196 
tŸ
 +
m1
->
m
[
i
][
k
] * 
m2
->m[k][
j
];

198 
m3
->
m
[
i
][
j
] = 
tŸ
;

202 
tŸ
 = 0;

203 
i
=0; i<
DIM
; i++) {

204 
tŸ
 +
m3
->
m
[
i
][i];

207 
	`k¥ötf
("{%lu: %u}", 
num
, (Ë
tŸ
);

208 
	`thªad_yõld
();

211 
	`k‰ì
(
m1
);

212 
	`k‰ì
(
m2
);

213 
	`k‰ì
(
m3
);

215 
	`V
(
d⁄e£m
);

216 
	}
}

220 
	$make_compuãs
(
howm™y
)

222 
«me
[16];

223 
i
, 
ªsu…
;

225 
i
=0; i<
howm™y
; i++) {

226 
	`¢¥ötf
(
«me
, “ame), "compuã%d", 
i
);

227 
ªsu…
 = 
	`thªad_f‹k
(
«me
, 
NULL
, 
compuã_thªad
, NULL, 
i
);

228 i‡(
ªsu…
) {

229 
	`∑nic
("thªad_f‹k faûed: %s\n", 
	`°ªº‹
(
ªsu…
));

232 
	}
}

236 
	$föish
(
howm™ytŸÆ
)

238 
i
;

239 
i
=0; i<
howm™ytŸÆ
; i++) {

240 
	`P
(
d⁄e£m
);

242 
	`P
(
wakî£m
);

243 
wakîd⁄e
 = 1;

244 
	`V
(
wakî£m
);

245 
	`P
(
d⁄e£m
);

246 
	}
}

250 
	$ru¡e°3
(
n¶ìps
, 
ncompuãs
)

252 
	`£tup
();

253 
	`k¥ötf
("StartingÅhreadÅest 3 (%d [sleepalots], %d {computes}, "

255 
n¶ìps
, 
ncompuãs
);

256 
	`make_¶ì∑lŸs
(
n¶ìps
);

257 
	`make_compuãs
(
ncompuãs
);

258 
	`föish
(
n¶ìps
+
ncompuãs
);

259 
	`k¥ötf
("\nThreadÅest 3 done\n");

260 
	}
}

263 
	$thªadã°3
(
«rgs
, **
¨gs
)

265 i‡(
«rgs
==1) {

266 
	`ru¡e°3
(5, 2);

268 i‡(
«rgs
==3) {

269 
	`ru¡e°3
(
	`©oi
(
¨gs
[1]),átoi(args[2]));

272 
	`k¥ötf
("Usage:Åt3 [sleepthreads computethreads]\n");

276 
	}
}

	@thread/clock.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<˝u.h
>

33 
	~<wch™.h
>

34 
	~<˛ock.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

53 
	#SCHEDULE_HARDCLOCKS
 4

	)

54 
	#MIGRATE_HARDCLOCKS
 16

	)

59 
wch™
 *
	glbﬁt
;

60 
•ölock
 
	glbﬁt_lock
;

66 
	$h¨d˛ock_boŸ°øp
()

68 
	`•ölock_öô
(&
lbﬁt_lock
);

69 
lbﬁt
 = 
	`wch™_¸óã
("lbolt");

70 i‡(
lbﬁt
 =
NULL
) {

71 
	`∑nic
("Couldn't createÜbolt\n");

73 
	}
}

80 
	$timî˛ock
()

83 
	`•ölock_acquúe
(&
lbﬁt_lock
);

84 
	`wch™_wakóŒ
(
lbﬁt
, &
lbﬁt_lock
);

85 
	`•ölock_ªÀa£
(&
lbﬁt_lock
);

86 
	}
}

93 
	$h¨d˛ock
()

99 
cur˝u
->
c_h¨d˛ocks
++;

100 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
MIGRATE_HARDCLOCKS
) == 0) {

101 
	`thªad_c⁄sidî_migøti⁄
();

103 i‡((
cur˝u
->
c_h¨d˛ocks
 % 
SCHEDULE_HARDCLOCKS
) == 0) {

104 
	`scheduÀ
();

106 
	`thªad_yõld
();

107 
	}
}

113 
	$˛ock¶ìp
(
num_£cs
)

115 
	`•ölock_acquúe
(&
lbﬁt_lock
);

116 
num_£cs
 > 0) {

117 
	`wch™_¶ìp
(
lbﬁt
, &
lbﬁt_lock
);

118 
num_£cs
--;

120 
	`•ölock_ªÀa£
(&
lbﬁt_lock
);

121 
	}
}

	@thread/hangman.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<•l.h
>

37 
	~<•ölock.h
>

38 
	~<h™gm™.h
>

40 
•ölock
 
	gh™gm™_lock
 = 
SPINLOCK_INITIALIZER
;

52 
	$h™gm™_check
(c⁄° 
h™gm™_lockabÀ
 *
°¨t
,

53 c⁄° 
h™gm™_a˘‹
 *
èrgë
)

55 c⁄° 
h™gm™_a˘‹
 *
cur
;

57 
cur
 = 
°¨t
->
l_hﬁdög
;

58 
cur
 !
NULL
) {

59 i‡(
cur
 =
èrgë
) {

60 
found
;

62 i‡(
cur
->
a_waôög
 =
NULL
) {

65 
cur
 = cur->
a_waôög
->
l_hﬁdög
;

69 
found
:

78 
	`•lhigh
();

79 
	`•ölock_ªÀa£
(&
h™gm™_lock
);

81 
	`k¥ötf
("hangman: DetectedÜock cycle!\n");

82 
	`k¥ötf
("h™gm™: i¿%†(%p);\n", 
èrgë
->
a_«me
,Åarget);

83 
	`k¥ötf
("h™gm™: waôög f‹ %†(%p), but:\n", 
°¨t
->
l_«me
, start);

84 
	`k¥ötf
("ÜockabÀ %†(%p)\n", 
°¨t
->
l_«me
, start);

85 
cur
 = 
°¨t
->
l_hﬁdög
;

86 
cur
 !
èrgë
) {

87 
	`k¥ötf
(" hñd byá˘‹ %†(%p)\n", 
cur
->
a_«me
, cur);

88 
	`k¥ötf
(" waiting forÜockable %s (%p)\n",

89 
cur
->
a_waôög
->
l_«me
, cur->a_waiting);

90 
cur
 = cur->
a_waôög
->
l_hﬁdög
;

92 
	`k¥ötf
(" hñd byá˘‹ %†(%p)\n", 
cur
->
a_«me
, cur);

93 
	`∑nic
("Deadlock.\n");

94 
	}
}

110 
	$h™gm™_waô
(
h™gm™_a˘‹
 *
a
,

111 
h™gm™_lockabÀ
 *
l
)

113 i‡(
l
 =&
h™gm™_lock
.
•lk_h™gm™
) {

118 
	`•ölock_acquúe
(&
h™gm™_lock
);

120 i‡(
a
->
a_waôög
 !
NULL
) {

121 
	`•ölock_ªÀa£
(&
h™gm™_lock
);

122 
	`∑nic
("hangman_wait:álready waiting for something?\n");

125 
	`h™gm™_check
(
l
, 
a
);

126 
a
->
a_waôög
 = 
l
;

128 
	`•ölock_ªÀa£
(&
h™gm™_lock
);

129 
	}
}

132 
	$h™gm™_acquúe
(
h™gm™_a˘‹
 *
a
,

133 
h™gm™_lockabÀ
 *
l
)

135 i‡(
l
 =&
h™gm™_lock
.
•lk_h™gm™
) {

140 
	`•ölock_acquúe
(&
h™gm™_lock
);

142 i‡(
a
->
a_waôög
 !
l
) {

143 
	`•ölock_ªÀa£
(&
h™gm™_lock
);

144 
	`∑nic
("hangman_acquire:Çot waiting forÜock %s (%p)\n",

145 
l
->
l_«me
,Ü);

147 i‡(
l
->
l_hﬁdög
 !
NULL
) {

148 
	`•ölock_ªÀa£
(&
h™gm™_lock
);

149 
	`∑nic
("hangman_acquire:Üock %s (%p) still held by %s (%p)\n",

150 
l
->
l_«me
,Ü, 
a
->
a_«me
,á);

153 
l
->
l_hﬁdög
 = 
a
;

154 
a
->
a_waôög
 = 
NULL
;

156 
	`•ölock_ªÀa£
(&
h™gm™_lock
);

157 
	}
}

160 
	$h™gm™_ªÀa£
(
h™gm™_a˘‹
 *
a
,

161 
h™gm™_lockabÀ
 *
l
)

163 i‡(
l
 =&
h™gm™_lock
.
•lk_h™gm™
) {

168 
	`•ölock_acquúe
(&
h™gm™_lock
);

170 i‡(
a
->
a_waôög
 !
NULL
) {

171 
	`•ölock_ªÀa£
(&
h™gm™_lock
);

172 
	`∑nic
("hangman_release: waiting for something?\n");

174 i‡(
l
->
l_hﬁdög
 !
a
) {

175 
	`•ölock_ªÀa£
(&
h™gm™_lock
);

176 
	`∑nic
("hangman_release:ÇotÅhe holder\n");

179 
l
->
l_hﬁdög
 = 
NULL
;

181 
	`•ölock_ªÀa£
(&
h™gm™_lock
);

182 
	}
}

	@thread/spinlock.c

31 
	#SPINLOCK_INLINE


	)

32 
	#MEMBAR_INLINE


	)

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<˝u.h
>

37 
	~<•l.h
>

38 
	~<•ölock.h
>

39 
	~<memb¨.h
>

40 
	~<cuºít.h
>

51 
	$•ölock_öô
(
•ölock
 *
•lk
)

53 
	`•ölock_d©a_£t
(&
•lk
->
•lk_lock
, 0);

54 
•lk
->
•lk_hﬁdî
 = 
NULL
;

55 
	`HANGMAN_LOCKABLEINIT
(&
•lk
->
•lk_h™gm™
, "spinlock");

56 
	}
}

62 
	$•ölock_˛ónup
(
•ölock
 *
•lk
)

64 
	`KASSERT
(
•lk
->
•lk_hﬁdî
 =
NULL
);

65 
	`KASSERT
(
	`•ölock_d©a_gë
(&
•lk
->
•lk_lock
) == 0);

66 
	}
}

76 
	$•ölock_acquúe
(
•ölock
 *
•lk
)

78 
˝u
 *
my˝u
;

80 
	`•Ãai£
(
IPL_NONE
, 
IPL_HIGH
);

83 i‡(
	`CURCPU_EXISTS
()) {

84 
my˝u
 = 
cur˝u
->
c_£lf
;

85 i‡(
•lk
->
•lk_hﬁdî
 =
my˝u
) {

86 
	`∑nic
("Dódlock o¿•ölock %p\n", 
•lk
);

88 
my˝u
->
c_•ölocks
++;

90 
	`HANGMAN_WAIT
(&
cur˝u
->
c_h™gm™
, &
•lk
->
•lk_h™gm™
);

93 
my˝u
 = 
NULL
;

107 i‡(
	`•ölock_d©a_gë
(&
•lk
->
•lk_lock
) != 0) {

110 i‡(
	`•ölock_d©a_ã°™d£t
(&
•lk
->
•lk_lock
) != 0) {

116 
	`memb¨_°‹e_™y
();

117 
•lk
->
•lk_hﬁdî
 = 
my˝u
;

119 i‡(
	`CURCPU_EXISTS
()) {

120 
	`HANGMAN_ACQUIRE
(&
cur˝u
->
c_h™gm™
, &
•lk
->
•lk_h™gm™
);

122 
	}
}

128 
	$•ölock_ªÀa£
(
•ölock
 *
•lk
)

131 i‡(
	`CURCPU_EXISTS
()) {

132 
	`KASSERT
(
•lk
->
•lk_hﬁdî
 =
cur˝u
->
c_£lf
);

133 
	`KASSERT
(
cur˝u
->
c_•ölocks
 > 0);

134 
cur˝u
->
c_•ölocks
--;

135 
	`HANGMAN_RELEASE
(&
cur˝u
->
c_h™gm™
, &
•lk
->
•lk_h™gm™
);

138 
•lk
->
•lk_hﬁdî
 = 
NULL
;

139 
	`memb¨_™y_°‹e
();

140 
	`•ölock_d©a_£t
(&
•lk
->
•lk_lock
, 0);

141 
	`•Œowî
(
IPL_HIGH
, 
IPL_NONE
);

142 
	}
}

147 
boﬁ


148 
	$•ölock_do_i_hﬁd
(
•ölock
 *
•lk
)

150 i‡(!
	`CURCPU_EXISTS
()) {

151  
åue
;

155  (
•lk
->
•lk_hﬁdî
 =
cur˝u
->
c_£lf
);

156 
	}
}

	@thread/spl.c

31 
	#SPL_INLINE


	)

33 
	~<ty≥s.h
>

34 
	~<lib.h
>

35 
	~<˝u.h
>

36 
	~<•l.h
>

37 
	~<thªad.h
>

38 
	~<cuºít.h
>

87 
	$•Ãai£
(
ﬁd•l
, 
√w•l
)

89 
thªad
 *
cur
 = 
cuπhªad
;

92 
	`KASSERT
(
ﬁd•l
 =
IPL_NONE
);

93 
	`KASSERT
(
√w•l
 =
IPL_HIGH
);

95 i‡(!
	`CURCPU_EXISTS
()) {

100 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

101 
	`˝u_úqoff
();

103 
cur
->
t_ùlhigh_cou¡
++;

104 
	}
}

107 
	$•Œowî
(
ﬁd•l
, 
√w•l
)

109 
thªad
 *
cur
 = 
cuπhªad
;

112 
	`KASSERT
(
ﬁd•l
 =
IPL_HIGH
);

113 
	`KASSERT
(
√w•l
 =
IPL_NONE
);

115 i‡(!
	`CURCPU_EXISTS
()) {

120 
cur
->
t_ùlhigh_cou¡
--;

121 i‡(
cur
->
t_ùlhigh_cou¡
 == 0) {

122 
	`˝u_úq⁄
();

124 
	}
}

132 
	$•lx
(
•l
)

134 
thªad
 *
cur
 = 
cuπhªad
;

135 
ªt
;

137 i‡(!
	`CURCPU_EXISTS
()) {

139  
•l
;

142 i‡(
cur
->
t_cur•l
 < 
•l
) {

144 
	`•Ãai£
(
cur
->
t_cur•l
, 
•l
);

145 
ªt
 = 
cur
->
t_cur•l
;

146 
cur
->
t_cur•l
 = 
•l
;

148 i‡(
cur
->
t_cur•l
 > 
•l
) {

150 
ªt
 = 
cur
->
t_cur•l
;

151 
cur
->
t_cur•l
 = 
•l
;

152 
	`•Œowî
(
ªt
, 
•l
);

156 
ªt
 = 
•l
;

159  
ªt
;

160 
	}
}

	@thread/synch.c

35 
	~<ty≥s.h
>

36 
	~<lib.h
>

37 
	~<•ölock.h
>

38 
	~<wch™.h
>

39 
	~<thªad.h
>

40 
	~<cuºít.h
>

41 
	~<synch.h
>

46 
£m≠h‹e
 *

47 
	$£m_¸óã
(c⁄° *
«me
, 
öôül_cou¡
)

49 
£m≠h‹e
 *
£m
;

51 
£m
 = 
	`kmÆloc
((*sem));

52 i‡(
£m
 =
NULL
) {

53  
NULL
;

56 
£m
->
£m_«me
 = 
	`k°rdup
(
«me
);

57 i‡(
£m
->
£m_«me
 =
NULL
) {

58 
	`k‰ì
(
£m
);

59  
NULL
;

62 
£m
->
£m_wch™
 = 
	`wch™_¸óã
(£m->
£m_«me
);

63 i‡(
£m
->
£m_wch™
 =
NULL
) {

64 
	`k‰ì
(
£m
->
£m_«me
);

65 
	`k‰ì
(
£m
);

66  
NULL
;

69 
	`•ölock_öô
(&
£m
->
£m_lock
);

70 
£m
->
£m_cou¡
 = 
öôül_cou¡
;

72  
£m
;

73 
	}
}

76 
	$£m_de°roy
(
£m≠h‹e
 *
£m
)

78 
	`KASSERT
(
£m
 !
NULL
);

81 
	`•ölock_˛ónup
(&
£m
->
£m_lock
);

82 
	`wch™_de°roy
(
£m
->
£m_wch™
);

83 
	`k‰ì
(
£m
->
£m_«me
);

84 
	`k‰ì
(
£m
);

85 
	}
}

88 
	$P
(
£m≠h‹e
 *
£m
)

90 
	`KASSERT
(
£m
 !
NULL
);

98 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

101 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

102 
£m
->
£m_cou¡
 == 0) {

115 
	`wch™_¶ìp
(
£m
->
£m_wch™
, &£m->
£m_lock
);

117 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

118 
£m
->
£m_cou¡
--;

119 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

120 
	}
}

123 
	$V
(
£m≠h‹e
 *
£m
)

125 
	`KASSERT
(
£m
 !
NULL
);

127 
	`•ölock_acquúe
(&
£m
->
£m_lock
);

129 
£m
->
£m_cou¡
++;

130 
	`KASSERT
(
£m
->
£m_cou¡
 > 0);

131 
	`wch™_wake⁄e
(
£m
->
£m_wch™
, &£m->
£m_lock
);

133 
	`•ölock_ªÀa£
(&
£m
->
£m_lock
);

134 
	}
}

139 
lock
 *

140 
	$lock_¸óã
(c⁄° *
«me
)

143 
lock
 *lock;

145 
lock
 = 
	`kmÆloc
((*lock));

146 i‡(
lock
 =
NULL
) {

147  
NULL
;

150 
lock
->
lk_«me
 = 
	`k°rdup
(
«me
);

151 i‡(
lock
->
lk_«me
 =
NULL
) {

152 
	`k‰ì
(
lock
);

153  
NULL
;

156 
	`HANGMAN_LOCKABLEINIT
(&
lock
->
lk_h™gm™
,Üock->
lk_«me
);

157 
lock
->
lk_wch™
 = 
	`wch™_¸óã
÷ock->
lk_«me
);

158 i‡(
lock
->
lk_wch™
 =
NULL
) {

159 
	`k‰ì
(
lock
->
lk_«me
);

160 
	`k‰ì
(
lock
);

161  
NULL
;

166 
lock
-> 
busy
 = 0;

167 
lock
-> 
hﬁd
 = 
NULL
;

171  
lock
;

172 
	}
}

175 
	$lock_de°roy
(
lock
 *lock)

177 
	`KASSERT
(
lock
 !
NULL
);

181 
	`k‰ì
(
lock
->
lk_«me
);

182 
	`k‰ì
(
lock
);

183 
	}
}

185 
	$lock_acquúe
(
lock
 *lock)

187 
	`k¥ötf
("RUNNING!");

188 
	`KASSERT
(
lock
 !
NULL
);

189 
	`KASSERT
(
cuπhªad
->
t_ö_öãºu±
 =
Ál£
);

190 
	`•ölock_acquúe
(&
lock
->
lk_lock
);

191 
	`KASSERT
(
	`lock_do_i_hﬁd
(
lock
)==
Ál£
);

198 
lock
->
busy
){

199 
	`HANGMAN_WAIT
(&
cuπhªad
->
t_h™gm™
, &
lock
->
lk_h™gm™
);

200 
	`wch™_¶ìp
(
lock
->
lk_wch™
, &lock->
lk_lock
);

208 
lock
->
hﬁd
 = 
cuπhªad
;

209 
lock
->
busy
 = 1;

210 
	`HANGMAN_ACQUIRE
(&
cuπhªad
->
t_h™gm™
, &
lock
->
lk_h™gm™
);

211 
	`•ölock_ªÀa£
(&
lock
->
lk_lock
);

212 
	}
}

215 
	$lock_ªÀa£
(
lock
 *lock)

222 ()
lock
;

223 
	}
}

225 
boﬁ


226 
	$lock_do_i_hﬁd
(
lock
 *lock)

229 
	`KASSERT
(
lock
!=
NULL
);

230 if(
lock
->
busy
 == 0){

231  
Ál£
;}

232 if(
lock
->
hﬁd
 =
cuπhªad
){

233  
åue
;}

234  
Ál£
;

238 
	}
}

245 
cv
 *

246 
	$cv_¸óã
(c⁄° *
«me
)

248 
cv
 *cv;

250 
cv
 = 
	`kmÆloc
((*cv));

251 i‡(
cv
 =
NULL
) {

252  
NULL
;

255 
cv
->
cv_«me
 = 
	`k°rdup
(
«me
);

256 i‡(
cv
->
cv_«me
==
NULL
) {

257 
	`k‰ì
(
cv
);

258  
NULL
;

263  
cv
;

264 
	}
}

267 
	$cv_de°roy
(
cv
 *cv)

269 
	`KASSERT
(
cv
 !
NULL
);

273 
	`k‰ì
(
cv
->
cv_«me
);

274 
	`k‰ì
(
cv
);

275 
	}
}

278 
	$cv_waô
(
cv
 *cv, 
lock
 *lock)

281 ()
cv
;

282 ()
lock
;

283 
	}
}

286 
	$cv_sig«l
(
cv
 *cv, 
lock
 *lock)

289 ()
cv
;

290 ()
lock
;

291 
	}
}

294 
	$cv_brﬂdˇ°
(
cv
 *cv, 
lock
 *lock)

297 ()
cv
;

298 ()
lock
;

299 
	}
}

	@thread/thread.c

34 
	#THREADINLINE


	)

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<lib.h
>

39 
	~<¨øy.h
>

40 
	~<˝u.h
>

41 
	~<•l.h
>

42 
	~<•ölock.h
>

43 
	~<wch™.h
>

44 
	~<thªad.h
>

45 
	~<thªadli°.h
>

46 
	~<thªad¥iv©e.h
>

47 
	~<¥oc.h
>

48 
	~<cuºít.h
>

49 
	~<synch.h
>

50 
	~<addr•a˚.h
>

51 
	~<maöbus.h
>

52 
	~<vnode.h
>

56 
	#THREAD_STACK_MAGIC
 0xbØdf00d

	)

59 
	swch™
 {

60 c⁄° *
	mwc_«me
;

61 
thªadli°
 
	mwc_thªads
;

65 
DECLARRAY
(
˝u
, 
__UNUSED
 
ölöe
);

66 
DEFARRAY
(
˝u
, 
__UNUSED
 
ölöe
);

67 
˝u¨øy
 
	gÆl˝us
;

70 
£m≠h‹e
 *
	g˝u_°¨tup_£m
;

81 
	$thªad_check°ack_öô
(
thªad
 *thread)

83 ((
uöt32_t
 *)
thªad
->
t_°ack
)[0] = 
THREAD_STACK_MAGIC
;

84 ((
uöt32_t
 *)
thªad
->
t_°ack
)[1] = 
THREAD_STACK_MAGIC
;

85 ((
uöt32_t
 *)
thªad
->
t_°ack
)[2] = 
THREAD_STACK_MAGIC
;

86 ((
uöt32_t
 *)
thªad
->
t_°ack
)[3] = 
THREAD_STACK_MAGIC
;

87 
	}
}

101 
	$thªad_check°ack
(
thªad
 *thread)

103 i‡(
thªad
->
t_°ack
 !
NULL
) {

104 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[0] =
THREAD_STACK_MAGIC
);

105 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[1] =
THREAD_STACK_MAGIC
);

106 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[2] =
THREAD_STACK_MAGIC
);

107 
	`KASSERT
(((
uöt32_t
*)
thªad
->
t_°ack
)[3] =
THREAD_STACK_MAGIC
);

109 
	}
}

116 
thªad
 *

117 
	$thªad_¸óã
(c⁄° *
«me
)

119 
thªad
 *thread;

121 
	`DEBUGASSERT
(
«me
 !
NULL
);

123 
thªad
 = 
	`kmÆloc
((*thread));

124 i‡(
thªad
 =
NULL
) {

125  
NULL
;

128 
thªad
->
t_«me
 = 
	`k°rdup
(
«me
);

129 i‡(
thªad
->
t_«me
 =
NULL
) {

130 
	`k‰ì
(
thªad
);

131  
NULL
;

133 
thªad
->
t_wch™_«me
 = "NEW";

134 
thªad
->
t_°©e
 = 
S_READY
;

137 
	`thªad_machdï_öô
(&
thªad
->
t_machdï
);

138 
	`thªadli°node_öô
(&
thªad
->
t_li°node
,Åhread);

139 
thªad
->
t_°ack
 = 
NULL
;

140 
thªad
->
t_c⁄ãxt
 = 
NULL
;

141 
thªad
->
t_˝u
 = 
NULL
;

142 
thªad
->
t_¥oc
 = 
NULL
;

143 
	`HANGMAN_ACTORINIT
(&
thªad
->
t_h™gm™
,Åhªad->
t_«me
);

146 
thªad
->
t_ö_öãºu±
 = 
Ál£
;

147 
thªad
->
t_cur•l
 = 
IPL_HIGH
;

148 
thªad
->
t_ùlhigh_cou¡
 = 1;

151 
thªad
->
t_did_ª£rve_buf„rs
 = 
Ál£
;

155  
thªad
;

156 
	}
}

166 
˝u
 *

167 
	$˝u_¸óã
(
h¨dw¨e_numbî
)

169 
˝u
 *
c
;

170 
ªsu…
;

171 
«mebuf
[16];

173 
c
 = 
	`kmÆloc
((*c));

174 i‡(
c
 =
NULL
) {

175 
	`∑nic
("cpu_create: Out of memory\n");

178 
c
->
c_£lf
 = c;

179 
c
->
c_h¨dw¨e_numbî
 = 
h¨dw¨e_numbî
;

181 
c
->
c_cuπhªad
 = 
NULL
;

182 
	`thªadli°_öô
(&
c
->
c_zombõs
);

183 
c
->
c_h¨d˛ocks
 = 0;

184 
c
->
c_•ölocks
 = 0;

186 
c
->
c_isidÀ
 = 
Ál£
;

187 
	`thªadli°_öô
(&
c
->
c_runqueue
);

188 
	`•ölock_öô
(&
c
->
c_runqueue_lock
);

190 
c
->
c_ùi_≥ndög
 = 0;

191 
c
->
c_numshoŸdown
 = 0;

192 
	`•ölock_öô
(&
c
->
c_ùi_lock
);

194 
ªsu…
 = 
	`˝u¨øy_add
(&
Æl˝us
, 
c
, &c->
c_numbî
);

195 i‡(
ªsu…
 != 0) {

196 
	`∑nic
("˝u_¸óã:áºay_add: %s\n", 
	`°ªº‹
(
ªsu…
));

199 
	`¢¥ötf
(
«mebuf
, “amebuf), "<boŸ #%d>", 
c
->
c_numbî
);

200 
c
->
c_cuπhªad
 = 
	`thªad_¸óã
(
«mebuf
);

201 i‡(
c
->
c_cuπhªad
 =
NULL
) {

202 
	`∑nic
("cpu_create:Åhread_create failed\n");

204 
c
->
c_cuπhªad
->
t_˝u
 = c;

206 i‡(
c
->
c_numbî
 == 0) {

216 
c
->
c_cuπhªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

217 i‡(
c
->
c_cuπhªad
->
t_°ack
 =
NULL
) {

218 
	`∑nic
("cpu_create: couldn'tállocate stack");

220 
	`thªad_check°ack_öô
(
c
->
c_cuπhªad
);

229 i‡(!
	`CURCPU_EXISTS
()) {

235 
	`INIT_CURCPU
(
c
, c->
c_cuπhªad
);

242 
cuπhªad
->
t_˝u
 = 
cur˝u
;

243 
cur˝u
->
c_cuπhªad
 = 
cuπhªad
;

246 
	`HANGMAN_ACTORINIT
(&
c
->
c_h™gm™
, "cpu");

248 
ªsu…
 = 
	`¥oc_addthªad
(
k¥oc
, 
c
->
c_cuπhªad
);

249 i‡(
ªsu…
) {

250 
	`∑nic
("˝u_¸óã:Öroc_addthªad:: %s\n", 
	`°ªº‹
(
ªsu…
));

253 
	`˝u_machdï_öô
(
c
);

255  
c
;

256 
	}
}

268 
	$thªad_de°roy
(
thªad
 *thread)

270 
	`KASSERT
(
thªad
 !
cuπhªad
);

271 
	`KASSERT
(
thªad
->
t_°©e
 !
S_RUN
);

279 
	`KASSERT
(
thªad
->
t_did_ª£rve_buf„rs
 =
Ál£
);

282 
	`KASSERT
(
thªad
->
t_¥oc
 =
NULL
);

283 i‡(
thªad
->
t_°ack
 !
NULL
) {

284 
	`k‰ì
(
thªad
->
t_°ack
);

286 
	`thªadli°node_˛ónup
(&
thªad
->
t_li°node
);

287 
	`thªad_machdï_˛ónup
(&
thªad
->
t_machdï
);

290 
thªad
->
t_wch™_«me
 = "DESTROYED";

292 
	`k‰ì
(
thªad
->
t_«me
);

293 
	`k‰ì
(
thªad
);

294 
	}
}

304 
	$ex‹ci£
()

306 
thªad
 *
z
;

308 (
z
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_zombõs
)Ë!
NULL
) {

309 
	`KASSERT
(
z
 !
cuπhªad
);

310 
	`KASSERT
(
z
->
t_°©e
 =
S_ZOMBIE
);

311 
	`thªad_de°roy
(
z
);

313 
	}
}

321 
	$thªad_∑nic
()

328 
	`ùi_brﬂdˇ°
(
IPI_PANIC
);

337 
cur˝u
->
c_runqueue
.
é_cou¡
 = 0;

338 
cur˝u
->
c_runqueue
.
é_hód
.
én_√xt
 = &cur˝u->c_runqueue.
é_èû
;

339 
cur˝u
->
c_runqueue
.
é_èû
.
én_¥ev
 = &cur˝u->c_runqueue.
é_hód
;

357 
	}
}

363 
	$thªad_shutdown
()

371 
	`ùi_brﬂdˇ°
(
IPI_OFFLINE
);

372 
	}
}

378 
	$thªad_boŸ°øp
()

380 
	`˝u¨øy_öô
(&
Æl˝us
);

390 
	`KASSERT
(
	`CURCPU_EXISTS
(Ë=
Ál£
);

391 ()
	`˝u_¸óã
(0);

392 
	`KASSERT
(
	`CURCPU_EXISTS
(Ë=
åue
);

395 
	`KASSERT
(
cur˝u
 !
NULL
);

396 
	`KASSERT
(
cuπhªad
 !
NULL
);

397 
	`KASSERT
(
cuπhªad
->
t_¥oc
 !
NULL
);

398 
	`KASSERT
(
cuπhªad
->
t_¥oc
 =
k¥oc
);

401 
	}
}

412 
	$˝u_h©ch
(
so·w¨e_numbî
)

414 
buf
[64];

416 
	`KASSERT
(
cur˝u
 !
NULL
);

417 
	`KASSERT
(
cuπhªad
 !
NULL
);

418 
	`KASSERT
(
cur˝u
->
c_numbî
 =
so·w¨e_numbî
);

420 
	`•l0
();

421 
	`˝u_idítify
(
buf
, (buf));

423 
	`k¥ötf
("˝u%u: %s\n", 
so·w¨e_numbî
, 
buf
);

425 
	`V
(
˝u_°¨tup_£m
);

426 
	`thªad_exô
();

427 
	}
}

433 
	$thªad_°¨t_˝us
()

435 
buf
[64];

436 
i
;

438 
	`˝u_idítify
(
buf
, (buf));

439 
	`k¥ötf
("˝u0: %s\n", 
buf
);

441 
˝u_°¨tup_£m
 = 
	`£m_¸óã
("cpu_hatch", 0);

442 
	`maöbus_°¨t_˝us
();

444 
i
=0; i<
	`˝u¨øy_num
(&
Æl˝us
) - 1; i++) {

445 
	`P
(
˝u_°¨tup_£m
);

447 
	`£m_de°roy
(
˝u_°¨tup_£m
);

448 
˝u_°¨tup_£m
 = 
NULL
;

449 
	}
}

458 
	$thªad_make_ru¬abÀ
(
thªad
 *
èrgë
, 
boﬁ
 
Æªady_have_lock
)

460 
˝u
 *
èrgë˝u
;

463 
èrgë˝u
 = 
èrgë
->
t_˝u
;

465 i‡(
Æªady_have_lock
) {

467 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
èrgë˝u
->
c_runqueue_lock
));

470 
	`•ölock_acquúe
(&
èrgë˝u
->
c_runqueue_lock
);

474 
èrgë
->
t_°©e
 = 
S_READY
;

475 
	`thªadli°_addèû
(&
èrgë˝u
->
c_runqueue
, 
èrgë
);

477 i‡(
èrgë˝u
->
c_isidÀ
 &&Å¨gë˝u !
cur˝u
->
c_£lf
) {

482 
	`ùi_£nd
(
èrgë˝u
, 
IPI_UNIDLE
);

485 i‡(!
Æªady_have_lock
) {

486 
	`•ölock_ªÀa£
(&
èrgë˝u
->
c_runqueue_lock
);

488 
	}
}

501 
thªad_f‹k
(c⁄° *
«me
,

502 
¥oc
 *proc,

503 (*
íåypoöt
)(*
d©a1
, 
d©a2
),

504 *
d©a1
, 
d©a2
)

506 
thªad
 *
√wthªad
;

507 
ªsu…
;

509 
√wthªad
 = 
	`thªad_¸óã
(
«me
);

510 i‡(
√wthªad
 =
NULL
) {

511  
ENOMEM
;

515 
√wthªad
->
t_°ack
 = 
	`kmÆloc
(
STACK_SIZE
);

516 i‡(
√wthªad
->
t_°ack
 =
NULL
) {

517 
	`thªad_de°roy
(
√wthªad
);

518  
ENOMEM
;

520 
	`thªad_check°ack_öô
(
√wthªad
);

527 
√wthªad
->
t_˝u
 = 
cuπhªad
->t_cpu;

530 i‡(
¥oc
 =
NULL
) {

531 
¥oc
 = 
cuπhªad
->
t_¥oc
;

533 
ªsu…
 = 
	`¥oc_addthªad
(
¥oc
, 
√wthªad
);

534 i‡(
ªsu…
) {

536 
	`thªad_de°roy
(
√wthªad
);

537  
ªsu…
;

545 
√wthªad
->
t_ùlhigh_cou¡
++;

548 
	`swôch‰ame_öô
(
√wthªad
, 
íåypoöt
, 
d©a1
, 
d©a2
);

551 
	`thªad_make_ru¬abÀ
(
√wthªad
, 
Ál£
);

554 
	}
}

568 
	$thªad_swôch
(
thªad°©e_t
 
√w°©e
, 
wch™
 *
wc
, 
•ölock
 *
lk
)

570 
thªad
 *
cur
, *
√xt
;

571 
•l
;

573 
	`DEBUGASSERT
(
cur˝u
->
c_cuπhªad
 =
cuπhªad
);

574 
	`DEBUGASSERT
(
cuπhªad
->
t_˝u
 =
cur˝u
->
c_£lf
);

577 
•l
 = 
	`•lhigh
();

579 
cur
 = 
cuπhªad
;

585 i‡(
cur˝u
->
c_isidÀ
) {

586 
	`•lx
(
•l
);

591 
	`thªad_check°ack
(
cur
);

594 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

597 i‡(
√w°©e
 =
S_READY
 && 
	`thªadli°_i£m±y
(&
cur˝u
->
c_runqueue
)) {

598 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

599 
	`•lx
(
•l
);

604 
√w°©e
) {

605 
S_RUN
:

606 
	`∑nic
("Illegal S_RUN inÅhread_switch\n");

607 
S_READY
:

608 
	`thªad_make_ru¬abÀ
(
cur
, 
åue
 );

610 
S_SLEEP
:

611 
cur
->
t_wch™_«me
 = 
wc
->
wc_«me
;

620 
	`thªadli°_addèû
(&
wc
->
wc_thªads
, 
cur
);

621 
	`•ölock_ªÀa£
(
lk
);

623 
S_ZOMBIE
:

624 
cur
->
t_wch™_«me
 = "ZOMBIE";

625 
	`thªadli°_addèû
(&
cur˝u
->
c_zombõs
, 
cur
);

628 
cur
->
t_°©e
 = 
√w°©e
;

648 
cur˝u
->
c_isidÀ
 = 
åue
;

650 
√xt
 = 
	`thªadli°_ªmhód
(&
cur˝u
->
c_runqueue
);

651 i‡(
√xt
 =
NULL
) {

652 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

653 
	`˝u_idÀ
();

654 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

656 } 
√xt
 =
NULL
);

657 
cur˝u
->
c_isidÀ
 = 
Ál£
;

666 
cur˝u
->
c_cuπhªad
 = 
√xt
;

667 
cuπhªad
 = 
√xt
;

670 
	`swôch‰ame_swôch
(&
cur
->
t_c⁄ãxt
, &
√xt
->t_context);

720 
cur
->
t_wch™_«me
 = 
NULL
;

721 
cur
->
t_°©e
 = 
S_RUN
;

724 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

727 
	`as_a˘iv©e
();

730 
	`ex‹ci£
();

733 
	`•lx
(
•l
);

734 
	}
}

745 
thªad_°¨tup
((*
íåypoöt
)(*
d©a1
, 
d©a2
),

746 *
d©a1
, 
d©a2
)

748 
thªad
 *
cur
;

750 
cur
 = 
cuπhªad
;

753 
cur
->
t_wch™_«me
 = 
NULL
;

754 
cur
->
t_°©e
 = 
S_RUN
;

757 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

760 
	`as_a˘iv©e
();

763 
	`ex‹ci£
();

766 
	`•l0
();

769 
	`íåypoöt
(
d©a1
, 
d©a2
);

772 
	`thªad_exô
();

773 
	}
}

785 
	$thªad_exô
()

787 
thªad
 *
cur
;

789 
cur
 = 
cuπhªad
;

791 
	`KASSERT
(
cur
->
t_did_ª£rve_buf„rs
 =
Ál£
);

797 
	`¥oc_ªmthªad
(
cur
);

800 
	`KASSERT
(
cur
->
t_¥oc
 =
NULL
);

803 
	`thªad_check°ack
(
cur
);

806 
	`•lhigh
();

807 
	`thªad_swôch
(
S_ZOMBIE
, 
NULL
, NULL);

808 
	`∑nic
("braaaaaaaiiiiiiiiiiinssssss\n");

809 
	}
}

815 
	$thªad_yõld
()

817 
	`thªad_swôch
(
S_READY
, 
NULL
, NULL);

818 
	}
}

830 
	$scheduÀ
()

836 
	}
}

856 
	$thªad_c⁄sidî_migøti⁄
()

858 
my_cou¡
, 
tŸÆ_cou¡
, 
⁄e_sh¨e
, 
to_£nd
;

859 
i
, 
num˝us
;

860 
˝u
 *
c
;

861 
thªadli°
 
vi˘ims
;

862 
thªad
 *
t
;

864 
my_cou¡
 = 
tŸÆ_cou¡
 = 0;

865 
num˝us
 = 
	`˝u¨øy_num
(&
Æl˝us
);

866 
i
=0; i<
num˝us
; i++) {

867 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

868 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

869 
tŸÆ_cou¡
 +
c
->
c_runqueue
.
é_cou¡
;

870 i‡(
c
 =
cur˝u
->
c_£lf
) {

871 
my_cou¡
 = 
c
->
c_runqueue
.
é_cou¡
;

873 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

876 
⁄e_sh¨e
 = 
	`DIVROUNDUP
(
tŸÆ_cou¡
, 
num˝us
);

877 i‡(
my_cou¡
 < 
⁄e_sh¨e
) {

881 
to_£nd
 = 
my_cou¡
 - 
⁄e_sh¨e
;

882 
	`thªadli°_öô
(&
vi˘ims
);

883 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

884 
i
=0; i<
to_£nd
; i++) {

885 
t
 = 
	`thªadli°_ªmèû
(&
cur˝u
->
c_runqueue
);

886 
	`thªadli°_addhód
(&
vi˘ims
, 
t
);

888 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

890 
i
=0; i < 
num˝us
 && 
to_£nd
 > 0; i++) {

891 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

892 i‡(
c
 =
cur˝u
->
c_£lf
) {

895 
	`•ölock_acquúe
(&
c
->
c_runqueue_lock
);

896 
c
->
c_runqueue
.
é_cou¡
 < 
⁄e_sh¨e
 && 
to_£nd
 > 0) {

897 
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
);

920 i‡(
t
 =
cuπhªad
) {

921 
	`thªadli°_addèû
(&
vi˘ims
, 
t
);

922 
to_£nd
--;

926 
t
->
t_˝u
 = 
c
;

927 
	`thªadli°_addèû
(&
c
->
c_runqueue
, 
t
);

928 
	`DEBUG
(
DB_THREADS
,

930 
t
->
t_«me
, 
cur˝u
->
c_numbî
, 
c
->c_number);

931 
to_£nd
--;

932 i‡(
c
->
c_isidÀ
) {

937 
	`ùi_£nd
(
c
, 
IPI_UNIDLE
);

940 
	`•ölock_ªÀa£
(&
c
->
c_runqueue_lock
);

948 i‡(!
	`thªadli°_i£m±y
(&
vi˘ims
)) {

949 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

950 (
t
 = 
	`thªadli°_ªmhód
(&
vi˘ims
)Ë!
NULL
) {

951 
	`thªadli°_addèû
(&
cur˝u
->
c_runqueue
, 
t
);

953 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

956 
	`KASSERT
(
	`thªadli°_i£m±y
(&
vi˘ims
));

957 
	`thªadli°_˛ónup
(&
vi˘ims
);

958 
	}
}

974 
wch™
 *

975 
	$wch™_¸óã
(c⁄° *
«me
)

977 
wch™
 *
wc
;

979 
wc
 = 
	`kmÆloc
((*wc));

980 i‡(
wc
 =
NULL
) {

981  
NULL
;

983 
	`thªadli°_öô
(&
wc
->
wc_thªads
);

984 
wc
->
wc_«me
 = 
«me
;

986  
wc
;

987 
	}
}

994 
	$wch™_de°roy
(
wch™
 *
wc
)

996 
	`thªadli°_˛ónup
(&
wc
->
wc_thªads
);

997 
	`k‰ì
(
wc
);

998 
	}
}

1008 
	$wch™_¶ìp
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1011 
	`KASSERT
(!
cuπhªad
->
t_ö_öãºu±
);

1014 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1017 
	`KASSERT
(
cur˝u
->
c_•ölocks
 == 1);

1019 
	`thªad_swôch
(
S_SLEEP
, 
wc
, 
lk
);

1020 
	`•ölock_acquúe
(
lk
);

1021 
	}
}

1027 
	$wch™_wake⁄e
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1029 
thªad
 *
èrgë
;

1031 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1034 
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
);

1036 i‡(
èrgë
 =
NULL
) {

1049 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1050 
	}
}

1056 
	$wch™_wakóŒ
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1058 
thªad
 *
èrgë
;

1059 
thªadli°
 
li°
;

1061 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1063 
	`thªadli°_öô
(&
li°
);

1069 (
èrgë
 = 
	`thªadli°_ªmhód
(&
wc
->
wc_thªads
)Ë!
NULL
) {

1070 
	`thªadli°_addèû
(&
li°
, 
èrgë
);

1078 (
èrgë
 = 
	`thªadli°_ªmhód
(&
li°
)Ë!
NULL
) {

1079 
	`thªad_make_ru¬abÀ
(
èrgë
, 
Ál£
);

1082 
	`thªadli°_˛ónup
(&
li°
);

1083 
	}
}

1089 
boﬁ


1090 
	$wch™_i£m±y
(
wch™
 *
wc
, 
•ölock
 *
lk
)

1092 
boﬁ
 
ªt
;

1094 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(
lk
));

1095 
ªt
 = 
	`thªadli°_i£m±y
(&
wc
->
wc_thªads
);

1097  
ªt
;

1098 
	}
}

1110 
	$ùi_£nd
(
˝u
 *
èrgë
, 
code
)

1112 
	`KASSERT
(
code
 >= 0 && code < 32);

1114 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1115 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
code
;

1116 
	`maöbus_£nd_ùi
(
èrgë
);

1117 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1118 
	}
}

1124 
	$ùi_brﬂdˇ°
(
code
)

1126 
i
;

1127 
˝u
 *
c
;

1129 
i
=0; i < 
	`˝u¨øy_num
(&
Æl˝us
); i++) {

1130 
c
 = 
	`˝u¨øy_gë
(&
Æl˝us
, 
i
);

1131 i‡(
c
 !
cur˝u
->
c_£lf
) {

1132 
	`ùi_£nd
(
c
, 
code
);

1135 
	}
}

1141 
	$ùi_ébshoŸdown
(
˝u
 *
èrgë
, c⁄° 
ébshoŸdown
 *
m≠pög
)

1143 
n
;

1145 
	`•ölock_acquúe
(&
èrgë
->
c_ùi_lock
);

1147 
n
 = 
èrgë
->
c_numshoŸdown
;

1148 i‡(
n
 =
TLBSHOOTDOWN_MAX
) {

1158 
	`∑nic
("ipi_tlbshootdown: Too many shootdowns queued\n");

1161 
èrgë
->
c_shoŸdown
[
n
] = *
m≠pög
;

1162 
èrgë
->
c_numshoŸdown
 = 
n
+1;

1165 
èrgë
->
c_ùi_≥ndög
 |(
uöt32_t
)1 << 
IPI_TLBSHOOTDOWN
;

1166 
	`maöbus_£nd_ùi
(
èrgë
);

1168 
	`•ölock_ªÀa£
(&
èrgë
->
c_ùi_lock
);

1169 
	}
}

1175 
	$öãΩro˚ss‹_öãºu±
()

1177 
uöt32_t
 
bôs
;

1178 
i
;

1180 
	`•ölock_acquúe
(&
cur˝u
->
c_ùi_lock
);

1181 
bôs
 = 
cur˝u
->
c_ùi_≥ndög
;

1183 i‡(
bôs
 & (1U << 
IPI_PANIC
)) {

1185 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1186 
	`˝u_hÆt
();

1188 i‡(
bôs
 & (1U << 
IPI_OFFLINE
)) {

1190 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1191 
	`•ölock_acquúe
(&
cur˝u
->
c_runqueue_lock
);

1192 i‡(!
cur˝u
->
c_isidÀ
) {

1193 
	`k¥ötf
("cpu%d: offline: warning:Çot idle\n",

1194 
cur˝u
->
c_numbî
);

1196 
	`•ölock_ªÀa£
(&
cur˝u
->
c_runqueue_lock
);

1197 
	`k¥ötf
("˝u%d: ofÊöe.\n", 
cur˝u
->
c_numbî
);

1198 
	`˝u_hÆt
();

1200 i‡(
bôs
 & (1U << 
IPI_UNIDLE
)) {

1206 i‡(
bôs
 & (1U << 
IPI_TLBSHOOTDOWN
)) {

1212 
i
=0; i<
cur˝u
->
c_numshoŸdown
; i++) {

1213 
	`vm_ébshoŸdown
(&
cur˝u
->
c_shoŸdown
[
i
]);

1215 
cur˝u
->
c_numshoŸdown
 = 0;

1218 
cur˝u
->
c_ùi_≥ndög
 = 0;

1219 
	`•ölock_ªÀa£
(&
cur˝u
->
c_ùi_lock
);

1220 
	}
}

	@thread/threadlist.c

34 
	~<ty≥s.h
>

35 
	~<lib.h
>

36 
	~<thªad.h
>

37 
	~<thªadli°.h
>

40 
	$thªadli°node_öô
(
thªadli°node
 *
én
, 
thªad
 *
t
)

42 
	`DEBUGASSERT
(
én
 !
NULL
);

43 
	`KASSERT
(
t
 !
NULL
);

45 
én
->
én_√xt
 = 
NULL
;

46 
én
->
én_¥ev
 = 
NULL
;

47 
én
->
én_£lf
 = 
t
;

48 
	}
}

51 
	$thªadli°node_˛ónup
(
thªadli°node
 *
én
)

53 
	`DEBUGASSERT
(
én
 !
NULL
);

55 
	`KASSERT
(
én
->
én_√xt
 =
NULL
);

56 
	`KASSERT
(
én
->
én_¥ev
 =
NULL
);

57 
	`KASSERT
(
én
->
én_£lf
 !
NULL
);

58 
	}
}

61 
	$thªadli°_öô
(
thªadli°
 *
é
)

63 
	`DEBUGASSERT
(
é
 !
NULL
);

65 
é
->
é_hód
.
én_√xt
 = &é->
é_èû
;

66 
é
->
é_hód
.
én_¥ev
 = 
NULL
;

67 
é
->
é_èû
.
én_√xt
 = 
NULL
;

68 
é
->
é_èû
.
én_¥ev
 = &é->
é_hód
;

69 
é
->
é_hód
.
én_£lf
 = 
NULL
;

70 
é
->
é_èû
.
én_£lf
 = 
NULL
;

71 
é
->
é_cou¡
 = 0;

72 
	}
}

75 
	$thªadli°_˛ónup
(
thªadli°
 *
é
)

77 
	`DEBUGASSERT
(
é
 !
NULL
);

78 
	`DEBUGASSERT
(
é
->
é_hód
.
én_√xt
 =&é->
é_èû
);

79 
	`DEBUGASSERT
(
é
->
é_hód
.
én_¥ev
 =
NULL
);

80 
	`DEBUGASSERT
(
é
->
é_èû
.
én_√xt
 =
NULL
);

81 
	`DEBUGASSERT
(
é
->
é_èû
.
én_¥ev
 =&é->
é_hód
);

82 
	`DEBUGASSERT
(
é
->
é_hód
.
én_£lf
 =
NULL
);

83 
	`DEBUGASSERT
(
é
->
é_èû
.
én_£lf
 =
NULL
);

85 
	`KASSERT
(
	`thªadli°_i£m±y
(
é
));

86 
	`KASSERT
(
é
->
é_cou¡
 == 0);

89 
	}
}

91 
boﬁ


92 
	$thªadli°_i£m±y
(
thªadli°
 *
é
)

94 
	`DEBUGASSERT
(
é
 !
NULL
);

96  (
é
->
é_cou¡
 == 0);

97 
	}
}

107 
	$thªadli°_ö£πa·înode
(
thªadli°node
 *
⁄li°
, 
thªad
 *
t
)

109 
thªadli°node
 *
addì
;

111 
addì
 = &
t
->
t_li°node
;

113 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

114 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

116 
addì
->
én_¥ev
 = 
⁄li°
;

117 
addì
->
én_√xt
 = 
⁄li°
->tln_next;

118 
addì
->
én_¥ev
->
én_√xt
 =áddee;

119 
addì
->
én_√xt
->
én_¥ev
 =áddee;

120 
	}
}

127 
	$thªadli°_ö£πbef‹íode
(
thªad
 *
t
, 
thªadli°node
 *
⁄li°
)

129 
thªadli°node
 *
addì
;

131 
addì
 = &
t
->
t_li°node
;

133 
	`DEBUGASSERT
(
addì
->
én_¥ev
 =
NULL
);

134 
	`DEBUGASSERT
(
addì
->
én_√xt
 =
NULL
);

136 
addì
->
én_¥ev
 = 
⁄li°
->tln_prev;

137 
addì
->
én_√xt
 = 
⁄li°
;

138 
addì
->
én_¥ev
->
én_√xt
 =áddee;

139 
addì
->
én_√xt
->
én_¥ev
 =áddee;

140 
	}
}

147 
	$thªadli°_ªmovíode
(
thªadli°node
 *
én
)

149 
	`DEBUGASSERT
(
én
 !
NULL
);

150 
	`DEBUGASSERT
(
én
->
én_¥ev
 !
NULL
);

151 
	`DEBUGASSERT
(
én
->
én_√xt
 !
NULL
);

153 
én
->
én_¥ev
->
én_√xt
 =Åln->tln_next;

154 
én
->
én_√xt
->
én_¥ev
 =Åln->tln_prev;

155 
én
->
én_¥ev
 = 
NULL
;

156 
én
->
én_√xt
 = 
NULL
;

157 
	}
}

163 
	$thªadli°_addhód
(
thªadli°
 *
é
, 
thªad
 *
t
)

165 
	`DEBUGASSERT
(
é
 !
NULL
);

166 
	`DEBUGASSERT
(
t
 !
NULL
);

168 
	`thªadli°_ö£πa·înode
(&
é
->
é_hód
, 
t
);

169 
é
->
é_cou¡
++;

170 
	}
}

173 
	$thªadli°_addèû
(
thªadli°
 *
é
, 
thªad
 *
t
)

175 
	`DEBUGASSERT
(
é
 !
NULL
);

176 
	`DEBUGASSERT
(
t
 !
NULL
);

178 
	`thªadli°_ö£πbef‹íode
(
t
, &
é
->
é_èû
);

179 
é
->
é_cou¡
++;

180 
	}
}

182 
thªad
 *

183 
	$thªadli°_ªmhód
(
thªadli°
 *
é
)

185 
thªadli°node
 *
én
;

187 
	`DEBUGASSERT
(
é
 !
NULL
);

189 
én
 = 
é
->
é_hód
.
én_√xt
;

190 i‡(
én
->
én_√xt
 =
NULL
) {

192  
NULL
;

194 
	`thªadli°_ªmovíode
(
én
);

195 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

196 
é
->
é_cou¡
--;

197  
én
->
én_£lf
;

198 
	}
}

200 
thªad
 *

201 
	$thªadli°_ªmèû
(
thªadli°
 *
é
)

203 
thªadli°node
 *
én
;

205 
	`DEBUGASSERT
(
é
 !
NULL
);

207 
én
 = 
é
->
é_èû
.
én_¥ev
;

208 i‡(
én
->
én_¥ev
 =
NULL
) {

210  
NULL
;

212 
	`thªadli°_ªmovíode
(
én
);

213 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

214 
é
->
é_cou¡
--;

215  
én
->
én_£lf
;

216 
	}
}

219 
	$thªadli°_ö£πa·î
(
thªadli°
 *
é
,

220 
thªad
 *
⁄li°
, thªad *
addì
)

222 
	`thªadli°_ö£πa·înode
(&
⁄li°
->
t_li°node
, 
addì
);

223 
é
->
é_cou¡
++;

224 
	}
}

227 
	$thªadli°_ö£πbef‹e
(
thªadli°
 *
é
,

228 
thªad
 *
addì
, thªad *
⁄li°
)

230 
	`thªadli°_ö£πbef‹íode
(
addì
, &
⁄li°
->
t_li°node
);

231 
é
->
é_cou¡
++;

232 
	}
}

235 
	$thªadli°_ªmove
(
thªadli°
 *
é
, 
thªad
 *
t
)

237 
	`thªadli°_ªmovíode
(&
t
->
t_li°node
);

238 
	`DEBUGASSERT
(
é
->
é_cou¡
 > 0);

239 
é
->
é_cou¡
--;

240 
	}
}

	@vfs/buf.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<¨øy.h
>

34 
	~<˛ock.h
>

35 
	~<thªad.h
>

36 
	~<cuºít.h
>

37 
	~<synch.h
>

38 
	~<maöbus.h
>

39 
	~<vfs.h
>

40 
	~<fs.h
>

41 
	~<buf.h
>

46 
DECLARRAY
(
buf
, 
__UNUSED
 
ölöe
);

47 
DEFARRAY
(
buf
, 
__UNUSED
 
ölöe
);

55 
	#ONE_TRUE_BUFFER_SIZE
 512

	)

60 
	#INVALID_INDEX
 (()-1)

	)

75 
	#EDEADBUF
 
EBADF


	)

80 
	sbuf
 {

82 
	mb_èbÀödex
;

83 
	mb_dútyödex
;

84 
	mb_buckëödex
;

85 
	mb_dútyïoch
;

88 
	mb_©èched
:1;

89 
	mb_busy
:1;

90 
	mb_vÆid
:1;

91 
	mb_dúty
:1;

92 
	mb_fsm™aged
:1;

93 
thªad
 *
	mb_hﬁdî
;

94 
time•ec
 
	mb_time°amp
;

97 
fs
 *
	mb_fs
;

98 
daddr_t
 
	mb_physblock
;

101 *
	mb_d©a
;

102 
size_t
 
	mb_size
;

104 *
	mb_fsd©a
;

110 
	sbufhash
 {

111 
	mbh_numbuckës
;

112 
buÁºay
 *
	mbh_buckës
;

137 
bufhash
 
	gbuf„r_hash
;

139 
buÁºay
 
	g©èched_buf„rs
;

140 
	g©èched_buf„rs_fú°
;

141 
	g©èched_buf„rs_thªsh
;

143 
buÁºay
 
	gdúty_buf„rs
;

144 
	gdúty_buf„rs_fú°
;

145 
	gdúty_buf„rs_thªsh
;

147 
buÁºay
 
	gdëached_buf„rs
;

160 
	gdúty_ïoch
;

161 
	gdúty_buf„rs_gíî©i⁄
;

162 
	g©èched_buf„rs_gíî©i⁄
;

168 
	g©èched_buf„rs_cou¡
;

169 
	gbusy_buf„rs_cou¡
;

170 
	gdúty_buf„rs_cou¡
;

172 
	gnum_ª£rved_buf„rs
;

173 
	gnum_tŸÆ_buf„rs
;

174 
	gmax_tŸÆ_buf„rs
;

176 
	gnum_tŸÆ_gës
;

177 
	gnum_vÆid_gës
;

178 
	gnum_ªad_gës
;

179 
	gnum_tŸÆ_wrôeouts
;

180 
	gnum_tŸÆ_evi˘i⁄s
;

181 
	gnum_dúty_evi˘i⁄s
;

187 
boﬁ
 
	gsyn˚r_undî_lﬂd
;

188 
boﬁ
 
	gsyn˚r_√eds_hñp
;

189 
thªad
 *
	gsyn˚r_thªad
;

195 
lock
 *
	gbuf„r_lock
;

200 
cv
 *
	gbuf„r_busy_cv
;

201 
cv
 *
	gbuf„r_ª£rve_cv
;

213 
	#RESERVE_BUFFERS
 8

	)

216 
	#ATTACHED_THRESH_NUM
 3

	)

217 
	#ATTACHED_THRESH_DENOM
 2

	)

220 
	#DIRTY_THRESH_NUM
 5

	)

221 
	#DIRTY_THRESH_DENOM
 4

	)

224 
	#SYNCER_ALWAYS_NUM
 1

	)

225 
	#SYNCER_ALWAYS_DENOM
 5

	)

228 
	#SYNCER_IFOLD_NUM
 2

	)

229 
	#SYNCER_IFOLD_DENOM
 5

	)

232 
	#SYNCER_TARGET_AGE
 2

	)

235 
	#SYNCER_LOAD_AGE
 4

	)

238 
	#SYNCER_HELP_AGE
 8

	)

242 
	#SYNCER_DIRTY_NUM
 1

	)

243 
	#SYNCER_DIRTY_DENOM
 2

	)

246 
	#SYNCER_TARGET_NUM
 1

	)

247 
	#SYNCER_TARGET_DENOM
 4

	)

250 
	#SYNCER_LIMIT_NUM
 1

	)

251 
	#SYNCER_LIMIT_DENOM
 2

	)

255 
	#BUFFER_MAXMEM_NUM
 1

	)

256 
	#BUFFER_MAXMEM_DENOM
 4

	)

259 
	#SCALE
(
x
, 
K
Ë(((xË* K##
_NUM
Ë/ K##
_DENOM
)

	)

264 
buf„r_ªÀa£_öã∫Æ
(
buf
 *
b
);

274 
	$bufcheck
()

276 
	`KASSERT
(
©èched_buf„rs_cou¡
 <
	`buÁºay_num
(&
©èched_buf„rs
));

277 
	`KASSERT
(
©èched_buf„rs_fú°
 <
	`buÁºay_num
(&
©èched_buf„rs
));

278 
	`KASSERT
(
	`buÁºay_num
(&
©èched_buf„rs
Ë<
©èched_buf„rs_thªsh
);

280 
	`KASSERT
(
dúty_buf„rs_cou¡
 <
	`buÁºay_num
(&
dúty_buf„rs
));

281 
	`KASSERT
(
dúty_buf„rs_fú°
 <
	`buÁºay_num
(&
dúty_buf„rs
));

282 
	`KASSERT
(
	`buÁºay_num
(&
dúty_buf„rs
Ë<
dúty_buf„rs_thªsh
);

284 
	`KASSERT
(
	`buÁºay_num
(&
dëached_buf„rs
Ë+ 
©èched_buf„rs_cou¡


285 =
num_tŸÆ_buf„rs
);

289 
	`KASSERT
(
num_ª£rved_buf„rs
 <
max_tŸÆ_buf„rs
);

290 
	`KASSERT
(
num_tŸÆ_buf„rs
 <
max_tŸÆ_buf„rs
);

291 
	}
}

305 
buÁºay_ªmove_un‹dîed
(
buÁºay
 *
a
, 
ödex
,

306 (*
fixup
)(
buf
 *,

307 
ﬁdix
, 
√wix
))

309 
num
;

310 
buf
 *
b
;

311 
ªsu…
;

313 
num
 = 
	`buÁºay_num
(
a
);

314 i‡(
ödex
 < 
num
-1) {

315 
b
 = 
	`buÁºay_gë
(
a
, 
num
-1);

316 
	`fixup
(
b
, 
num
-1, 
ödex
);

317 
	`buÁºay_£t
(
a
, 
ödex
, 
b
);

319 
ªsu…
 = 
	`buÁºay_£tsize
(
a
, 
num
-1);

321 
	`KASSERT
(
ªsu…
 == 0);

322 
	}
}

332 
buÁºay_com∑˘
(
buÁºay
 *
a
,

333 *
fú°p
,

334 (*
fixup
)(
buf
 *, 
ﬁdix
, 
√wix
))

336 
i
, 
j
, 
num
;

337 
buf
 *
b
;

338 
ªsu…
;

340 
num
 = 
	`buÁºay_num
(
a
);

341 
i
 = 
j
 = *
fú°p
; i<
num
; i++) {

342 
b
 = 
	`buÁºay_gë
(
a
, 
i
);

343 i‡(
b
 !
NULL
) {

344 i‡(
j
 < 
i
) {

345 
	`fixup
(
b
, 
i
, 
j
);

346 
	`buÁºay_£t
(
a
, 
j
++, 
b
);

349 
j
++;

353 
	`KASSERT
(
j
 <
num
);

354 
ªsu…
 = 
	`buÁºay_£tsize
(
a
, 
j
);

356 
	`KASSERT
(
ªsu…
 == 0);

357 *
fú°p
 = 
j
;

358 
	}
}

365 
	$buf_fixup_buckëödex
(
buf
 *
b
, 
ﬁdix
, 
√wix
)

367 
	`KASSERT
(
b
->
b_buckëödex
 =
ﬁdix
);

368 
b
->
b_buckëödex
 = 
√wix
;

369 
	}
}

373 
	$buf_fixup_dútyödex
(
buf
 *
b
, 
ﬁdix
, 
√wix
)

375 
	`KASSERT
(
b
->
b_dútyödex
 =
ﬁdix
);

376 
b
->
b_dútyödex
 = 
√wix
;

377 
	}
}

381 
	$buf_fixup_èbÀödex
(
buf
 *
b
, 
ﬁdix
, 
√wix
)

383 
	`KASSERT
(
b
->
b_èbÀödex
 =
ﬁdix
);

384 
b
->
b_èbÀödex
 = 
√wix
;

385 
	}
}

395 
	$bufhash_öô
(
bufhash
 *
bh
, 
numbuckës
)

397 
i
;

399 
bh
->
bh_buckës
 = 
	`kmÆloc
(
numbuckës
*(*bh->bh_buckets));

400 i‡(
bh
->
bh_buckës
 =
NULL
) {

401  
ENOMEM
;

403 
i
=0; i<
numbuckës
; i++) {

404 
	`buÁºay_öô
(&
bh
->
bh_buckës
[
i
]);

406 
bh
->
bh_numbuckës
 = 
numbuckës
;

408 
	}
}

416 
	$bufhash_˛ónup
(
bufhash
 *
bh
)

419 
	}
}

427 
	$buf„r_hashfunc
(
fs
 *fs, 
daddr_t
 
physblock
)

429 
vÆ
 = 0;

432 
vÆ
 = 0xfeeb1e;

433 
vÆ
 ^((
uöçå_t
)
fs
) >> 6;

434 
vÆ
 ^
physblock
;

435  
vÆ
;

436 
	}
}

443 
	$bufhash_add
(
bufhash
 *
bh
, 
buf
 *
b
)

445 
hash
, 
bn
;

447 
	`KASSERT
(
b
->
b_buckëödex
 =
INVALID_INDEX
);

449 
hash
 = 
	`buf„r_hashfunc
(
b
->
b_fs
, b->
b_physblock
);

450 
bn
 = 
hash
 % 
bh
->
bh_numbuckës
;

451  
	`buÁºay_add
(&
bh
->
bh_buckës
[
bn
], 
b
, &b->
b_buckëödex
);

452 
	}
}

459 
	$bufhash_ªmove
(
bufhash
 *
bh
, 
buf
 *
b
)

461 
hash
, 
bn
;

463 
hash
 = 
	`buf„r_hashfunc
(
b
->
b_fs
, b->
b_physblock
);

464 
bn
 = 
hash
 % 
bh
->
bh_numbuckës
;

466 
	`KASSERT
(
	`buÁºay_gë
(&
bh
->
bh_buckës
[
bn
], 
b
->
b_buckëödex
) == b);

467 
	`buÁºay_£t
(&
bh
->
bh_buckës
[
bn
], 
b
->
b_buckëödex
, 
NULL
);

468 
	`buÁºay_ªmove_un‹dîed
(&
bh
->
bh_buckës
[
bn
], 
b
->
b_buckëödex
,

469 
buf_fixup_buckëödex
);

470 
b
->
b_buckëödex
 = 
INVALID_INDEX
;

471 
	}
}

477 
buf
 *

478 
	$bufhash_gë
(
bufhash
 *
bh
, 
fs
 *fs, 
daddr_t
 
physblock
)

480 
hash
, 
bn
;

481 
num
, 
i
;

482 
buf
 *
b
;

484 
hash
 = 
	`buf„r_hashfunc
(
fs
, 
physblock
);

485 
bn
 = 
hash
 % 
bh
->
bh_numbuckës
;

487 
num
 = 
	`buÁºay_num
(&
bh
->
bh_buckës
[
bn
]);

488 
i
=0; i<
num
; i++) {

489 
b
 = 
	`buÁºay_gë
(&
bh
->
bh_buckës
[
bn
], 
i
);

490 
	`KASSERT
(
b
->
b_buckëödex
 =
i
);

491 i‡(
b
->
b_fs
 =
fs
 && b->
b_physblock
 =
physblock
) {

493  
b
;

496  
NULL
;

497 
	}
}

508 
	$¥óŒoˇã_buf„r_¨øys
(
√wtŸÆ
)

510 
ªsu…
;

511 
√w©hªsh
, 
√wdthªsh
;

513 
√w©hªsh
 = (
√wtŸÆ
*
ATTACHED_THRESH_NUM
)/
ATTACHED_THRESH_DENOM
;

514 
√wdthªsh
 = (
√wtŸÆ
*
DIRTY_THRESH_NUM
)/
DIRTY_THRESH_DENOM
;

516 
ªsu…
 = 
	`buÁºay_¥óŒoˇã
(&
dëached_buf„rs
, 
√wtŸÆ
);

517 i‡(
ªsu…
) {

518  
ªsu…
;

521 
ªsu…
 = 
	`buÁºay_¥óŒoˇã
(&
©èched_buf„rs
, 
√w©hªsh
);

522 i‡(
ªsu…
) {

523  
ªsu…
;

525 
©èched_buf„rs_thªsh
 = 
√w©hªsh
;

527 
ªsu…
 = 
	`buÁºay_¥óŒoˇã
(&
dúty_buf„rs
, 
√wdthªsh
);

528 i‡(
ªsu…
) {

529  
ªsu…
;

531 
dúty_buf„rs_thªsh
 = 
√wdthªsh
;

534 
	}
}

541 
	$com∑˘_©èched_buf„rs
()

543 
	`buÁºay_com∑˘
(&
©èched_buf„rs
, &
©èched_buf„rs_fú°
,

544 
buf_fixup_èbÀödex
);

545 
	`KASSERT
(
©èched_buf„rs_cou¡
 =
	`buÁºay_num
(&
©èched_buf„rs
));

548 
©èched_buf„rs_gíî©i⁄
++;

549 
	}
}

556 
	$com∑˘_dúty_buf„rs
()

558 
	`buÁºay_com∑˘
(&
dúty_buf„rs
, &
dúty_buf„rs_fú°
,

559 
buf_fixup_dútyödex
);

560 
	`KASSERT
(
dúty_buf„rs_cou¡
 =
	`buÁºay_num
(&
dúty_buf„rs
));

563 
dúty_buf„rs_gíî©i⁄
++;

564 
	}
}

570 
buf
 *

571 
	$buf„r_ªmove_dëached
()

573 
buf
 *
b
;

574 
num
;

575 
ªsu…
;

577 
num
 = 
	`buÁºay_num
(&
dëached_buf„rs
);

578 i‡(
num
 > 0) {

579 
b
 = 
	`buÁºay_gë
(&
dëached_buf„rs
, 
num
-1);

580 
	`KASSERT
(
b
->
b_èbÀödex
 =
num
-1);

581 
b
->
b_èbÀödex
 = 
INVALID_INDEX
;

584 
ªsu…
 = 
	`buÁºay_£tsize
(&
dëached_buf„rs
, 
num
-1);

585 
	`KASSERT
(
ªsu…
 == 0);

587  
b
;

590  
NULL
;

591 
	}
}

598 
	$buf„r_ö£π_dëached
(
buf
 *
b
)

600 
ªsu…
;

602 
	`KASSERT
(
b
->
b_©èched
 == 0);

603 
	`KASSERT
(
b
->
b_busy
 == 0);

604 
	`KASSERT
(
b
->
b_èbÀödex
 =
INVALID_INDEX
);

606 
ªsu…
 = 
	`buÁºay_add
(&
dëached_buf„rs
, 
b
, &b->
b_èbÀödex
);

608 
	`KASSERT
(
ªsu…
 == 0);

609 
	}
}

616 
	$buf„r_ªmove_©èched
(
buf
 *
b
, 
ex≥˘ed_busy
)

618 
ix
;

620 
	`KASSERT
(
b
->
b_©èched
 == 1);

621 
	`KASSERT
(
b
->
b_busy
 =
ex≥˘ed_busy
);

623 
ix
 = 
b
->
b_èbÀödex
;

625 
	`KASSERT
(
	`buÁºay_gë
(&
©èched_buf„rs
, 
ix
Ë=
b
);

628 
	`buÁºay_£t
(&
©èched_buf„rs
, 
ix
, 
NULL
);

629 
b
->
b_èbÀödex
 = 
INVALID_INDEX
;

632 i‡(
ix
 < 
©èched_buf„rs_fú°
) {

633 
©èched_buf„rs_fú°
 = 
ix
;

636 
©èched_buf„rs_cou¡
--;

637 
	}
}

644 
	$buf„r_ö£π_©èched
(
buf
 *
b
)

646 
num
;

647 
ªsu…
;

649 
	`KASSERT
(
b
->
b_©èched
 == 1);

650 
	`KASSERT
(
b
->
b_èbÀödex
 =
INVALID_INDEX
);

652 
num
 = 
	`buÁºay_num
(&
©èched_buf„rs
);

653 i‡(
num
 >
©èched_buf„rs_thªsh
) {

654 
	`com∑˘_©èched_buf„rs
();

657 
ªsu…
 = 
	`buÁºay_add
(&
©èched_buf„rs
, 
b
, &b->
b_èbÀödex
);

659 
	`KASSERT
(
ªsu…
 == 0);

660 
©èched_buf„rs_cou¡
++;

661 
	}
}

668 
	$buf„r_ªmove_dúty
(
buf
 *
b
)

670 
ix
;

672 
	`KASSERT
(
b
->
b_©èched
 == 1);

676 
ix
 = 
b
->
b_dútyödex
;

678 
	`KASSERT
(
	`buÁºay_gë
(&
dúty_buf„rs
, 
ix
Ë=
b
);

681 
	`buÁºay_£t
(&
dúty_buf„rs
, 
ix
, 
NULL
);

682 
b
->
b_dútyödex
 = 
INVALID_INDEX
;

685 i‡(
ix
 < 
dúty_buf„rs_fú°
) {

686 
dúty_buf„rs_fú°
 = 
ix
;

688 
	}
}

695 
	$buf„r_ö£π_dúty
(
buf
 *
b
)

697 
num
;

698 
ªsu…
;

700 
	`KASSERT
(
b
->
b_©èched
 == 1);

701 
	`KASSERT
(
b
->
b_busy
 == 1);

702 
	`KASSERT
(
b
->
b_dútyödex
 =
INVALID_INDEX
);

704 
num
 = 
	`buÁºay_num
(&
dúty_buf„rs
);

705 i‡(
num
 >
dúty_buf„rs_thªsh
) {

706 
	`com∑˘_dúty_buf„rs
();

709 
ªsu…
 = 
	`buÁºay_add
(&
dúty_buf„rs
, 
b
, &b->
b_dútyödex
);

711 
	`KASSERT
(
ªsu…
 == 0);

712 
	}
}

721 
buf
 *

722 
	$buf„r_¸óã
()

724 
buf
 *
b
;

725 
ªsu…
;

727 
ªsu…
 = 
	`¥óŒoˇã_buf„r_¨øys
(
num_tŸÆ_buf„rs
+1);

728 i‡(
ªsu…
) {

729  
NULL
;

732 
b
 = 
	`kmÆloc
((*b));

733 i‡(
b
 =
NULL
) {

734  
NULL
;

737 
b
->
b_d©a
 = 
	`kmÆloc
(
ONE_TRUE_BUFFER_SIZE
);

738 i‡(
b
->
b_d©a
 =
NULL
) {

739 
	`k‰ì
(
b
);

740  
NULL
;

743 
b
->
b_èbÀödex
 = 
INVALID_INDEX
;

744 
b
->
b_dútyödex
 = 
INVALID_INDEX
;

745 
b
->
b_buckëödex
 = 
INVALID_INDEX
;

746 
b
->
b_dútyïoch
 = 0;

747 
b
->
b_©èched
 = 0;

748 
b
->
b_busy
 = 0;

749 
b
->
b_vÆid
 = 0;

750 
b
->
b_dúty
 = 0;

751 
b
->
b_fsm™aged
 = 0;

752 
b
->
b_hﬁdî
 = 
NULL
;

753 
b
->
b_time°amp
.
tv_£c
 = 0;

754 
b
->
b_time°amp
.
tv_n£c
 = 0;

755 
b
->
b_fs
 = 
NULL
;

756 
b
->
b_physblock
 = 0;

757 
b
->
b_size
 = 
ONE_TRUE_BUFFER_SIZE
;

758 
b
->
b_fsd©a
 = 
NULL
;

759 
num_tŸÆ_buf„rs
++;

760  
b
;

761 
	}
}

768 
	$buf„r_©èch
(
buf
 *
b
, 
fs
 *fs, 
daddr_t
 
block
)

770 
ªsu…
;

772 
	`KASSERT
(
b
->
b_busy
 == 0);

773 
	`KASSERT
(
b
->
b_©èched
 == 0);

774 
	`KASSERT
(
b
->
b_vÆid
 == 0);

775 
	`KASSERT
(
b
->
b_busy
 == 0);

776 
	`KASSERT
(
b
->
b_fsd©a
 =
NULL
);

777 
b
->
b_©èched
 = 1;

778 
b
->
b_fs
 = 
fs
;

779 
b
->
b_physblock
 = 
block
;

781 
ªsu…
 = 
	`bufhash_add
(&
buf„r_hash
, 
b
);

782 i‡(
ªsu…
) {

783 
b
->
b_©èched
 = 0;

784 
b
->
b_fs
 = 
NULL
;

785 
b
->
b_physblock
 = 0;

786  
ªsu…
;

789 
	}
}

796 
	$buf„r_dëach
(
buf
 *
b
)

798 
	`KASSERT
(
b
->
b_©èched
 == 1);

799 
	`KASSERT
(
b
->
b_busy
 == 0);

800 
	`bufhash_ªmove
(&
buf„r_hash
, 
b
);

802 i‡(
b
->
b_fsd©a
 !
NULL
) {

803 
	`k¥ötf
("vfs: %sÜeft behind fs-specific buffer data\n",

804 
	`FSOP_GETVOLNAME
(
b
->
b_fs
));

805 
b
->
b_fsd©a
 = 
NULL
;

807 
b
->
b_©èched
 = 0;

808 
b
->
b_fs
 = 
NULL
;

809 
b
->
b_physblock
 = 0;

810 
	`cv_brﬂdˇ°
(
buf„r_busy_cv
, 
buf„r_lock
);

811 
	}
}

824 
	$buf„r_m¨k_busy
(
buf
 *
b
)

826 
fs
 *fs;

827 
daddr_t
 
block
;

829 
	`KASSERT
(
b
->
b_hﬁdî
 !
cuπhªad
);

830 
fs
 = 
b
->
b_fs
;

831 
block
 = 
b
->
b_physblock
;

832 
b
->
b_busy
) {

833 i‡(!
b
->
b_©èched
 || 
fs
 !b->
b_fs
 ||

834 
block
 !
b
->
b_physblock
) {

835  
EDEADBUF
;

837 
	`cv_waô
(
buf„r_busy_cv
, 
buf„r_lock
);

839 i‡(!
b
->
b_©èched
 || 
fs
 !b->
b_fs
 || 
block
 !b->
b_physblock
) {

840  
EDEADBUF
;

842 
b
->
b_busy
 = 1;

843 
	`KASSERT
(
b
->
b_fsm™aged
 == 0);

844 
b
->
b_hﬁdî
 = 
cuπhªad
;

845 
busy_buf„rs_cou¡
++;

847 
	}
}

854 
	$buf„r_unm¨k_busy
(
buf
 *
b
)

856 
	`KASSERT
(
b
->
b_busy
 != 0);

857 
b
->
b_busy
 = 0;

858 i‡(
b
->
b_fsm™aged
) {

859 
b
->
b_fsm™aged
 = 
Ál£
;

862 
	`KASSERT
(
b
->
b_hﬁdî
 =
cuπhªad
);

864 
b
->
b_hﬁdî
 = 
NULL
;

865 
busy_buf„rs_cou¡
--;

866 
	`cv_brﬂdˇ°
(
buf„r_busy_cv
, 
buf„r_lock
);

867 
	}
}

874 
	$buf„r_ªadö
(
buf
 *
b
)

876 
ªsu…
;

878 
	`KASSERT
(
	`lock_do_i_hﬁd
(
buf„r_lock
));

879 
	`KASSERT
(
b
->
b_©èched
);

880 
	`KASSERT
(
b
->
b_busy
);

881 
	`KASSERT
(
b
->
b_fs
 !
NULL
);

883 i‡(
b
->
b_vÆid
) {

887 
	`lock_ªÀa£
(
buf„r_lock
);

888 
ªsu…
 = 
	`FSOP_READBLOCK
(
b
->
b_fs
, b->
b_physblock
, b->
b_d©a
, b->
b_size
);

889 
	`lock_acquúe
(
buf„r_lock
);

890 i‡(
ªsu…
 == 0) {

891 
b
->
b_vÆid
 = 1;

893  
ªsu…
;

894 
	}
}

909 
	$buf„r_wrôeout_öã∫Æ
(
buf
 *
b
)

911 
ªsu…
;

913 
	`KASSERT
(
	`lock_do_i_hﬁd
(
buf„r_lock
));

914 
	`bufcheck
();

916 
	`KASSERT
(
b
->
b_©èched
);

917 
	`KASSERT
(
b
->
b_vÆid
);

918 
	`KASSERT
(
b
->
b_busy
);

919 
	`KASSERT
(
b
->
b_fs
 !
NULL
);

921 i‡(!
b
->
b_dúty
) {

925 
num_tŸÆ_wrôeouts
++;

926 
	`lock_ªÀa£
(
buf„r_lock
);

927 
ªsu…
 = 
	`FSOP_WRITEBLOCK
(
b
->
b_fs
, b->
b_physblock
, b->
b_fsd©a
,

928 
b
->
b_d©a
, b->
b_size
);

929 
	`lock_acquúe
(
buf„r_lock
);

930 i‡(
ªsu…
 == 0) {

931 
dúty_buf„rs_cou¡
--;

932 
b
->
b_dúty
 = 0;

933 
	`buf„r_ªmove_dúty
(
b
);

935  
ªsu…
;

936 
	}
}

939 
	$buf„r_wrôeout
(
buf
 *
b
)

941 
ªsu…
;

943 
	`lock_acquúe
(
buf„r_lock
);

944 
ªsu…
 = 
	`buf„r_wrôeout_öã∫Æ
(
b
);

945 
	`lock_ªÀa£
(
buf„r_lock
);

946  
ªsu…
;

947 
	}
}

955 
	$buf„r_m≠
(
buf
 *
b
)

957 
	`KASSERT
(
b
->
b_busy
);

958  
b
->
b_d©a
;

959 
	}
}

964 
boﬁ


965 
	$buf„r_is_dúty
(
buf
 *
b
)

967 
	`KASSERT
(
b
->
b_busy
);

968 
	`KASSERT
(
b
->
b_vÆid
);

970  
b
->
b_dúty
;

971 
	}
}

976 
boﬁ


977 
	$buf„r_is_vÆid
(
buf
 *
b
)

979 
	`KASSERT
(
b
->
b_busy
);

981  
b
->
b_vÆid
;

982 
	}
}

988 
	$buf„r_m¨k_dúty
(
buf
 *
b
)

990 
	`KASSERT
(
b
->
b_busy
);

991 
	`KASSERT
(
b
->
b_vÆid
);

993 
	`lock_acquúe
(
buf„r_lock
);

994 i‡(
b
->
b_dúty
) {

996 
	`lock_ªÀa£
(
buf„r_lock
);

1000 
b
->
b_dúty
 = 1;

1001 
b
->
b_dútyïoch
 = 
dúty_ïoch
;

1002 
	`gëtime
(&
b
->
b_time°amp
);

1006 
	`buf„r_ö£π_dúty
(
b
);

1007 
dúty_buf„rs_cou¡
++;

1009 
	`lock_ªÀa£
(
buf„r_lock
);

1010 
	}
}

1016 
	$buf„r_m¨k_vÆid
(
buf
 *
b
)

1018 
	`KASSERT
(
b
->
b_busy
);

1019 
b
->
b_vÆid
 = 1;

1020 
	}
}

1036 
	$buf„r_sync
(
buf
 *
b
)

1038 
ªsu…
;

1040 
	`KASSERT
(
b
->
b_vÆid
 == 1);

1041 
	`KASSERT
(
b
->
b_dúty
 == 1);

1043 i‡(
b
->
b_fsm™aged
) {

1044 
	`KASSERT
(
b
->
b_busy
);

1052 
ªsu…
 = 
	`buf„r_m¨k_busy
(
b
);

1053 i‡(
ªsu…
) {

1055  
ªsu…
;

1057 
	`KASSERT
(
b
->
b_vÆid
 == 1);

1058 i‡(!
b
->
b_dúty
) {

1060 
	`buf„r_unm¨k_busy
(
b
);

1064 
ªsu…
 = 
	`buf„r_wrôeout_öã∫Æ
(
b
);

1071 
	`KASSERT
(
ªsu…
 !
EDEADBUF
);

1073 
	`buf„r_unm¨k_busy
(
b
);

1075  
ªsu…
;

1076 
	}
}

1093 
	$sync_⁄e_ﬁd_buf„r
()

1095 
i
;

1096 
buf
 *
b
;

1097 
ªsu…
;

1099 
i
=0; i < 
	`buÁºay_num
(&
dúty_buf„rs
); i++) {

1100 
b
 = 
	`buÁºay_gë
(&
dúty_buf„rs
, 
i
);

1101 i‡(
b
 =
NULL
) {

1104 i‡(
b
->
b_fsm™aged
) {

1107 i‡(
b
->
b_busy
) {

1110 
	`KASSERT
(
b
->
b_dúty
);

1114 
ªsu…
 = 
	`buf„r_sync
(
b
);

1115 i‡(
ªsu…
) {

1117 
	`KASSERT
(
ªsu…
 !
EDEADBUF
);

1119 ()
ªsu…
;

1123 
	}
}

1133 
	$buf„r_˛ón
(
buf
 *
b
)

1135 
ªsu…
;

1137 
	`KASSERT
(
b
->
b_busy
 == 0);

1138 
ªsu…
 = 
	`buf„r_m¨k_busy
(
b
);

1140 
	`KASSERT
(
ªsu…
 == 0);

1142 
	`lock_ªÀa£
(
buf„r_lock
);

1143 
	`FSOP_DETACHBUF
(
b
->
b_fs
, b->
b_physblock
, b);

1144 
	`lock_acquúe
(
buf„r_lock
);

1145 
	`buf„r_unm¨k_busy
(
b
);

1147 
	`buf„r_ªmove_©èched
(
b
, 0);

1148 
b
->
b_vÆid
 = 0;

1149 i‡(
b
->
b_dúty
) {

1150 
b
->
b_dúty
 = 0;

1151 
dúty_buf„rs_cou¡
--;

1152 
	`buf„r_ªmove_dúty
(
b
);

1154 
	`buf„r_dëach
(
b
);

1155 
	}
}

1162 
	$buf„r_evi˘
(
buf
 **
ªt
)

1164 
num
, 
i
;

1165 
buf
 *
b
, *
db
;

1166 
ªsu…
;

1172 
åyagaö
:

1173 
num
 = 
	`buÁºay_num
(&
©èched_buf„rs
);

1174 
b
 = 
db
 = 
NULL
;

1175 
i
=0; i<
num
; i++) {

1176 i‡(
i
 >
num
/2 && 
db
 !
NULL
) {

1183 
b
 = 
	`buÁºay_gë
(&
©èched_buf„rs
, 
i
);

1184 i‡(
b
 =
NULL
) {

1187 i‡(
b
->
b_busy
 == 1) {

1188 
b
 = 
NULL
;

1192 
	`KASSERT
(
b
->
b_fsm™aged
 == 0);

1193 i‡(
b
->
b_dúty
 == 1) {

1194 i‡(
db
 =
NULL
) {

1196 
db
 = 
b
;

1198 
b
 = 
NULL
;

1203 i‡(
b
 =
NULL
 && 
db
 != NULL) {

1204 
b
 = 
db
;

1206 i‡(
b
 =
NULL
) {

1208 
	`k¥ötf
("buffer_evict:ÇoÅargets!?\n");

1209  
EAGAIN
;

1215 
num_tŸÆ_evi˘i⁄s
++;

1216 i‡(
b
->
b_dúty
) {

1217 
num_dúty_evi˘i⁄s
++;

1218 
	`KASSERT
(
b
->
b_busy
 == 0);

1220 
ªsu…
 = 
	`buf„r_sync
(
b
);

1221 i‡(
ªsu…
) {

1223 
	`KASSERT
(
ªsu…
 !
EDEADBUF
);

1226 
	`k¥ötf
("buffer_evict: warning: %s\n",

1227 
	`°ªº‹
(
ªsu…
));

1228 
	`buf„r_ªmove_©èched
(
b
, 0);

1229 
	`buf„r_ö£π_©èched
(
b
);

1230 
åyagaö
;

1234 
	`KASSERT
(
b
->
b_dúty
 == 0);

1240 
	`buf„r_˛ón
(
b
);

1242 *
ªt
 = 
b
;

1244 
	}
}

1247 
buf
 *

1248 
	$buf„r_föd
(
fs
 *fs, 
daddr_t
 
physblock
)

1250  
	`bufhash_gë
(&
buf„r_hash
, 
fs
, 
physblock
);

1251 
	}
}

1260 
	$buf„r_gë_öã∫Æ
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
, 
boﬁ
 
fsm™aged
,

1261 
buf
 **
ªt
)

1263 
buf
 *
b
;

1264 
ªsu…
;

1266 
	`KASSERT
(
	`lock_do_i_hﬁd
(
buf„r_lock
));

1267 
	`bufcheck
();

1269 
	`KASSERT
(
size
 =
ONE_TRUE_BUFFER_SIZE
);

1270 i‡(!
fsm™aged
) {

1271 
	`KASSERT
(
cuπhªad
->
t_did_ª£rve_buf„rs
 =
åue
);

1274 i‡(!
fsm™aged
 && 
syn˚r_√eds_hñp
) {

1275 
	`sync_⁄e_ﬁd_buf„r
();

1278 
num_tŸÆ_gës
++;

1280 
agaö
:

1281 
b
 = 
	`buf„r_föd
(
fs
, 
block
);

1282 i‡(
b
 !
NULL
) {

1283 
ªsu…
 = 
	`buf„r_m¨k_busy
(
b
);

1284 i‡(
ªsu…
) {

1285 
	`KASSERT
(
ªsu…
 =
EDEADBUF
);

1286 
agaö
;

1288 
num_vÆid_gës
++;

1289 
	`buf„r_ªmove_©èched
(
b
, 1);

1292 
	`buf„r_ö£π_©èched
(
b
);

1295 
b
 = 
	`buf„r_ªmove_dëached
();

1296 i‡(
b
 =
NULL
 && 
num_tŸÆ_buf„rs
 < 
max_tŸÆ_buf„rs
) {

1298 
b
 = 
	`buf„r_¸óã
();

1300 i‡(
b
 =
NULL
) {

1301 
ªsu…
 = 
	`buf„r_evi˘
(&
b
);

1302 i‡(
ªsu…
) {

1303  
ªsu…
;

1305 
	`KASSERT
(
b
 !
NULL
);

1308 
	`KASSERT
(
b
->
b_size
 =
ONE_TRUE_BUFFER_SIZE
);

1309 
ªsu…
 = 
	`buf„r_©èch
(
b
, 
fs
, 
block
);

1310 i‡(
ªsu…
) {

1311 
	`buf„r_ö£π_dëached
(
b
);

1312  
ªsu…
;

1314 
	`KASSERT
(
b
->
b_busy
 == 0);

1315 
ªsu…
 = 
	`buf„r_m¨k_busy
(
b
);

1317 
	`KASSERT
(
ªsu…
 == 0);

1320 
	`buf„r_ö£π_©èched
(
b
);

1336 
	`lock_ªÀa£
(
buf„r_lock
);

1337 
ªsu…
 = 
	`FSOP_ATTACHBUF
(
b
->
b_fs
, 
block
, b);

1338 
	`lock_acquúe
(
buf„r_lock
);

1339 i‡(
ªsu…
) {

1340 
	`buf„r_unm¨k_busy
(
b
);

1341 
	`buf„r_ö£π_dëached
(
b
);

1342  
ªsu…
;

1347 
	`KASSERT
(
b
->
b_fs
 =
fs
 && b->
b_physblock
 =
block
);

1350 i‡(
fsm™aged
) {

1351 
b
->
b_fsm™aged
 = 1;

1354 *
ªt
 = 
b
;

1356 
	}
}

1364 
	$buf„r_ªad_öã∫Æ
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
, 
boﬁ
 
fsm™aged
,

1365 
buf
 **
ªt
)

1367 
ªsu…
;

1369 
	`KASSERT
(
	`lock_do_i_hﬁd
(
buf„r_lock
));

1371 
ªsu…
 = 
	`buf„r_gë_öã∫Æ
(
fs
, 
block
, 
size
, 
fsm™aged
, 
ªt
);

1372 i‡(
ªsu…
) {

1373 
	`lock_ªÀa£
(
buf„r_lock
);

1374 *
ªt
 = 
NULL
;

1375  
ªsu…
;

1378 i‡(!(*
ªt
)->
b_vÆid
) {

1379 
num_ªad_gës
++;

1381 
ªsu…
 = 
	`buf„r_ªadö
(*
ªt
);

1382 i‡(
ªsu…
) {

1383 
	`buf„r_ªÀa£_öã∫Æ
(*
ªt
);

1384 *
ªt
 = 
NULL
;

1385  
ªsu…
;

1390 
	}
}

1397 
	$buf„r_gë
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
, 
buf
 **
ªt
)

1399 
ªsu…
;

1401 
	`lock_acquúe
(
buf„r_lock
);

1402 
ªsu…
 = 
	`buf„r_gë_öã∫Æ
(
fs
, 
block
, 
size
, 
Ál£
 , 
ªt
);

1403 
	`lock_ªÀa£
(
buf„r_lock
);

1405  
ªsu…
;

1406 
	}
}

1413 
	$buf„r_ªad
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
, 
buf
 **
ªt
)

1415 
ªsu…
;

1417 
	`lock_acquúe
(
buf„r_lock
);

1418 
ªsu…
 = 
	`buf„r_ªad_öã∫Æ
(
fs
, 
block
, 
size
, 
Ál£
 ,
ªt
);

1419 
	`lock_ªÀa£
(
buf„r_lock
);

1421  
ªsu…
;

1422 
	}
}

1428 
	$buf„r_gë_fsm™aged
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
,

1429 
buf
 **
ªt
)

1431 
ªsu…
;

1433 
	`lock_acquúe
(
buf„r_lock
);

1434 
ªsu…
 = 
	`buf„r_gë_öã∫Æ
(
fs
, 
block
, 
size
, 
åue
 , 
ªt
);

1435 
	`lock_ªÀa£
(
buf„r_lock
);

1437  
ªsu…
;

1438 
	}
}

1444 
	$buf„r_ªad_fsm™aged
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
,

1445 
buf
 **
ªt
)

1447 
ªsu…
;

1449 
	`lock_acquúe
(
buf„r_lock
);

1450 
ªsu…
 = 
	`buf„r_ªad_öã∫Æ
(
fs
, 
block
, 
size
, 
åue
 , 
ªt
);

1451 
	`lock_ªÀa£
(
buf„r_lock
);

1453  
ªsu…
;

1454 
	}
}

1465 
	$buf„r_Êush
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
)

1467 
buf
 *
b
;

1468 
ªsu…
 = 0;

1470 
	`lock_acquúe
(
buf„r_lock
);

1471 
	`bufcheck
();

1473 
	`KASSERT
(
size
 =
ONE_TRUE_BUFFER_SIZE
);

1475 
b
 = 
	`buf„r_föd
(
fs
, 
block
);

1476 i‡(
b
 =
NULL
) {

1477 
d⁄e
;

1479 
	`KASSERT
(
b
->
b_vÆid
);

1481 i‡(!
b
->
b_dúty
) {

1483 
d⁄e
;

1486 
ªsu…
 = 
	`buf„r_m¨k_busy
(
b
);

1487 i‡(
ªsu…
) {

1488 
	`KASSERT
(
ªsu…
 =
EDEADBUF
);

1490 
ªsu…
 = 0;

1491 
d⁄e
;

1494 i‡(!
b
->
b_dúty
) {

1496 
	`buf„r_unm¨k_busy
(
b
);

1497 
d⁄e
;

1501 
	`KASSERT
(
b
->
b_fs
 =
fs
 && b->
b_physblock
 =
block
);

1503 
ªsu…
 = 
	`buf„r_wrôeout_öã∫Æ
(
b
);

1505 
	`KASSERT
(
ªsu…
 !
EDEADBUF
);

1507 
	`buf„r_unm¨k_busy
(
b
);

1508 
d⁄e
:

1509 
	`lock_ªÀa£
(
buf„r_lock
);

1510  
ªsu…
;

1511 
	}
}

1518 
	$buf„r_dr›
(
fs
 *fs, 
daddr_t
 
block
, 
size_t
 
size
)

1520 
buf
 *
b
;

1521 
ªsu…
;

1523 
	`lock_acquúe
(
buf„r_lock
);

1524 
	`bufcheck
();

1526 
	`KASSERT
(
size
 =
ONE_TRUE_BUFFER_SIZE
);

1528 
b
 = 
	`buf„r_föd
(
fs
, 
block
);

1529 i‡(
b
 !
NULL
) {

1536 
ªsu…
 = 
	`buf„r_m¨k_busy
(
b
);

1537 i‡(
ªsu…
 =
EDEADBUF
) {

1539 
	`lock_ªÀa£
(
buf„r_lock
);

1542 
	`KASSERT
(
ªsu…
 == 0);

1543 
	`buf„r_unm¨k_busy
(
b
);

1545 
	`buf„r_˛ón
(
b
);

1546 
	`buf„r_ö£π_dëached
(
b
);

1548 
	`lock_ªÀa£
(
buf„r_lock
);

1549 
	}
}

1553 
	$buf„r_ªÀa£_öã∫Æ
(
buf
 *
b
)

1555 
	`KASSERT
(
	`lock_do_i_hﬁd
(
buf„r_lock
));

1556 
	`bufcheck
();

1558 i‡(!
b
->
b_fsm™aged
) {

1560 
	`KASSERT
(
cuπhªad
->
t_did_ª£rve_buf„rs
 =
åue
);

1563 
	`buf„r_unm¨k_busy
(
b
);

1565 i‡(!
b
->
b_vÆid
) {

1567 
	`buf„r_˛ón
(
b
);

1568 
	`buf„r_ö£π_dëached
(
b
);

1572 
	`buf„r_ªmove_©èched
(
b
, 0);

1573 
	`buf„r_ö£π_©èched
(
b
);

1575 
	}
}

1581 
	$buf„r_ªÀa£
(
buf
 *
b
)

1583 
	`lock_acquúe
(
buf„r_lock
);

1584 
	`buf„r_ªÀa£_öã∫Æ
(
b
);

1585 
	`lock_ªÀa£
(
buf„r_lock
);

1586 
	}
}

1592 
	$buf„r_ªÀa£_™d_övÆid©e
(
buf
 *
b
)

1594 
	`lock_acquúe
(
buf„r_lock
);

1595 
	`bufcheck
();

1597 
b
->
b_vÆid
 = 0;

1598 
	`buf„r_ªÀa£_öã∫Æ
(
b
);

1599 
	`lock_ªÀa£
(
buf„r_lock
);

1600 
	}
}

1606 
	$buf„r_gë_fsd©a
(
buf
 *buf)

1608  
buf
->
b_fsd©a
;

1609 
	}
}

1612 
	$buf„r_£t_fsd©a
(
buf
 *buf, *
√wfsd
)

1614 *
ﬁdfsd
;

1616 
ﬁdfsd
 = 
buf
->
b_fsd©a
;

1617 
buf
->
b_fsd©a
 = 
√wfsd
;

1618  
ﬁdfsd
;

1619 
	}
}

1625 
	$sync_fs_buf„rs
(
fs
 *fs)

1627 
i
;

1628 
buf
 *
b
;

1629 
my_ïoch
, 
my_gíî©i⁄
;

1630 
ªsu…
;

1632 
	`lock_acquúe
(
buf„r_lock
);

1633 
	`bufcheck
();

1635 
my_ïoch
 = 
dúty_ïoch
++;

1636 i‡(
dúty_ïoch
 == 0) {

1642 
	`∑nic
("vfs: buffer cache syncerÉpoch wrappedáround\n");

1645 
my_gíî©i⁄
 = 
dúty_buf„rs_gíî©i⁄
;

1648 
i
=0; i<
	`buÁºay_num
(&
dúty_buf„rs
); i++) {

1649 
b
 = 
	`buÁºay_gë
(&
dúty_buf„rs
, 
i
);

1650 i‡(
b
 =
NULL
 || b->
b_fs
 !
fs
) {

1653 i‡(
b
->
b_dútyïoch
 > 
my_ïoch
) {

1663 
	`KASSERT
(
b
->
b_vÆid
);

1664 
	`KASSERT
(
b
->
b_dúty
);

1667 
ªsu…
 = 
	`buf„r_sync
(
b
);

1668 i‡(
ªsu…
 =
EDEADBUF
) {

1675 i‡(
ªsu…
) {

1676 
	`lock_ªÀa£
(
buf„r_lock
);

1677  
ªsu…
;

1680 i‡(
my_gíî©i⁄
 !
dúty_buf„rs_gíî©i⁄
) {

1682 
i
 = 0;

1683 
my_gíî©i⁄
 = 
dúty_buf„rs_gíî©i⁄
;

1685 
i
--;

1689 
	`lock_ªÀa£
(
buf„r_lock
);

1691 
	}
}

1705 
	$dr›_fs_buf„rs
(
fs
 *fs)

1707 
i
;

1708 
buf
 *
b
;

1709 
my_gíî©i⁄
;

1711 
	`lock_acquúe
(
buf„r_lock
);

1712 
	`bufcheck
();

1714 
my_gíî©i⁄
 = 
©èched_buf„rs_gíî©i⁄
;

1716 
i
=0; i<
	`buÁºay_num
(&
©èched_buf„rs
); i++) {

1717 
b
 = 
	`buÁºay_gë
(&
©èched_buf„rs
, 
i
);

1718 i‡(
b
 =
NULL
 || b->
b_fs
 !
fs
) {

1722 
	`KASSERT
(
b
->
b_vÆid
);

1723 i‡(
b
->
b_dúty
) {

1724 
	`∑nic
("drop_fs_buffers: buffer didÇot get synced\n");

1726 i‡(
b
->
b_busy
) {

1727 
	`∑nic
("drop_fs_buffers: buffer is busy\n");

1730 
	`buf„r_˛ón
(
b
);

1731 
	`buf„r_ö£π_dëached
(
b
);

1733 i‡(
my_gíî©i⁄
 !
©èched_buf„rs_gíî©i⁄
) {

1735 
i
 = 0;

1736 
my_gíî©i⁄
 = 
©èched_buf„rs_gíî©i⁄
;

1738 
i
--;

1742 
	`lock_ªÀa£
(
buf„r_lock
);

1743 
	}
}

1796 
boﬁ


1797 
	$sync_Ãu_buf„rs
()

1799 
time•ec
 
°¨ãd
, 
now
, 
age
;

1800 
sync_Æways
;

1801 
sync_ifﬁd
;

1802 
£íbuf„rs
;

1803 
my_gíî©i⁄
;

1804 
lo›s
;

1805 
i
;

1806 
buf
 *
b
;

1807 
boﬁ
 
föished
;

1808 
ªsu…
;

1810 
	`KASSERT
(
	`lock_do_i_hﬁd
(
buf„r_lock
));

1811 
	`bufcheck
();

1812 
	`KASSERT
(
dúty_buf„rs_cou¡
 > 0);

1814 
	`gëtime
(&
°¨ãd
);

1815 
föished
 = 
Ál£
;

1817 
sync_Æways
 = 
	`SCALE
(
max_tŸÆ_buf„rs
, 
SYNCER_ALWAYS
);

1818 
sync_ifﬁd
 = 
	`SCALE
(
max_tŸÆ_buf„rs
, 
SYNCER_IFOLD
);

1819 
£íbuf„rs
 = 0;

1825 
£íbuf„rs
 +
max_tŸÆ_buf„rs
 - 
num_tŸÆ_buf„rs
;

1827 
my_gíî©i⁄
 = 
©èched_buf„rs_gíî©i⁄
;

1828 
lo›s
 = 0;

1829 
i
 = 0;

1832 i‡(
i
 >
	`buÁºay_num
(&
©èched_buf„rs
)) {

1834 
föished
 = 
åue
;

1837 i‡(
£íbuf„rs
 >
sync_ifﬁd
) {

1839 
föished
 = 
åue
;

1843 
b
 = 
	`buÁºay_gë
(&
©èched_buf„rs
, 
i
);

1844 
i
++;

1845 i‡(
b
 =
NULL
) {

1848 
£íbuf„rs
++;

1849 i‡(!
b
->
b_dúty
) {

1853 
	`gëtime
(&
now
);

1854 
	`time•ec_sub
(&
°¨ãd
, &
now
, &
age
);

1855 i‡(
age
.
tv_£c
 > 0) {

1863 i‡(
£íbuf„rs
 >
sync_Æways
) {

1864 
	`time•ec_sub
(&
now
, &
b
->
b_time°amp
, &
age
);

1865 i‡(
age
.
tv_£c
 < 1) {

1872 
ªsu…
 = 
	`buf„r_sync
(
b
);

1873 i‡(
ªsu…
 =
EDEADBUF
) {

1880 i‡(
ªsu…
) {

1885 
	`k¥ötf
("syncer: %s: block %u: Warning: %s\n",

1886 
	`FSOP_GETVOLNAME
(
b
->
b_fs
), b->
b_physblock
,

1887 
	`°ªº‹
(
ªsu…
));

1890 i‡(
my_gíî©i⁄
 !
©èched_buf„rs_gíî©i⁄
) {

1892 
lo›s
++;

1893 i‡(
lo›s
 > 15) {

1897 
i
 = 0;

1898 
£íbuf„rs
 = 0;

1899 
£íbuf„rs
 +
max_tŸÆ_buf„rs
 - 
num_tŸÆ_buf„rs
;

1900 
my_gíî©i⁄
 = 
©èched_buf„rs_gíî©i⁄
;

1904  
föished
;

1905 
	}
}

1913 
	$syn˚r_adju°_°©e
(
age
)

1915 
	`COMPILE_ASSERT
(
SYNCER_LOAD_AGE
 < 
SYNCER_HELP_AGE
);

1917 i‡(
age
 >
SYNCER_HELP_AGE
) {

1923 i‡(!
syn˚r_undî_lﬂd
) {

1924 
syn˚r_undî_lﬂd
 = 
åue
;

1926 i‡(!
syn˚r_√eds_hñp
) {

1927 
syn˚r_√eds_hñp
 = 
åue
;

1928 #ifde‡
SYNCER_VERBOSE


1929 
	`k¥ötf
("syncer: under heavyÜoad\n");

1933 i‡(
age
 >
SYNCER_LOAD_AGE
) {

1934 i‡(
syn˚r_√eds_hñp
) {

1935 
	`KASSERT
(
syn˚r_undî_lﬂd
);

1936 
syn˚r_√eds_hñp
 = 
Ál£
;

1937 #ifde‡
SYNCER_VERBOSE


1938 
	`k¥ötf
("syncer: underÜoad\n");

1941 i‡(!
syn˚r_undî_lﬂd
) {

1942 
syn˚r_undî_lﬂd
 = 
åue
;

1943 #ifde‡
SYNCER_VERBOSE


1944 
	`k¥ötf
("syncer: underÜoad\n");

1949 i‡(
syn˚r_√eds_hñp
) {

1950 
	`KASSERT
(
syn˚r_undî_lﬂd
);

1951 
syn˚r_√eds_hñp
 = 
Ál£
;

1953 i‡(
syn˚r_undî_lﬂd
) {

1954 
syn˚r_undî_lﬂd
 = 
Ál£
;

1955 #ifde‡
SYNCER_VERBOSE


1956 
	`k¥ötf
("syncer:Çormal state\n");

1960 
	}
}

1968 
boﬁ


1969 
	$sync_ﬁd_buf„rs
()

1971 
time•ec
 
°¨ãd
, 
now
, 
age
;

1972 
my_gíî©i⁄
;

1973 
i
;

1974 
buf
 *
b
;

1975 
boﬁ
 
föished
;

1976 
ªsu…
;

1978 
	`KASSERT
(
	`lock_do_i_hﬁd
(
buf„r_lock
));

1979 
	`bufcheck
();

1980 
	`KASSERT
(
dúty_buf„rs_cou¡
 > 0);

1982 
	`gëtime
(&
°¨ãd
);

1983 
föished
 = 
Ál£
;

1985 
my_gíî©i⁄
 = 
dúty_buf„rs_gíî©i⁄
;

1986 
i
 = 0;

1989 i‡(
i
 >
	`buÁºay_num
(&
dúty_buf„rs
)) {

1990 
föished
 = 
åue
;

1993 
b
 = 
	`buÁºay_gë
(&
dúty_buf„rs
, 
i
);

1994 
i
++;

1995 i‡(
b
 =
NULL
) {

1998 
	`KASSERT
(
b
->
b_dúty
);

1999 
	`gëtime
(&
now
);

2000 
	`time•ec_sub
(&
°¨ãd
, &
now
, &
age
);

2001 i‡(
age
.
tv_£c
 > 0) {

2008 
	`time•ec_sub
(&
now
, &
b
->
b_time°amp
, &
age
);

2009 i‡(
age
.
tv_£c
 < 
SYNCER_TARGET_AGE
) {

2017 
föished
 = 
åue
;

2022 
	`syn˚r_adju°_°©e
(
age
.
tv_£c
);

2024 
ªsu…
 = 
	`buf„r_sync
(
b
);

2025 i‡(
ªsu…
 =
EDEADBUF
) {

2028 i‡(
ªsu…
) {

2033 
	`k¥ötf
("syncer: %s: block %u: Warning: %s\n",

2034 
	`FSOP_GETVOLNAME
(
b
->
b_fs
), b->
b_physblock
,

2035 
	`°ªº‹
(
ªsu…
));

2038 i‡(
my_gíî©i⁄
 !
dúty_buf„rs_gíî©i⁄
) {

2040 
i
 = 0;

2041 
my_gíî©i⁄
 = 
dúty_buf„rs_gíî©i⁄
;

2045 i‡(
föished
 && 
syn˚r_undî_lﬂd
) {

2047 
	`syn˚r_adju°_°©e
(0);

2049  
föished
;

2050 
	}
}

2060 
	$syn˚r
(*
x1
, 
x2
)

2062 
boﬁ
 
Ãu_föished
, 
ﬁd_föished
;

2064 ()
x1
;

2065 ()
x2
;

2067 
	`lock_acquúe
(
buf„r_lock
);

2068 
syn˚r_thªad
 = 
cuπhªad
;

2070 
Ãu_föished
 = 
åue
;

2071 
ﬁd_föished
 = 
åue
;

2073 i‡(
Ãu_föished
 && 
ﬁd_föished
) {

2074 
	`lock_ªÀa£
(
buf„r_lock
);

2075 
	`˛ock¶ìp
(1);

2076 
	`lock_acquúe
(
buf„r_lock
);

2079 i‡(
syn˚r_√eds_hñp
) {

2080 
ﬁd_föished
 = 
	`sync_ﬁd_buf„rs
();

2081 
Ãu_föished
 = 
Ál£
;

2083 i‡(
syn˚r_undî_lﬂd
) {

2084 
ﬁd_föished
 = 
	`sync_ﬁd_buf„rs
();

2085 
Ãu_föished
 = 
	`sync_Ãu_buf„rs
();

2087 i‡(
dúty_buf„rs_cou¡
 > 0) {

2088 
Ãu_föished
 = 
	`sync_Ãu_buf„rs
();

2089 
ﬁd_föished
 = 
	`sync_ﬁd_buf„rs
();

2092 
Ãu_föished
 = 
åue
;

2093 
ﬁd_föished
 = 
åue
;

2096 
syn˚r_thªad
 = 
NULL
;

2097 
	`lock_ªÀa£
(
buf„r_lock
);

2098 
	}
}

2122 
	$ª£rve_buf„rs
(
size_t
 
size
)

2124 
cou¡
 = 
RESERVE_BUFFERS
;

2126 
	`lock_acquúe
(
buf„r_lock
);

2127 
	`bufcheck
();

2129 
	`KASSERT
(
size
 =
ONE_TRUE_BUFFER_SIZE
);

2132 
	`KASSERT
(
cuπhªad
->
t_did_ª£rve_buf„rs
 =
Ál£
);

2134 
num_ª£rved_buf„rs
 + 
cou¡
 > 
max_tŸÆ_buf„rs
) {

2135 
	`cv_waô
(
buf„r_ª£rve_cv
, 
buf„r_lock
);

2137 
num_ª£rved_buf„rs
 +
cou¡
;

2138 
cuπhªad
->
t_did_ª£rve_buf„rs
 = 
åue
;

2139 
	`lock_ªÀa£
(
buf„r_lock
);

2140 
	}
}

2146 
	$uƒe£rve_buf„rs
(
size_t
 
size
)

2148 
cou¡
 = 
RESERVE_BUFFERS
;

2150 
	`lock_acquúe
(
buf„r_lock
);

2151 
	`bufcheck
();

2153 
	`KASSERT
(
size
 =
ONE_TRUE_BUFFER_SIZE
);

2155 
	`KASSERT
(
cuπhªad
->
t_did_ª£rve_buf„rs
 =
åue
);

2156 
	`KASSERT
(
cou¡
 <
num_ª£rved_buf„rs
);

2158 
cuπhªad
->
t_did_ª£rve_buf„rs
 = 
Ál£
;

2159 
num_ª£rved_buf„rs
 -
cou¡
;

2160 
	`cv_brﬂdˇ°
(
buf„r_ª£rve_cv
, 
buf„r_lock
);

2162 
	`lock_ªÀa£
(
buf„r_lock
);

2163 
	}
}

2166 
	$ª£rve_fsm™aged_buf„rs
(
cou¡
, 
size_t
 
size
)

2168 
	`lock_acquúe
(
buf„r_lock
);

2169 
	`bufcheck
();

2171 
	`KASSERT
(
size
 =
ONE_TRUE_BUFFER_SIZE
);

2173 
num_ª£rved_buf„rs
 + 
cou¡
 > 
max_tŸÆ_buf„rs
) {

2174 
	`cv_waô
(
buf„r_ª£rve_cv
, 
buf„r_lock
);

2176 
num_ª£rved_buf„rs
 +
cou¡
;

2177 
	`lock_ªÀa£
(
buf„r_lock
);

2178 
	}
}

2181 
	$uƒe£rve_fsm™aged_buf„rs
(
cou¡
, 
size_t
 
size
)

2183 
	`lock_acquúe
(
buf„r_lock
);

2184 
	`bufcheck
();

2186 
	`KASSERT
(
size
 =
ONE_TRUE_BUFFER_SIZE
);

2187 
	`KASSERT
(
cou¡
 <
num_ª£rved_buf„rs
);

2189 
num_ª£rved_buf„rs
 -
cou¡
;

2190 
	`cv_brﬂdˇ°
(
buf„r_ª£rve_cv
, 
buf„r_lock
);

2192 
	`lock_ªÀa£
(
buf„r_lock
);

2193 
	}
}

2199 
	$buf„r_¥öt°©s
()

2201 
	`lock_acquúe
(
buf„r_lock
);

2203 
	`k¥ötf
("Buffers: %u of %uállocated\n",

2204 
num_tŸÆ_buf„rs
, 
max_tŸÆ_buf„rs
);

2205 
	`k¥ötf
(" %u detached, %uáttached\n",

2206 
	`buÁºay_num
(&
dëached_buf„rs
), 
©èched_buf„rs_cou¡
);

2207 
	`k¥ötf
(" %uÑe£rved\n", 
num_ª£rved_buf„rs
);

2208 
	`k¥ötf
(" %u busy\n", 
busy_buf„rs_cou¡
);

2209 
	`k¥ötf
(" %u dúty\n", 
dúty_buf„rs_cou¡
);

2211 
	`k¥ötf
("Buffer operations:\n");

2212 
	`k¥ötf
(" %u gets (%u hits, %uÑeads)\n",

2213 
num_tŸÆ_gës
, 
num_vÆid_gës
, 
num_ªad_gës
);

2214 
	`k¥ötf
(" %u writeouts\n",

2215 
num_tŸÆ_wrôeouts
);

2216 
	`k¥ötf
(" %uÉvictions (%u when dirty)\n",

2217 
num_tŸÆ_evi˘i⁄s
, 
num_dúty_evi˘i⁄s
);

2219 
	`lock_ªÀa£
(
buf„r_lock
);

2220 
	}
}

2226 
	$buf„r_boŸ°øp
()

2228 
size_t
 
max_buf„r_mem
;

2229 
ªsu…
;

2231 
©èched_buf„rs_cou¡
 = 0;

2232 
dúty_buf„rs_cou¡
 = 0;

2234 
num_ª£rved_buf„rs
 = 0;

2235 
num_tŸÆ_buf„rs
 = 0;

2238 
max_buf„r_mem
 =

2239 (
	`maöbus_ømsize
(Ë* 
BUFFER_MAXMEM_NUM
Ë/ 
BUFFER_MAXMEM_DENOM
;

2240 
max_tŸÆ_buf„rs
 = 
max_buf„r_mem
 / 
ONE_TRUE_BUFFER_SIZE
;

2242 
	`k¥ötf
("buffers: max count %lu; max size %luk\n",

2243 (Ë
max_tŸÆ_buf„rs
,

2244 (Ë
max_buf„r_mem
/1024);

2246 
num_tŸÆ_gës
 = 0;

2247 
num_vÆid_gës
 = 0;

2248 
num_ªad_gës
 = 0;

2249 
num_tŸÆ_wrôeouts
 = 0;

2250 
num_tŸÆ_evi˘i⁄s
 = 0;

2251 
num_dúty_evi˘i⁄s
 = 0;

2253 
	`buÁºay_öô
(&
dëached_buf„rs
);

2254 
	`buÁºay_öô
(&
©èched_buf„rs
);

2255 
	`buÁºay_öô
(&
dúty_buf„rs
);

2256 
©èched_buf„rs_fú°
 = 0;

2257 
©èched_buf„rs_thªsh
 = 0;

2258 
dúty_buf„rs_fú°
 = 0;

2259 
dúty_buf„rs_thªsh
 = 0;

2261 
ªsu…
 = 
	`bufhash_öô
(&
buf„r_hash
, 
max_tŸÆ_buf„rs
/16);

2262 i‡(
ªsu…
) {

2263 
	`∑nic
("Creating buffer_hash failed\n");

2266 
buf„r_lock
 = 
	`lock_¸óã
("buffer cacheÜock");

2267 i‡(
buf„r_lock
 =
NULL
) {

2268 
	`∑nic
("Creating buffer cacheÜock failed\n");

2271 
buf„r_busy_cv
 = 
	`cv_¸óã
("bufbusy");

2272 i‡(
buf„r_busy_cv
 =
NULL
) {

2273 
	`∑nic
("Creating buffer_busy_cv failed\n");

2276 
buf„r_ª£rve_cv
 = 
	`cv_¸óã
("bufreserve");

2277 i‡(
buf„r_ª£rve_cv
 =
NULL
) {

2278 
	`∑nic
("Creating buffer_reserve_cv failed\n");

2281 
ªsu…
 = 
	`thªad_f‹k
("syn˚r", 
NULL
, 
syn˚r
, NULL, 0);

2282 i‡(
ªsu…
) {

2283 
	`∑nic
("Starting syncer failed\n");

2285 
	}
}

	@vfs/device.c

36 
	~<ty≥s.h
>

37 
	~<kîn/î∫o.h
>

38 
	~<kîn/f˙é.h
>

39 
	~<°©.h
>

40 
	~<lib.h
>

41 
	~<uio.h
>

42 
	~<synch.h
>

43 
	~<vnode.h
>

44 
	~<devi˚.h
>

53 
	$dev_óch›í
(
vnode
 *
v
, 
Êags
)

55 
devi˚
 *
d
 = 
v
->
vn_d©a
;

57 i‡(
Êags
 & (
O_CREAT
 | 
O_TRUNC
 | 
O_EXCL
 | 
O_APPEND
)) {

58  
EINVAL
;

61  
	`DEVOP_EACHOPEN
(
d
, 
Êags
);

62 
	}
}

70 
	$dev_ª˛aim
(
vnode
 *
v
)

72 ()
v
;

75 
	}
}

86 
	$dev_åy£ek
(
devi˚
 *
d
, 
off_t
 
pos
)

88 i‡(
d
->
d_blocks
 > 0) {

89 i‡((
pos
 % 
d
->
d_blocksize
)!=0) {

91  
EINVAL
;

93 i‡(
pos
 / 
d
->
d_blocksize
 >d->
d_blocks
) {

95  
EINVAL
;

102 
	}
}

109 
	$dev_ªad
(
vnode
 *
v
, 
uio
 *uio)

111 
devi˚
 *
d
 = 
v
->
vn_d©a
;

112 
ªsu…
;

114 
ªsu…
 = 
	`dev_åy£ek
(
d
, 
uio
->
uio_off£t
);

115 i‡(
ªsu…
) {

116  
ªsu…
;

119 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_READ
);

120  
	`DEVOP_IO
(
d
, 
uio
);

121 
	}
}

128 
	$dev_wrôe
(
vnode
 *
v
, 
uio
 *uio)

130 
devi˚
 *
d
 = 
v
->
vn_d©a
;

131 
ªsu…
;

133 
ªsu…
 = 
	`dev_åy£ek
(
d
, 
uio
->
uio_off£t
);

134 i‡(
ªsu…
) {

135  
ªsu…
;

138 
	`KASSERT
(
uio
->
uio_rw
 =
UIO_WRITE
);

139  
	`DEVOP_IO
(
d
, 
uio
);

140 
	}
}

147 
	$dev_io˘l
(
vnode
 *
v
, 
›
, 
u£Ωå_t
 
d©a
)

149 
devi˚
 *
d
 = 
v
->
vn_d©a
;

150  
	`DEVOP_IOCTL
(
d
, 
›
, 
d©a
);

151 
	}
}

160 
	$dev_°©
(
vnode
 *
v
, 
°©
 *
°©buf
)

162 
devi˚
 *
d
 = 
v
->
vn_d©a
;

163 
ªsu…
;

165 
	`bzîo
(
°©buf
, (
°©
));

167 i‡(
d
->
d_blocks
 > 0) {

168 
°©buf
->
°_size
 = 
d
->
d_blocks
 * d->
d_blocksize
;

169 
°©buf
->
°_blksize
 = 
d
->
d_blocksize
;

172 
°©buf
->
°_size
 = 0;

175 
ªsu…
 = 
	`VOP_GETTYPE
(
v
, &
°©buf
->
°_mode
);

176 i‡(
ªsu…
) {

177  
ªsu…
;

180 
°©buf
->
°_mode
 |= 0600;

182 
°©buf
->
°_∆ök
 = 1;

183 
°©buf
->
°_blocks
 = 
d
->
d_blocks
;

186 
°©buf
->
°_dev
 = 0;

189 
°©buf
->
°_rdev
 = 
d
->
d_devnumbî
;

192 
	}
}

201 
	$dev_gëty≥
(
vnode
 *
v
, 
mode_t
 *
ªt
)

203 
devi˚
 *
d
 = 
v
->
vn_d©a
;

204 i‡(
d
->
d_blocks
 > 0) {

205 *
ªt
 = 
S_IFBLK
;

208 *
ªt
 = 
S_IFCHR
;

211 
	}
}

217 
boﬁ


218 
	$dev_is£ekabÀ
(
vnode
 *
v
)

220 
devi˚
 *
d
 = 
v
->
vn_d©a
;

222 i‡(
d
->
d_blocks
 == 0) {

223  
Ál£
;

225  
åue
;

226 
	}
}

233 
	$nuŒ_fsync
(
vnode
 *
v
)

235 ()
v
;

237 
	}
}

245 
	$dev_mm≠
(
vnode
 *
v
 )

247 ()
v
;

248  
ENOSYS
;

249 
	}
}

256 
	$dev_åunˇã
(
vnode
 *
v
, 
off_t
 
Àn
)

258 
devi˚
 *
d
 = 
v
->
vn_d©a
;

263 i‡(
d
->
d_blocks
 > 0 && (
off_t
)(d->d_blocks*d->
d_blocksize
Ë=
Àn
) {

267  
EINVAL
;

268 
	}
}

278 
	$dev_«mefûe
(
vnode
 *
v
, 
uio
 *uio)

286 ()
v
;

287 ()
uio
;

290 
	}
}

306 
	$dev_lookup
(
vnode
 *
dú
,

307 *
∑th«me
, 
vnode
 **
ªsu…
)

314 i‡(
	`°æí
(
∑th«me
)>0) {

315  
ENOENT
;

317 
	`VOP_INCREF
(
dú
);

318 *
ªsu…
 = 
dú
;

320 
	}
}

325 c⁄° 
vnode_›s
 
	gdev_vnode_›s
 = {

326 .
v›_magic
 = 
VOP_MAGIC
,

328 .
	gv›_óch›í
 = 
dev_óch›í
,

329 .
	gv›_ª˛aim
 = 
dev_ª˛aim
,

330 .
	gv›_ªad
 = 
dev_ªad
,

331 .
	gv›_ªadlök
 = 
v›Áû_uio_övÆ
,

332 .
	gv›_gëdúíåy
 = 
v›Áû_uio_nŸdú
,

333 .
	gv›_wrôe
 = 
dev_wrôe
,

334 .
	gv›_io˘l
 = 
dev_io˘l
,

335 .
	gv›_°©
 = 
dev_°©
,

336 .
	gv›_gëty≥
 = 
dev_gëty≥
,

337 .
	gv›_is£ekabÀ
 = 
dev_is£ekabÀ
,

338 .
	gv›_fsync
 = 
nuŒ_fsync
,

339 .
	gv›_mm≠
 = 
dev_mm≠
,

340 .
	gv›_åunˇã
 = 
dev_åunˇã
,

341 .
	gv›_«mefûe
 = 
dev_«mefûe
,

342 .
	gv›_¸ót
 = 
v›Áû_¸ót_nŸdú
,

343 .
	gv›_symlök
 = 
v›Áû_symlök_nŸdú
,

344 .
	gv›_mkdú
 = 
v›Áû_mkdú_nŸdú
,

345 .
	gv›_lök
 = 
v›Áû_lök_nŸdú
,

346 .
	gv›_ªmove
 = 
v›Áû_°rög_nŸdú
,

347 .
	gv›_rmdú
 = 
v›Áû_°rög_nŸdú
,

348 .
	gv›_ª«me
 = 
v›Áû_ª«me_nŸdú
,

349 .
	gv›_lookup
 = 
dev_lookup
,

350 .
	gv›_look∑ª¡
 = 
v›Áû_look∑ª¡_nŸdú
,

356 
vnode
 *

357 
	$dev_¸óã_vnode
(
devi˚
 *
dev
)

359 
ªsu…
;

360 
vnode
 *
v
;

362 
v
 = 
	`kmÆloc
((
vnode
));

363 i‡(
v
==
NULL
) {

364  
NULL
;

367 
ªsu…
 = 
	`vnode_öô
(
v
, &
dev_vnode_›s
, 
NULL
, 
dev
);

368 i‡(
ªsu…
 != 0) {

369 
	`∑nic
("While creating vnode for device: vnode_init: %s\n",

370 
	`°ªº‹
(
ªsu…
));

373  
v
;

374 
	}
}

383 
	$dev_un¸óã_vnode
(
vnode
 *
vn
)

385 
	`KASSERT
(
vn
->
vn_›s
 =&
dev_vnode_›s
);

386 
	`vnode_˛ónup
(
vn
);

387 
	`k‰ì
(
vn
);

388 
	}
}

	@vfs/devnull.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<lib.h
>

37 
	~<uio.h
>

38 
	~<vfs.h
>

39 
	~<devi˚.h
>

44 
	$nuŒ›í
(
devi˚
 *
dev
, 
›íÊags
)

46 ()
dev
;

47 ()
›íÊags
;

50 
	}
}

55 
	$nuŒio
(
devi˚
 *
dev
, 
uio
 *uio)

66 ()
dev
;

68 i‡(
uio
->
uio_rw
 =
UIO_WRITE
) {

69 
uio
->
uio_ªsid
 = 0;

73 
	}
}

78 
	$nuŒio˘l
(
devi˚
 *
dev
, 
›
, 
u£Ωå_t
 
d©a
)

84 ()
dev
;

85 ()
›
;

86 ()
d©a
;

88  
EINVAL
;

89 
	}
}

91 c⁄° 
devi˚_›s
 
	gnuŒ_dev›s
 = {

92 .
dev›_óch›í
 = 
nuŒ›í
,

93 .
	gdev›_io
 = 
nuŒio
,

94 .
	gdev›_io˘l
 = 
nuŒio˘l
,

101 
	$devnuŒ_¸óã
()

103 
ªsu…
;

104 
devi˚
 *
dev
;

106 
dev
 = 
	`kmÆloc
((*dev));

107 i‡(
dev
==
NULL
) {

108 
	`∑nic
("CouldÇotáddÇull device: out of memory\n");

111 
dev
->
d_›s
 = &
nuŒ_dev›s
;

113 
dev
->
d_blocks
 = 0;

114 
dev
->
d_blocksize
 = 1;

116 
dev
->
d_devnumbî
 = 0;

118 
dev
->
d_d©a
 = 
NULL
;

120 
ªsu…
 = 
	`vfs_adddev
("nuŒ", 
dev
, 0);

121 i‡(
ªsu…
) {

122 
	`∑nic
("CouldÇŸáddÇuŒ devi˚: %s\n", 
	`°ªº‹
(
ªsu…
));

124 
	}
}

	@vfs/vfscwd.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<°©.h
>

37 
	~<lib.h
>

38 
	~<uio.h
>

39 
	~<¥oc.h
>

40 
	~<cuºít.h
>

41 
	~<vfs.h
>

42 
	~<fs.h
>

43 
	~<vnode.h
>

49 
	$vfs_gëcurdú
(
vnode
 **
ªt
)

51 
rv
 = 0;

53 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

54 i‡(
cuΩroc
->
p_cwd
!=
NULL
) {

55 
	`VOP_INCREF
(
cuΩroc
->
p_cwd
);

56 *
ªt
 = 
cuΩroc
->
p_cwd
;

59 
rv
 = 
ENOENT
;

61 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

63  
rv
;

64 
	}
}

71 
	$vfs_£tcurdú
(
vnode
 *
dú
)

73 
vnode
 *
ﬁd
;

74 
mode_t
 
vty≥
;

75 
ªsu…
;

77 
ªsu…
 = 
	`VOP_GETTYPE
(
dú
, &
vty≥
);

78 i‡(
ªsu…
) {

79  
ªsu…
;

81 i‡(
vty≥
 !
S_IFDIR
) {

82  
ENOTDIR
;

85 
	`VOP_INCREF
(
dú
);

87 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

88 
ﬁd
 = 
cuΩroc
->
p_cwd
;

89 
cuΩroc
->
p_cwd
 = 
dú
;

90 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

92 i‡(
ﬁd
!=
NULL
) {

93 
	`VOP_DECREF
(
ﬁd
);

97 
	}
}

103 
	$vfs_˛órcurdú
()

105 
vnode
 *
ﬁd
;

107 
	`•ölock_acquúe
(&
cuΩroc
->
p_lock
);

108 
ﬁd
 = 
cuΩroc
->
p_cwd
;

109 
cuΩroc
->
p_cwd
 = 
NULL
;

110 
	`•ölock_ªÀa£
(&
cuΩroc
->
p_lock
);

112 i‡(
ﬁd
!=
NULL
) {

113 
	`VOP_DECREF
(
ﬁd
);

117 
	}
}

124 
	$vfs_chdú
(*
∑th
)

126 
vnode
 *
vn
;

127 
ªsu…
;

129 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

130 i‡(
ªsu…
) {

131  
ªsu…
;

133 
ªsu…
 = 
	`vfs_£tcurdú
(
vn
);

134 
	`VOP_DECREF
(
vn
);

135  
ªsu…
;

136 
	}
}

144 
	$vfs_gëcwd
(
uio
 *uio)

146 
vnode
 *
cwd
;

147 
ªsu…
;

148 c⁄° *
«me
;

149 
cﬁ⁄
=':';

151 
	`KASSERT
(
uio
->
uio_rw
==
UIO_READ
);

153 
ªsu…
 = 
	`vfs_gëcurdú
(&
cwd
);

154 i‡(
ªsu…
) {

155  
ªsu…
;

159 
	`KASSERT
(
cwd
->
vn_fs
 !
NULL
);

161 
«me
 = 
	`FSOP_GETVOLNAME
(
cwd
->
vn_fs
);

162 i‡(
«me
==
NULL
) {

163 
«me
 = 
	`vfs_gëdev«me
(
cwd
->
vn_fs
);

165 
	`KASSERT
(
«me
 !
NULL
);

167 
ªsu…
 = 
	`uiomove
((*)
«me
, 
	`°æí
“ame), 
uio
);

168 i‡(
ªsu…
) {

169 
out
;

171 
ªsu…
 = 
	`uiomove
(&
cﬁ⁄
, 1, 
uio
);

172 i‡(
ªsu…
) {

173 
out
;

176 
ªsu…
 = 
	`VOP_NAMEFILE
(
cwd
, 
uio
);

178 
out
:

180 
	`VOP_DECREF
(
cwd
);

181  
ªsu…
;

182 
	}
}

	@vfs/vfsfail.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<vnode.h
>

51 
	$v›Áû_uio_nŸdú
(
vnode
 *
vn
, 
uio
 *uio)

53 ()
vn
;

54 ()
uio
;

55  
ENOTDIR
;

56 
	}
}

59 
	$v›Áû_uio_isdú
(
vnode
 *
vn
, 
uio
 *uio)

61 ()
vn
;

62 ()
uio
;

63  
EISDIR
;

64 
	}
}

67 
	$v›Áû_uio_övÆ
(
vnode
 *
vn
, 
uio
 *uio)

69 ()
vn
;

70 ()
uio
;

71  
EINVAL
;

72 
	}
}

75 
	$v›Áû_uio_nosys
(
vnode
 *
vn
, 
uio
 *uio)

77 ()
vn
;

78 ()
uio
;

79  
ENOSYS
;

80 
	}
}

86 
	$v›Áû_mm≠_isdú
(
vnode
 *
vn
 )

88 ()
vn
;

89  
EISDIR
;

90 
	}
}

93 
	$v›Áû_mm≠_≥rm
(
vnode
 *
vn
 )

95 ()
vn
;

96  
EPERM
;

97 
	}
}

100 
	$v›Áû_mm≠_nosys
(
vnode
 *
vn
 )

102 ()
vn
;

103  
ENOSYS
;

104 
	}
}

110 
	$v›Áû_åunˇã_isdú
(
vnode
 *
vn
, 
off_t
 
pos
)

112 ()
vn
;

113 ()
pos
;

114  
EISDIR
;

115 
	}
}

121 
	$v›Áû_¸ót_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
boﬁ
 
ex˛
,

122 
mode_t
 
mode
, 
vnode
 **
ªsu…
)

124 ()
vn
;

125 ()
«me
;

126 ()
ex˛
;

127 ()
mode
;

128 ()
ªsu…
;

129  
ENOTDIR
;

130 
	}
}

136 
	$v›Áû_symlök_nŸdú
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

137 c⁄° *
«me
)

139 ()
vn
;

140 ()
c⁄ã¡s
;

141 ()
«me
;

142  
ENOTDIR
;

143 
	}
}

146 
	$v›Áû_symlök_nosys
(
vnode
 *
vn
, c⁄° *
c⁄ã¡s
,

147 c⁄° *
«me
)

149 ()
vn
;

150 ()
c⁄ã¡s
;

151 ()
«me
;

152  
ENOSYS
;

153 
	}
}

159 
	$v›Áû_mkdú_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
)

161 ()
vn
;

162 ()
«me
;

163 ()
mode
;

164  
ENOTDIR
;

165 
	}
}

168 
	$v›Áû_mkdú_nosys
(
vnode
 *
vn
, c⁄° *
«me
, 
mode_t
 
mode
)

170 ()
vn
;

171 ()
«me
;

172 ()
mode
;

173  
ENOSYS
;

174 
	}
}

180 
	$v›Áû_lök_nŸdú
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

182 ()
dú
;

183 ()
«me
;

184 ()
fûe
;

185  
ENOTDIR
;

186 
	}
}

189 
	$v›Áû_lök_nosys
(
vnode
 *
dú
, c⁄° *
«me
, vnodê*
fûe
)

191 ()
dú
;

192 ()
«me
;

193 ()
fûe
;

194  
ENOSYS
;

195 
	}
}

201 
	$v›Áû_°rög_nŸdú
(
vnode
 *
vn
, c⁄° *
«me
)

203 ()
vn
;

204 ()
«me
;

205  
ENOTDIR
;

206 
	}
}

209 
	$v›Áû_°rög_nosys
(
vnode
 *
vn
, c⁄° *
«me
)

211 ()
vn
;

212 ()
«me
;

213  
ENOSYS
;

214 
	}
}

220 
	$v›Áû_ª«me_nŸdú
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

221 
vnode
 *
todú
, c⁄° *
t⁄ame
)

223 ()
‰omdú
;

224 ()
‰om«me
;

225 ()
todú
;

226 ()
t⁄ame
;

227  
ENOTDIR
;

228 
	}
}

231 
	$v›Áû_ª«me_nosys
(
vnode
 *
‰omdú
, c⁄° *
‰om«me
,

232 
vnode
 *
todú
, c⁄° *
t⁄ame
)

234 ()
‰omdú
;

235 ()
‰om«me
;

236 ()
todú
;

237 ()
t⁄ame
;

238  
ENOSYS
;

239 
	}
}

245 
	$v›Áû_lookup_nŸdú
(
vnode
 *
vn
, *
∑th
, vnodê**
ªsu…
)

247 ()
vn
;

248 ()
∑th
;

249 ()
ªsu…
;

250  
ENOTDIR
;

251 
	}
}

254 
	$v›Áû_look∑ª¡_nŸdú
(
vnode
 *
vn
, *
∑th
, vnodê**
ªsu…
,

255 *
buf
, 
size_t
 
Àn
)

257 ()
vn
;

258 ()
∑th
;

259 ()
ªsu…
;

260 ()
buf
;

261 ()
Àn
;

262  
ENOTDIR
;

263 
	}
}

	@vfs/vfslist.c

35 
	#VFSINLINE


	)

37 
	~<ty≥s.h
>

38 
	~<kîn/î∫o.h
>

39 
	~<lib.h
>

40 
	~<¨øy.h
>

41 
	~<synch.h
>

42 
	~<vfs.h
>

43 
	~<fs.h
>

44 
	~<vnode.h
>

45 
	~<devi˚.h
>

77 
	sknowndev
 {

78 *
	mkd_«me
;

79 *
	mkd_øw«me
;

80 
devi˚
 *
	mkd_devi˚
;

81 
vnode
 *
	mkd_vnode
;

82 
fs
 *
	mkd_fs
;

86 
	#SWAP_FS
 ((
fs
 *)-1)

	)

88 
DECLARRAY
(
knowndev
, 
__UNUSED
 
ölöe
);

89 
DEFARRAY
(
knowndev
, 
__UNUSED
 
ölöe
);

91 
knowndev¨øy
 *
	gknowndevs
;

92 
lock
 *
	gknowndevs_lock
;

98 
	$vfs_boŸ°øp
()

100 
knowndevs
 = 
	`knowndev¨øy_¸óã
();

101 i‡(
knowndevs
==
NULL
) {

102 
	`∑nic
("vfs: CouldÇot create knowndevsárray\n");

105 
knowndevs_lock
 = 
	`lock_¸óã
("knowndevs");

106 i‡(
knowndevs_lock
==
NULL
) {

107 
	`∑nic
("vfs: CouldÇot create knowndevsÜock\n");

110 
	`vfs_öôboŸfs
();

111 
	`devnuŒ_¸óã
();

112 
	`£mfs_boŸ°øp
();

113 
	}
}

119 
	$vfs_sync
()

121 
knowndev
 *
dev
;

122 
i
, 
num
;

124 
	`lock_acquúe
(
knowndevs_lock
);

126 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

127 
i
=0; i<
num
; i++) {

128 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

129 i‡(
dev
->
kd_fs
 !
NULL
 && dev->kd_f†!
SWAP_FS
) {

130  
	`FSOP_SYNC
(
dev
->
kd_fs
);

134 
	`lock_ªÀa£
(
knowndevs_lock
);

137 
	}
}

144 
	$vfs_gëroŸ
(c⁄° *
dev«me
, 
vnode
 **
ªt
)

146 
knowndev
 *
kd
;

147 
i
, 
num
;

148 
îr‹
;

150 
	`lock_acquúe
(
knowndevs_lock
);

152 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

153 
i
=0; i<
num
; i++) {

154 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

165 i‡(
kd
->
kd_fs
 !
NULL
 && kd->kd_f†!
SWAP_FS
) {

166 c⁄° *
vﬁ«me
;

167 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

169 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
) ||

170 (
vﬁ«me
!=
NULL
 && !
	`°rcmp
(vﬁ«me, 
dev«me
))) {

171 
îr‹
 = 
	`FSOP_GETROOT
(
kd
->
kd_fs
, 
ªt
);

172 
	`lock_ªÀa£
(
knowndevs_lock
);

173  
îr‹
;

177 i‡(
kd
->
kd_øw«me
!=
NULL
 &&

178 !
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

179 
	`lock_ªÀa£
(
knowndevs_lock
);

180  
ENXIO
;

189 i‡(!
	`°rcmp
(
kd
->
kd_«me
, 
dev«me
)) {

190 
	`KASSERT
(
kd
->
kd_fs
==
NULL
);

191 
	`KASSERT
(
kd
->
kd_øw«me
==
NULL
);

192 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

193 
	`VOP_INCREF
(
kd
->
kd_vnode
);

194 *
ªt
 = 
kd
->
kd_vnode
;

195 
	`lock_ªÀa£
(
knowndevs_lock
);

203 i‡(
kd
->
kd_øw«me
!=
NULL
 && !
	`°rcmp
(kd->kd_øw«me, 
dev«me
)) {

204 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

205 
	`VOP_INCREF
(
kd
->
kd_vnode
);

206 *
ªt
 = 
kd
->
kd_vnode
;

207 
	`lock_ªÀa£
(
knowndevs_lock
);

221 
	`lock_ªÀa£
(
knowndevs_lock
);

222  
ENODEV
;

223 
	}
}

229 
	$vfs_gëdev«me
(
fs
 *fs)

231 
knowndev
 *
kd
;

232 
i
, 
num
;

234 
	`KASSERT
(
fs
 !
NULL
);

236 
	`lock_acquúe
(
knowndevs_lock
);

238 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

239 
i
=0; i<
num
; i++) {

240 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

242 i‡(
kd
->
kd_fs
 =
fs
) {

243 
	`lock_ªÀa£
(
knowndevs_lock
);

250  
kd
->
kd_«me
;

254 
	`lock_ªÀa£
(
knowndevs_lock
);

256  
NULL
;

257 
	}
}

264 
	$mkøw«me
(c⁄° *
«me
)

266 *
s
 = 
	`kmÆloc
(
	`°æí
(
«me
)+3+1);

267 i‡(!
s
) {

268  
NULL
;

270 
	`°r˝y
(
s
, 
«me
);

271 
	`°rˇt
(
s
, "raw");

272  
s
;

273 
	}
}

281 
ölöe


283 
	$ßme°rög
(c⁄° *
a
, c⁄° *
b
)

285 i‡(
a
==
NULL
 || 
b
==NULL) {

288  !
	`°rcmp
(
a
, 
b
);

289 
	}
}

296 
ölöe


298 
	$ßme°rög3
(c⁄° *
a
, c⁄° *
b
, c⁄° *
c
, c⁄° *
d
)

300  
	`ßme°rög
(
a
,
b
Ë|| same°rög◊,
c
Ë|| same°rög◊,
d
);

301 
	}
}

310 
	$bad«mes
(c⁄° *
n1
, c⁄° *
n2
, c⁄° *
n3
)

312 c⁄° *
vﬁ«me
;

313 
i
, 
num
;

314 
knowndev
 *
kd
;

316 
	`KASSERT
(
	`lock_do_i_hﬁd
(
knowndevs_lock
));

318 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

319 
i
=0; i<
num
; i++) {

320 
kd
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

322 i‡(
kd
->
kd_fs
 !
NULL
 && kd->kd_f†!
SWAP_FS
) {

323 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
kd
->
kd_fs
);

324 i‡(
	`ßme°rög3
(
vﬁ«me
, 
n1
, 
n2
, 
n3
)) {

329 i‡(
	`ßme°rög3
(
kd
->
kd_øw«me
, 
n1
, 
n2
, 
n3
) ||

330 
	`ßme°rög3
(
kd
->
kd_«me
, 
n1
, 
n2
, 
n3
)) {

336 
	}
}

347 
	$vfs_dﬂdd
(c⁄° *
d«me
, 
mou¡abÀ
, 
devi˚
 *
dev
, 
fs
 *fs)

349 *
«me
=
NULL
, *
øw«me
=NULL;

350 
knowndev
 *
kd
=
NULL
;

351 
vnode
 *vnode=
NULL
;

352 c⁄° *
vﬁ«me
=
NULL
;

353 
ödex
;

354 
ªsu…
;

356 
«me
 = 
	`k°rdup
(
d«me
);

357 i‡(
«me
==
NULL
) {

358 
ªsu…
 = 
ENOMEM
;

359 
Áû
;

361 i‡(
mou¡abÀ
) {

362 
øw«me
 = 
	`mkøw«me
(
«me
);

363 i‡(
øw«me
==
NULL
) {

364 
ªsu…
 = 
ENOMEM
;

365 
Áû
;

369 
vnode
 = 
	`dev_¸óã_vnode
(
dev
);

370 i‡(
vnode
==
NULL
) {

371 
ªsu…
 = 
ENOMEM
;

372 
Áû
;

375 
kd
 = 
	`kmÆloc
((
knowndev
));

376 i‡(
kd
==
NULL
) {

377 
ªsu…
 = 
ENOMEM
;

378 
Áû
;

381 
kd
->
kd_«me
 = 
«me
;

382 
kd
->
kd_øw«me
 = 
øw«me
;

383 
kd
->
kd_devi˚
 = 
dev
;

384 
kd
->
kd_vnode
 = 
vnode
;

385 
kd
->
kd_fs
 = 
fs
;

387 i‡(
fs
!=
NULL
) {

388 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

391 
	`lock_acquúe
(
knowndevs_lock
);

393 i‡(
	`bad«mes
(
«me
, 
øw«me
, 
vﬁ«me
)) {

394 
ªsu…
 = 
EEXIST
;

395 
Áû_u∆ock
;

398 
ªsu…
 = 
	`knowndev¨øy_add
(
knowndevs
, 
kd
, &
ödex
);

399 i‡(
ªsu…
) {

400 
Áû_u∆ock
;

403 i‡(
dev
 !
NULL
) {

405 
dev
->
d_devnumbî
 = 
ödex
+1;

408 
	`lock_ªÀa£
(
knowndevs_lock
);

411 
Áû_u∆ock
:

412 
	`lock_ªÀa£
(
knowndevs_lock
);

414 
Áû
:

415 i‡(
«me
) {

416 
	`k‰ì
(
«me
);

418 i‡(
øw«me
) {

419 
	`k‰ì
(
øw«me
);

421 i‡(
vnode
) {

422 
	`dev_un¸óã_vnode
(
vnode
);

424 i‡(
kd
) {

425 
	`k‰ì
(
kd
);

428  
ªsu…
;

429 
	}
}

436 
	$vfs_adddev
(c⁄° *
dev«me
, 
devi˚
 *
dev
, 
mou¡abÀ
)

438  
	`vfs_dﬂdd
(
dev«me
, 
mou¡abÀ
, 
dev
, 
NULL
);

439 
	}
}

447 
	$vfs_addfs
(c⁄° *
dev«me
, 
fs
 *fs)

449  
	`vfs_dﬂdd
(
dev«me
, 0, 
NULL
, 
fs
);

450 
	}
}

460 
	$födmou¡
(c⁄° *
dev«me
, 
knowndev
 **
ªsu…
)

462 
knowndev
 *
dev
;

463 
i
, 
num
;

464 
boﬁ
 
found
 = 
Ál£
;

466 
	`KASSERT
(
	`lock_do_i_hﬁd
(
knowndevs_lock
));

468 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

469 
i
=0; !
found
 && i<
num
; i++) {

470 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

471 i‡(
dev
->
kd_øw«me
==
NULL
) {

476 i‡(!
	`°rcmp
(
dev«me
, 
dev
->
kd_«me
)) {

477 *
ªsu…
 = 
dev
;

478 
found
 = 
åue
;

482  
found
 ? 0 : 
ENODEV
;

483 
	}
}

492 
vfs_mou¡
(c⁄° *
dev«me
, *
d©a
,

493 (*
mou¡func
)(*
d©a
, 
devi˚
 *, 
fs
 **
ªt
))

495 c⁄° *
vﬁ«me
;

496 
knowndev
 *
kd
;

497 
fs
 *fs;

498 
ªsu…
;

500 
	`lock_acquúe
(
knowndevs_lock
);

503 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

504 i‡(
ªsu…
) {

505 
Áû
;

508 i‡(
kd
->
kd_fs
 !
NULL
) {

509 
ªsu…
 = 
EBUSY
;

510 
Áû
;

512 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

513 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

515 
ªsu…
 = 
	`mou¡func
(
d©a
, 
kd
->
kd_devi˚
, &
fs
);

516 i‡(
ªsu…
) {

517 
Áû
;

520 
	`KASSERT
(
fs
 !
NULL
);

521 
	`KASSERT
(
fs
 !
SWAP_FS
);

523 
kd
->
kd_fs
 = 
fs
;

525 
vﬁ«me
 = 
	`FSOP_GETVOLNAME
(
fs
);

526 
	`k¥ötf
("vfs: Mounted %s: on %s\n",

527 
vﬁ«me
 ? vﬁ«mê: 
kd
->
kd_«me
, kd->kd_name);

529 
	`KASSERT
(
ªsu…
==0);

531 
Áû
:

532 
	`lock_ªÀa£
(
knowndevs_lock
);

533  
ªsu…
;

534 
	}
}

542 
	$vfs_sw≠⁄
(c⁄° *
dev«me
, 
vnode
 **
ªt
)

544 *
my«me
 = 
NULL
;

545 
size_t
 
Àn
;

546 
knowndev
 *
kd
;

547 
ªsu…
;

549 
Àn
 = 
	`°æí
(
dev«me
);

550 i‡(
Àn
 > 0 && 
dev«me
[len - 1] == ':') {

552 
my«me
 = 
	`k°rdup
(
dev«me
);

553 i‡(
my«me
 =
NULL
) {

554  
ENOMEM
;

556 
my«me
[
Àn
 - 1] = 0;

557 
dev«me
 = 
my«me
;

560 
	`lock_acquúe
(
knowndevs_lock
);

561 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

562 i‡(
ªsu…
) {

563 
out
;

566 i‡(
kd
->
kd_fs
 !
NULL
) {

567 
ªsu…
 = 
EBUSY
;

568 
out
;

570 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

571 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

573 
	`k¥ötf
("vfs: Sw≠áâachedÅÿ%s\n", 
kd
->
kd_«me
);

575 
kd
->
kd_fs
 = 
SWAP_FS
;

576 
	`VOP_INCREF
(
kd
->
kd_vnode
);

577 *
ªt
 = 
kd
->
kd_vnode
;

579 
out
:

580 
	`lock_ªÀa£
(
knowndevs_lock
);

581 i‡(
my«me
 !
NULL
) {

582 
	`k‰ì
(
my«me
);

585  
ªsu…
;

586 
	}
}

593 
	$vfs_unmou¡
(c⁄° *
dev«me
)

595 
knowndev
 *
kd
;

596 
ªsu…
;

598 
	`lock_acquúe
(
knowndevs_lock
);

601 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

602 i‡(
ªsu…
) {

603 
Áû
;

606 i‡(
kd
->
kd_fs
 =
NULL
 || kd->kd_f†=
SWAP_FS
) {

607 
ªsu…
 = 
EINVAL
;

608 
Áû
;

610 
	`KASSERT
(
kd
->
kd_øw«me
 !
NULL
);

611 
	`KASSERT
(
kd
->
kd_devi˚
 !
NULL
);

614 
ªsu…
 = 
	`FSOP_SYNC
(
kd
->
kd_fs
);

615 i‡(
ªsu…
) {

616 
Áû
;

619 
ªsu…
 = 
	`FSOP_UNMOUNT
(
kd
->
kd_fs
);

620 i‡(
ªsu…
) {

621 
Áû
;

624 
	`k¥ötf
("vfs: Unmou¡ed %s:\n", 
kd
->
kd_«me
);

627 
kd
->
kd_fs
 = 
NULL
;

629 
	`KASSERT
(
ªsu…
==0);

631 
Áû
:

632 
	`lock_ªÀa£
(
knowndevs_lock
);

633  
ªsu…
;

634 
	}
}

644 
	$vfs_sw≠off
(c⁄° *
dev«me
)

646 
knowndev
 *
kd
;

647 
ªsu…
;

649 
	`lock_acquúe
(
knowndevs_lock
);

651 
ªsu…
 = 
	`födmou¡
(
dev«me
, &
kd
);

652 i‡(
ªsu…
) {

653 
Áû
;

656 i‡(
kd
->
kd_fs
 !
SWAP_FS
) {

657 
ªsu…
 = 
EINVAL
;

658 
Áû
;

661 
	`k¥ötf
("vfs: Sw≠ dëached from %s:\n", 
kd
->
kd_«me
);

664 
kd
->
kd_fs
 = 
NULL
;

666 
	`KASSERT
(
ªsu…
==0);

668 
Áû
:

669 
	`lock_ªÀa£
(
knowndevs_lock
);

670  
ªsu…
;

671 
	}
}

677 
	$vfs_unmou¡Æl
()

679 
knowndev
 *
dev
;

680 
i
, 
num
;

681 
ªsu…
;

683 
	`lock_acquúe
(
knowndevs_lock
);

685 
num
 = 
	`knowndev¨øy_num
(
knowndevs
);

686 
i
=0; i<
num
; i++) {

687 
dev
 = 
	`knowndev¨øy_gë
(
knowndevs
, 
i
);

688 i‡(
dev
->
kd_øw«me
 =
NULL
) {

692 i‡(
dev
->
kd_fs
 =
NULL
) {

696 i‡(
dev
->
kd_fs
 =
SWAP_FS
) {

698 
dev
->
kd_fs
 = 
NULL
;

702 
	`k¥ötf
("vfs: Unmou¡ög %s:\n", 
dev
->
kd_«me
);

704 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

705 i‡(
ªsu…
) {

706 
	`k¥ötf
("vfs: Warning: sync failed for %s: %s,Årying "

707 "agaö\n", 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

709 
ªsu…
 = 
	`FSOP_SYNC
(
dev
->
kd_fs
);

710 i‡(
ªsu…
) {

711 
	`k¥ötf
("vfs: Warning: sync failed secondÅime"

713 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

722 
ªsu…
 = 
	`FSOP_UNMOUNT
(
dev
->
kd_fs
);

723 i‡(
ªsu…
 =
EBUSY
) {

724 
	`k¥ötf
("vfs: Cannot unmount %s: (busy)\n",

725 
dev
->
kd_«me
);

728 i‡(
ªsu…
) {

729 
	`k¥ötf
("vfs: Warning: unmount failed for %s:"

731 
dev
->
kd_«me
, 
	`°ªº‹
(
ªsu…
));

736 
dev
->
kd_fs
 = 
NULL
;

739 
	`lock_ªÀa£
(
knowndevs_lock
);

742 
	}
}

	@vfs/vfslookup.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<limôs.h
>

37 
	~<lib.h
>

38 
	~<synch.h
>

39 
	~<vfs.h
>

40 
	~<fs.h
>

41 
	~<vnode.h
>

43 
vnode
 *
	gboŸfs_vnode
 = 
NULL
;

44 
lock
 *
	gboŸfs_lock
 = 
NULL
;

47 
	$vfs_öôboŸfs
()

49 
boŸfs_lock
 = 
	`lock_¸óã
("bootfs_lock");

50 i‡(
boŸfs_lock
 =
NULL
) {

51 
	`∑nic
("vfs: CouldÇot create bootfsÜock\n");

53 
	}
}

60 
	$ch™ge_boŸfs
(
vnode
 *
√wvn
)

62 
vnode
 *
ﬁdvn
;

64 
	`lock_acquúe
(
boŸfs_lock
);

65 
ﬁdvn
 = 
boŸfs_vnode
;

66 
boŸfs_vnode
 = 
√wvn
;

67 
	`lock_ªÀa£
(
boŸfs_lock
);

69 i‡(
ﬁdvn
 !
NULL
) {

70 
	`VOP_DECREF
(
ﬁdvn
);

72 
	}
}

83 
	$vfs_£tboŸfs
(c⁄° *
f¢ame
)

85 
tmp
[
NAME_MAX
+1];

86 *
s
;

87 
ªsu…
;

88 
vnode
 *
√wguy
;

90 
	`¢¥ötf
(
tmp
, —mp)-1, "%s", 
f¢ame
);

91 
s
 = 
	`°rchr
(
tmp
, ':');

92 i‡(
s
) {

94 i‡(
	`°æí
(
s
)>0) {

95  
EINVAL
;

99 
	`°rˇt
(
tmp
, ":");

102 
ªsu…
 = 
	`vfs_chdú
(
tmp
);

103 i‡(
ªsu…
) {

104  
ªsu…
;

107 
ªsu…
 = 
	`vfs_gëcurdú
(&
√wguy
);

108 i‡(
ªsu…
) {

109  
ªsu…
;

112 
	`ch™ge_boŸfs
(
√wguy
);

115 
	}
}

121 
	$vfs_˛órboŸfs
()

123 
	`ch™ge_boŸfs
(
NULL
);

124 
	}
}

134 
	$gëdevi˚
(*
∑th
, **
sub∑th
, 
vnode
 **
°¨tvn
)

136 
¶ash
=-1, 
cﬁ⁄
=-1, 
i
;

137 
vnode
 *
vn
;

138 
ªsu…
;

144 
i
=0; 
∑th
[i]; i++) {

145 i‡(
∑th
[
i
]==':') {

146 
cﬁ⁄
 = 
i
;

149 i‡(
∑th
[
i
]=='/') {

150 
¶ash
 = 
i
;

155 i‡(
cﬁ⁄
 < 0 && 
¶ash
 != 0) {

163 *
sub∑th
 = 
∑th
;

164  
	`vfs_gëcurdú
(
°¨tvn
);

167 i‡(
cﬁ⁄
>0) {

169 
∑th
[
cﬁ⁄
]=0;

170 
∑th
[
cﬁ⁄
+1]=='/') {

172 
cﬁ⁄
++;

174 *
sub∑th
 = &
∑th
[
cﬁ⁄
+1];

176 
ªsu…
 = 
	`vfs_gëroŸ
(
∑th
, 
°¨tvn
);

177 i‡(
ªsu…
) {

178  
ªsu…
;

190 
	`KASSERT
(
cﬁ⁄
==0 || 
¶ash
==0);

192 i‡(
∑th
[0]=='/') {

193 
	`lock_acquúe
(
boŸfs_lock
);

194 i‡(
boŸfs_vnode
==
NULL
) {

195 
	`lock_ªÀa£
(
boŸfs_lock
);

196  
ENOENT
;

198 
	`VOP_INCREF
(
boŸfs_vnode
);

199 *
°¨tvn
 = 
boŸfs_vnode
;

200 
	`lock_ªÀa£
(
boŸfs_lock
);

203 
	`KASSERT
(
∑th
[0]==':');

205 
ªsu…
 = 
	`vfs_gëcurdú
(&
vn
);

206 i‡(
ªsu…
) {

207  
ªsu…
;

214 
	`KASSERT
(
vn
->
vn_fs
!=
NULL
);

216 
ªsu…
 = 
	`FSOP_GETROOT
(
vn
->
vn_fs
, 
°¨tvn
);

218 
	`VOP_DECREF
(
vn
);

220 i‡(
ªsu…
) {

221  
ªsu…
;

225 
∑th
[1]=='/') {

227 
∑th
++;

230 *
sub∑th
 = 
∑th
+1;

233 
	}
}

241 
	$vfs_look∑ª¡
(*
∑th
, 
vnode
 **
ªtvÆ
,

242 *
buf
, 
size_t
 
buÊí
)

244 
vnode
 *
°¨tvn
;

245 
ªsu…
;

247 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

248 i‡(
ªsu…
) {

249  
ªsu…
;

252 i‡(
	`°æí
(
∑th
)==0) {

258 
ªsu…
 = 
EINVAL
;

261 
ªsu…
 = 
	`VOP_LOOKPARENT
(
°¨tvn
, 
∑th
, 
ªtvÆ
, 
buf
, 
buÊí
);

264 
	`VOP_DECREF
(
°¨tvn
);

265  
ªsu…
;

266 
	}
}

269 
	$vfs_lookup
(*
∑th
, 
vnode
 **
ªtvÆ
)

271 
vnode
 *
°¨tvn
;

272 
ªsu…
;

274 
ªsu…
 = 
	`gëdevi˚
(
∑th
, &∑th, &
°¨tvn
);

275 i‡(
ªsu…
) {

276  
ªsu…
;

279 i‡(
	`°æí
(
∑th
)==0) {

280 *
ªtvÆ
 = 
°¨tvn
;

284 
ªsu…
 = 
	`VOP_LOOKUP
(
°¨tvn
, 
∑th
, 
ªtvÆ
);

286 
	`VOP_DECREF
(
°¨tvn
);

287  
ªsu…
;

288 
	}
}

	@vfs/vfspath.c

34 
	~<ty≥s.h
>

35 
	~<kîn/î∫o.h
>

36 
	~<kîn/f˙é.h
>

37 
	~<limôs.h
>

38 
	~<lib.h
>

39 
	~<vfs.h
>

40 
	~<vnode.h
>

45 
	$vfs_›í
(*
∑th
, 
›íÊags
, 
mode_t
 
mode
, 
vnode
 **
ªt
)

47 
how
;

48 
ªsu…
;

49 
ˇnwrôe
;

50 
vnode
 *
vn
 = 
NULL
;

52 
how
 = 
›íÊags
 & 
O_ACCMODE
;

54 
how
) {

55 
O_RDONLY
:

56 
ˇnwrôe
=0;

58 
O_WRONLY
:

59 
O_RDWR
:

60 
ˇnwrôe
=1;

63  
EINVAL
;

66 i‡(
›íÊags
 & 
O_CREAT
) {

67 
«me
[
NAME_MAX
+1];

68 
vnode
 *
dú
;

69 
ex˛
 = (
›íÊags
 & 
O_EXCL
)!=0;

71 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

72 i‡(
ªsu…
) {

73  
ªsu…
;

76 
ªsu…
 = 
	`VOP_CREAT
(
dú
, 
«me
, 
ex˛
, 
mode
, &
vn
);

78 
	`VOP_DECREF
(
dú
);

81 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

84 i‡(
ªsu…
) {

85  
ªsu…
;

88 
	`KASSERT
(
vn
 !
NULL
);

90 
ªsu…
 = 
	`VOP_EACHOPEN
(
vn
, 
›íÊags
);

91 i‡(
ªsu…
) {

92 
	`VOP_DECREF
(
vn
);

93  
ªsu…
;

96 i‡(
›íÊags
 & 
O_TRUNC
) {

97 i‡(
ˇnwrôe
==0) {

98 
ªsu…
 = 
EINVAL
;

101 
ªsu…
 = 
	`VOP_TRUNCATE
(
vn
, 0);

103 i‡(
ªsu…
) {

104 
	`VOP_DECREF
(
vn
);

105  
ªsu…
;

109 *
ªt
 = 
vn
;

112 
	}
}

116 
	$vfs_˛o£
(
vnode
 *
vn
)

132 
	`VOP_DECREF
(
vn
);

133 
	}
}

137 
	$vfs_ªmove
(*
∑th
)

139 
vnode
 *
dú
;

140 
«me
[
NAME_MAX
+1];

141 
ªsu…
;

143 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
dú
, 
«me
, (name));

144 i‡(
ªsu…
) {

145  
ªsu…
;

148 
ªsu…
 = 
	`VOP_REMOVE
(
dú
, 
«me
);

149 
	`VOP_DECREF
(
dú
);

151  
ªsu…
;

152 
	}
}

156 
	$vfs_ª«me
(*
ﬁd∑th
, *
√w∑th
)

158 
vnode
 *
ﬁddú
;

159 
ﬁd«me
[
NAME_MAX
+1];

160 
vnode
 *
√wdú
;

161 
√w«me
[
NAME_MAX
+1];

162 
ªsu…
;

164 
ªsu…
 = 
	`vfs_look∑ª¡
(
ﬁd∑th
, &
ﬁddú
, 
ﬁd«me
, (oldname));

165 i‡(
ªsu…
) {

166  
ªsu…
;

168 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

169 i‡(
ªsu…
) {

170 
	`VOP_DECREF
(
ﬁddú
);

171  
ªsu…
;

174 i‡(
ﬁddú
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

175 
ﬁddú
->
vn_fs
 !
√wdú
->vn_fs) {

176 
	`VOP_DECREF
(
√wdú
);

177 
	`VOP_DECREF
(
ﬁddú
);

178  
EXDEV
;

181 
ªsu…
 = 
	`VOP_RENAME
(
ﬁddú
, 
ﬁd«me
, 
√wdú
, 
√w«me
);

183 
	`VOP_DECREF
(
√wdú
);

184 
	`VOP_DECREF
(
ﬁddú
);

186  
ªsu…
;

187 
	}
}

191 
	$vfs_lök
(*
ﬁd∑th
, *
√w∑th
)

193 
vnode
 *
ﬁdfûe
;

194 
vnode
 *
√wdú
;

195 
√w«me
[
NAME_MAX
+1];

196 
ªsu…
;

198 
ªsu…
 = 
	`vfs_lookup
(
ﬁd∑th
, &
ﬁdfûe
);

199 i‡(
ªsu…
) {

200  
ªsu…
;

202 
ªsu…
 = 
	`vfs_look∑ª¡
(
√w∑th
, &
√wdú
, 
√w«me
, (newname));

203 i‡(
ªsu…
) {

204 
	`VOP_DECREF
(
ﬁdfûe
);

205  
ªsu…
;

208 i‡(
ﬁdfûe
->
vn_fs
==
NULL
 || 
√wdú
->vn_fs==NULL ||

209 
ﬁdfûe
->
vn_fs
 !
√wdú
->vn_fs) {

210 
	`VOP_DECREF
(
√wdú
);

211 
	`VOP_DECREF
(
ﬁdfûe
);

212  
EXDEV
;

215 
ªsu…
 = 
	`VOP_LINK
(
√wdú
, 
√w«me
, 
ﬁdfûe
);

217 
	`VOP_DECREF
(
√wdú
);

218 
	`VOP_DECREF
(
ﬁdfûe
);

220  
ªsu…
;

221 
	}
}

231 
	$vfs_symlök
(c⁄° *
c⁄ã¡s
, *
∑th
)

233 
vnode
 *
√wdú
;

234 
√w«me
[
NAME_MAX
+1];

235 
ªsu…
;

237 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
√wdú
, 
√w«me
, (newname));

238 i‡(
ªsu…
) {

239  
ªsu…
;

242 
ªsu…
 = 
	`VOP_SYMLINK
(
√wdú
, 
√w«me
, 
c⁄ã¡s
);

243 
	`VOP_DECREF
(
√wdú
);

245  
ªsu…
;

246 
	}
}

256 
	$vfs_ªadlök
(*
∑th
, 
uio
 *uio)

258 
vnode
 *
vn
;

259 
ªsu…
;

261 
ªsu…
 = 
	`vfs_lookup
(
∑th
, &
vn
);

262 i‡(
ªsu…
) {

263  
ªsu…
;

266 
ªsu…
 = 
	`VOP_READLINK
(
vn
, 
uio
);

268 
	`VOP_DECREF
(
vn
);

270  
ªsu…
;

271 
	}
}

277 
	$vfs_mkdú
(*
∑th
, 
mode_t
 
mode
)

279 
vnode
 *
∑ª¡
;

280 
«me
[
NAME_MAX
+1];

281 
ªsu…
;

283 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

284 i‡(
ªsu…
) {

285  
ªsu…
;

288 
ªsu…
 = 
	`VOP_MKDIR
(
∑ª¡
, 
«me
, 
mode
);

290 
	`VOP_DECREF
(
∑ª¡
);

292  
ªsu…
;

293 
	}
}

299 
	$vfs_rmdú
(*
∑th
)

301 
vnode
 *
∑ª¡
;

302 
«me
[
NAME_MAX
+1];

303 
ªsu…
;

305 
ªsu…
 = 
	`vfs_look∑ª¡
(
∑th
, &
∑ª¡
, 
«me
, (name));

306 i‡(
ªsu…
) {

307  
ªsu…
;

310 
ªsu…
 = 
	`VOP_RMDIR
(
∑ª¡
, 
«me
);

312 
	`VOP_DECREF
(
∑ª¡
);

314  
ªsu…
;

315 
	}
}

	@vfs/vnode.c

33 
	~<ty≥s.h
>

34 
	~<kîn/î∫o.h
>

35 
	~<lib.h
>

36 
	~<synch.h
>

37 
	~<vfs.h
>

38 
	~<vnode.h
>

44 
	$vnode_öô
(
vnode
 *
vn
, c⁄° 
vnode_›s
 *
›s
,

45 
fs
 *fs, *
fsd©a
)

47 
	`KASSERT
(
vn
 !
NULL
);

48 
	`KASSERT
(
›s
 !
NULL
);

50 
vn
->
vn_›s
 = 
›s
;

51 
vn
->
vn_ªfcou¡
 = 1;

52 
	`•ölock_öô
(&
vn
->
vn_cou¡lock
);

53 
vn
->
vn_fs
 = 
fs
;

54 
vn
->
vn_d©a
 = 
fsd©a
;

56 
	}
}

62 
	$vnode_˛ónup
(
vnode
 *
vn
)

64 
	`KASSERT
(
vn
->
vn_ªfcou¡
 == 1);

66 
	`•ölock_˛ónup
(&
vn
->
vn_cou¡lock
);

68 
vn
->
vn_›s
 = 
NULL
;

69 
vn
->
vn_ªfcou¡
 = 0;

70 
vn
->
vn_fs
 = 
NULL
;

71 
vn
->
vn_d©a
 = 
NULL
;

72 
	}
}

80 
	$vnode_ö¸ef
(
vnode
 *
vn
)

82 
	`KASSERT
(
vn
 !
NULL
);

84 
	`•ölock_acquúe
(&
vn
->
vn_cou¡lock
);

85 
vn
->
vn_ªfcou¡
++;

86 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

87 
	}
}

95 
	$vnode_de¸ef
(
vnode
 *
vn
)

97 
boﬁ
 
de°roy
;

98 
ªsu…
;

100 
	`KASSERT
(
vn
 !
NULL
);

102 
	`•ölock_acquúe
(&
vn
->
vn_cou¡lock
);

104 
	`KASSERT
(
vn
->
vn_ªfcou¡
 > 0);

105 i‡(
vn
->
vn_ªfcou¡
 > 1) {

106 
vn
->
vn_ªfcou¡
--;

107 
de°roy
 = 
Ál£
;

111 
de°roy
 = 
åue
;

113 
	`•ölock_ªÀa£
(&
vn
->
vn_cou¡lock
);

115 i‡(
de°roy
) {

116 
ªsu…
 = 
	`VOP_RECLAIM
(
vn
);

117 i‡(
ªsu…
 !0 &&Ñesu… !
EBUSY
) {

119 
	`k¥ötf
("vfs: Warning: VOP_RECLAIM: %s\n",

120 
	`°ªº‹
(
ªsu…
));

123 
	}
}

130 
	$vnode_check
(
vnode
 *
v
, c⁄° *
›°r
)

132 i‡(
v
 =
NULL
) {

133 
	`∑nic
("vnode_check: v›_%s:ÇuŒ vnode\n", 
›°r
);

135 i‡(
v
 == (*)0xdeadbeef) {

136 
	`∑nic
("vnode_check: v›_%s: dódbì‡vnode\n", 
›°r
);

139 i‡(
v
->
vn_›s
 =
NULL
) {

140 
	`∑nic
("vnode_check: v›_%s:ÇuŒ op†poöãr\n", 
›°r
);

142 i‡(
v
->
vn_›s
 == (*)0xdeadbeef) {

143 
	`∑nic
("vnode_check: v›_%s: dódbì‡›†poöãr\n", 
›°r
);

146 i‡(
v
->
vn_›s
->
v›_magic
 !
VOP_MAGIC
) {

147 
	`∑nic
("vnode_check: vop_%s: ops with bad magicÇumber %lx\n",

148 
›°r
, 
v
->
vn_›s
->
v›_magic
);

155 i‡(
v
->
vn_fs
 == (*)0xdeadbeef) {

156 
	`∑nic
("vnode_check: v›_%s: dódbì‡f†poöãr\n", 
›°r
);

159 
	`•ölock_acquúe
(&
v
->
vn_cou¡lock
);

161 i‡(
v
->
vn_ªfcou¡
 < 0) {

162 
	`∑nic
("vnode_check: v›_%s:Çeg©ivêªfcou¡ %d\n", 
›°r
,

163 
v
->
vn_ªfcou¡
);

165 i‡(
v
->
vn_ªfcou¡
 == 0) {

166 
	`∑nic
("vnode_check: v›_%s: zîÿªfcou¡\n", 
›°r
);

168 i‡(
v
->
vn_ªfcou¡
 > 0x100000) {

169 
	`k¥ötf
("vnode_check: vop_%s: warning:ÜargeÑefcount %d\n",

170 
›°r
, 
v
->
vn_ªfcou¡
);

173 
	`•ölock_ªÀa£
(&
v
->
vn_cou¡lock
);

174 
	}
}

	@vm/addrspace.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<addr•a˚.h
>

34 
	~<vm.h
>

35 
	~<¥oc.h
>

43 
addr•a˚
 *

44 
	$as_¸óã
()

46 
addr•a˚
 *
as
;

48 
as
 = 
	`kmÆloc
((
addr•a˚
));

49 i‡(
as
 =
NULL
) {

50  
NULL
;

57  
as
;

58 
	}
}

61 
	$as_c›y
(
addr•a˚
 *
ﬁd
, addr•a˚ **
ªt
)

63 
addr•a˚
 *
√was
;

65 
√was
 = 
	`as_¸óã
();

66 i‡(
√was
==
NULL
) {

67  
ENOMEM
;

74 ()
ﬁd
;

76 *
ªt
 = 
√was
;

78 
	}
}

81 
	$as_de°roy
(
addr•a˚
 *
as
)

87 
	`k‰ì
(
as
);

88 
	}
}

91 
	$as_a˘iv©e
()

93 
addr•a˚
 *
as
;

95 
as
 = 
	`¥oc_gëas
();

96 i‡(
as
 =
NULL
) {

107 
	}
}

110 
	$as_dó˘iv©e
()

117 
	}
}

130 
	$as_deföe_ªgi⁄
(
addr•a˚
 *
as
, 
vaddr_t
 
vaddr
, 
size_t
 
memsize
,

131 
ªadabÀ
, 
wrôóbÀ
, 
execuèbÀ
)

137 ()
as
;

138 ()
vaddr
;

139 ()
memsize
;

140 ()
ªadabÀ
;

141 ()
wrôóbÀ
;

142 ()
execuèbÀ
;

143  
ENOSYS
;

144 
	}
}

147 
	$as_¥ï¨e_lﬂd
(
addr•a˚
 *
as
)

153 ()
as
;

155 
	}
}

158 
	$as_com∂ëe_lﬂd
(
addr•a˚
 *
as
)

164 ()
as
;

166 
	}
}

169 
	$as_deföe_°ack
(
addr•a˚
 *
as
, 
vaddr_t
 *
°ack±r
)

175 ()
as
;

178 *
°ack±r
 = 
USERSTACK
;

181 
	}
}

	@vm/copyinout.c

30 
	~<ty≥s.h
>

31 
	~<kîn/î∫o.h
>

32 
	~<lib.h
>

33 
	~<£tjmp.h
>

34 
	~<thªad.h
>

35 
	~<cuºít.h
>

36 
	~<vm.h
>

37 
	~<c›yöout.h
>

100 
	$c›yÁû
()

102 
	`l⁄gjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
, 1);

103 
	}
}

118 
	$c›ycheck
(
c⁄°_u£Ωå_t
 
u£Ωå
, 
size_t
 
Àn
, size_à*
°›Àn
)

120 
vaddr_t
 
bŸ
, 
t›
;

122 *
°›Àn
 = 
Àn
;

124 
bŸ
 = (
vaddr_t
Ë
u£Ωå
;

125 
t›
 = 
bŸ
+
Àn
-1;

127 i‡(
t›
 < 
bŸ
) {

129  
EFAULT
;

132 i‡(
bŸ
 >
USERSPACETOP
) {

134  
EFAULT
;

137 i‡(
t›
 >
USERSPACETOP
) {

139 *
°›Àn
 = 
USERSPACETOP
 - 
bŸ
;

143 
	}
}

153 
	$c›yö
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
)

155 
ªsu…
;

156 
size_t
 
°›Àn
;

158 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

159 i‡(
ªsu…
) {

160  
ªsu…
;

162 i‡(
°›Àn
 !
Àn
) {

164  
EFAULT
;

167 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

169 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

170 i‡(
ªsu…
) {

171 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

172  
EFAULT
;

175 
	`mem˝y
(
de°
, (c⁄° *)
u£r§c
, 
Àn
);

177 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

179 
	}
}

189 
	$c›yout
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
)

191 
ªsu…
;

192 
size_t
 
°›Àn
;

194 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

195 i‡(
ªsu…
) {

196  
ªsu…
;

198 i‡(
°›Àn
 !
Àn
) {

200  
EFAULT
;

203 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

205 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

206 i‡(
ªsu…
) {

207 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

208  
EFAULT
;

211 
	`mem˝y
((*)
u£rde°
, 
§c
, 
Àn
);

213 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

215 
	}
}

235 
	$c›y°r
(*
de°
, c⁄° *
§c
, 
size_t
 
maxÀn
, size_à
°›Àn
,

236 
size_t
 *
gŸÀn
)

238 
size_t
 
i
;

240 
i
=0; i<
maxÀn
 && i<
°›Àn
; i++) {

241 
de°
[
i
] = 
§c
[i];

242 i‡(
§c
[
i
] == 0) {

243 i‡(
gŸÀn
 !
NULL
) {

244 *
gŸÀn
 = 
i
+1;

249 i‡(
°›Àn
 < 
maxÀn
) {

251  
EFAULT
;

254  
ENAMETOOLONG
;

255 
	}
}

266 
	$c›yö°r
(
c⁄°_u£Ωå_t
 
u£r§c
, *
de°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

268 
ªsu…
;

269 
size_t
 
°›Àn
;

271 
ªsu…
 = 
	`c›ycheck
(
u£r§c
, 
Àn
, &
°›Àn
);

272 i‡(
ªsu…
) {

273  
ªsu…
;

276 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

278 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

279 i‡(
ªsu…
) {

280 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

281  
EFAULT
;

284 
ªsu…
 = 
	`c›y°r
(
de°
, (c⁄° *)
u£r§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

286 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

287  
ªsu…
;

288 
	}
}

299 
	$c›yout°r
(c⁄° *
§c
, 
u£Ωå_t
 
u£rde°
, 
size_t
 
Àn
, size_à*
a˘uÆ
)

301 
ªsu…
;

302 
size_t
 
°›Àn
;

304 
ªsu…
 = 
	`c›ycheck
(
u£rde°
, 
Àn
, &
°›Àn
);

305 i‡(
ªsu…
) {

306  
ªsu…
;

309 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
c›yÁû
;

311 
ªsu…
 = 
	`£tjmp
(
cuπhªad
->
t_machdï
.
tm_c›yjmp
);

312 i‡(
ªsu…
) {

313 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

314  
EFAULT
;

317 
ªsu…
 = 
	`c›y°r
((*)
u£rde°
, 
§c
, 
Àn
, 
°›Àn
, 
a˘uÆ
);

319 
cuπhªad
->
t_machdï
.
tm_badÁu…func
 = 
NULL
;

320  
ªsu…
;

321 
	}
}

	@vm/kmalloc.c

30 
	~<ty≥s.h
>

31 
	~<lib.h
>

32 
	~<•ölock.h
>

33 
	~<vm.h
>

45 
	$fûl_dódbìf
(*
v±r
, 
size_t
 
Àn
)

47 
uöt32_t
 *
±r
 = 
v±r
;

48 
size_t
 
i
;

50 
i
=0; i<
Àn
/(
uöt32_t
); i++) {

51 
±r
[
i
] = 0xdeadbeef;

53 
	}
}

116 #unde‡
SLOW


117 #unde‡
SLOWER


118 #unde‡
GUARDS


119 #unde‡
LABELS


121 #unde‡
CHECKBEEF


122 #unde‡
CHECKGUARDS


126 #i‡
PAGE_SIZE
 == 4096

128 
	#NSIZES
 8

	)

129 c⁄° 
size_t
 
	gsizes
[
NSIZES
] = { 16, 32, 64, 128, 256, 512, 1024, 2048 };

131 
	#SMALLEST_SUBPAGE_SIZE
 16

	)

132 
	#LARGEST_SUBPAGE_SIZE
 2048

	)

134 #ñi‡
PAGE_SIZE
 == 8192

142 
	s‰ìli°
 {

143 
‰ìli°
 *
	m√xt
;

146 
	s∑gîef
 {

147 
∑gîef
 *
	m√xt_ßmesize
;

148 
∑gîef
 *
	m√xt_Æl
;

149 
vaddr_t
 
	m∑góddr_™d_blockty≥
;

150 
uöt16_t
 
	m‰ìli°_off£t
;

151 
uöt16_t
 
	mn‰ì
;

154 
	#INVALID_OFFSET
 (0xffff)

	)

156 
	#PR_PAGEADDR
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & 
PAGE_FRAME
)

	)

157 
	#PR_BLOCKTYPE
(
¥
Ë(’r)->
∑góddr_™d_blockty≥
 & ~
PAGE_FRAME
)

	)

158 
	#MKPAB
(
∑
, 
blk
Ë((’a)&
PAGE_FRAME
Ë| ((blkË& ~PAGE_FRAME))

	)

169 
•ölock
 
	gkmÆloc_•ölock
 = 
SPINLOCK_INITIALIZER
;

181 
	#NPAGEREFS_PER_PAGE
 (
PAGE_SIZE
 / (
∑gîef
))

	)

183 
	s∑gîeÂage
 {

184 
∑gîef
 
	mªfs
[
NPAGEREFS_PER_PAGE
];

192 
	#INUSE_WORDS
 (
NPAGEREFS_PER_PAGE
 / 32)

	)

194 
	skhóp_roŸ
 {

195 
∑gîeÂage
 *
	m∑ge
;

196 
uöt32_t
 
	m∑gîefs_öu£
[
INUSE_WORDS
];

197 
	mnumöu£
;

210 
	#NUM_PAGEREFPAGES
 16

	)

211 
	#TOTAL_PAGEREFS
 (
NUM_PAGEREFPAGES
 * 
NPAGEREFS_PER_PAGE
)

	)

213 
khóp_roŸ
 
	gkhó¥oŸs
[
NUM_PAGEREFPAGES
];

220 
	$Ælo˝agîeÂage
(
khóp_roŸ
 *
roŸ
)

222 
vaddr_t
 
va
;

224 
	`KASSERT
(
roŸ
->
∑ge
 =
NULL
);

231 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

232 
va
 = 
	`Æloc_k∑ges
(1);

233 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

234 i‡(
va
 == 0) {

235 
	`k¥ötf
("kmalloc: Couldn't getáÖagerefÖage\n");

238 
	`KASSERT
(
va
 % 
PAGE_SIZE
 == 0);

240 i‡(
roŸ
->
∑ge
 !
NULL
) {

242 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

243 
	`‰ì_k∑ges
(
va
);

244 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

246 
	`KASSERT
(
roŸ
->
∑ge
 !
NULL
);

250 
roŸ
->
∑ge
 = (
∑gîeÂage
 *)
va
;

251 
	}
}

257 
∑gîef
 *

258 
	$Ælo˝agîef
()

260 
i
,
j
;

261 
uöt32_t
 
k
;

262 
whichroŸ
;

263 
khóp_roŸ
 *
roŸ
;

265 
whichroŸ
=0; whichroŸ < 
NUM_PAGEREFPAGES
; whichroot++) {

266 
roŸ
 = &
khó¥oŸs
[
whichroŸ
];

267 i‡(
roŸ
->
numöu£
 >
NPAGEREFS_PER_PAGE
) {

274 
i
=0; i<
INUSE_WORDS
; i++) {

275 i‡(
roŸ
->
∑gîefs_öu£
[
i
]==0xffffffff) {

279 
k
=1,
j
=0; k!=0; k<<=1,j++) {

280 i‡((
roŸ
->
∑gîefs_öu£
[
i
] & 
k
)==0) {

281 
roŸ
->
∑gîefs_öu£
[
i
] |
k
;

282 
roŸ
->
numöu£
++;

283 i‡(
roŸ
->
∑ge
 =
NULL
) {

284 
	`Ælo˝agîeÂage
(
roŸ
);

286 i‡(
roŸ
->
∑ge
 =
NULL
) {

287  
NULL
;

289  &
roŸ
->
∑ge
->
ªfs
[
i
*32 + 
j
];

292 
	`KASSERT
(0);

297  
NULL
;

298 
	}
}

305 
	$‰ì∑gîef
(
∑gîef
 *
p
)

307 
size_t
 
i
, 
j
;

308 
uöt32_t
 
k
;

309 
whichroŸ
;

310 
khóp_roŸ
 *
roŸ
;

311 
∑gîeÂage
 *
∑ge
;

313 
whichroŸ
=0; whichroŸ < 
NUM_PAGEREFPAGES
; whichroot++) {

314 
roŸ
 = &
khó¥oŸs
[
whichroŸ
];

316 
∑ge
 = 
roŸ
->page;

317 i‡(
∑ge
 =
NULL
) {

318 
	`KASSERT
(
roŸ
->
numöu£
 == 0);

322 
j
 = 
p
-
∑ge
->
ªfs
;

324 i‡(
j
 < 
NPAGEREFS_PER_PAGE
) {

326 
i
 = 
j
/32;

327 
k
 = ((
uöt32_t
)1Ë<< (
j
%32);

328 
	`KASSERT
((
roŸ
->
∑gîefs_öu£
[
i
] & 
k
) != 0);

329 
roŸ
->
∑gîefs_öu£
[
i
] &~
k
;

330 
	`KASSERT
(
roŸ
->
numöu£
 > 0);

331 
roŸ
->
numöu£
--;

336 
	`KASSERT
(0);

337 
	}
}

345 
∑gîef
 *
	gsizeba£s
[
NSIZES
];

346 
∑gîef
 *
	gÆlba£
;

350 #ifde‡
GUARDS


353 
	#GUARD_RETBYTE
 0xa9

	)

355 
	#GUARD_FILLBYTE
 0xba

	)

357 
	#GUARD_HALFWORD
 0xb0b0

	)

360 
	#GUARD_OVERHEAD
 8

	)

363 
	#GUARD_PTROFFSET
 4

	)

370 
	$e°ablishgu¨db™d
(*
block
, 
size_t
 
˛õ¡size
, size_à
blocksize
)

372 
vaddr_t
 
lowgu¨d
, 
lowsize
, 
d©a
, 
ídd©a
, 
highgu¨d
, 
highsize
, 
i
;

374 
	`KASSERT
(
˛õ¡size
 + 
GUARD_OVERHEAD
 <
blocksize
);

375 
	`KASSERT
(
˛õ¡size
 < 65536U);

377 
lowgu¨d
 = (
vaddr_t
)
block
;

378 
lowsize
 = 
lowgu¨d
 + 2;

379 
d©a
 = 
lowsize
 + 2;

380 
ídd©a
 = 
d©a
 + 
˛õ¡size
;

381 
highgu¨d
 = 
lowgu¨d
 + 
blocksize
 - 4;

382 
highsize
 = 
highgu¨d
 + 2;

384 *(
uöt16_t
 *)
lowgu¨d
 = 
GUARD_HALFWORD
;

385 *(
uöt16_t
 *)
lowsize
 = 
˛õ¡size
;

386 
i
=
d©a
; i<
ídd©a
; i++) {

387 *(
uöt8_t
 *)
i
 = 
GUARD_RETBYTE
;

389 
i
=
ídd©a
; i<
highgu¨d
; i++) {

390 *(
uöt8_t
 *)
i
 = 
GUARD_FILLBYTE
;

392 *(
uöt16_t
 *)
highgu¨d
 = 
GUARD_HALFWORD
;

393 *(
uöt16_t
 *)
highsize
 = 
˛õ¡size
;

395  (*)
d©a
;

396 
	}
}

403 
	$checkgu¨db™d
(
vaddr_t
 
blockaddr
, 
size_t
 
smÆÀrblocksize
, size_à
blocksize
)

417 
vaddr_t
 
lowgu¨d
, 
lowsize
, 
d©a
, 
ídd©a
, 
highgu¨d
, 
highsize
, 
i
;

418 
˛õ¡size
;

420 
lowgu¨d
 = 
blockaddr
;

421 
lowsize
 = 
lowgu¨d
 + 2;

422 
d©a
 = 
lowsize
 + 2;

423 
highgu¨d
 = 
blockaddr
 + 
blocksize
 - 4;

424 
highsize
 = 
highgu¨d
 + 2;

426 
	`KASSERT
(*(
uöt16_t
 *)
lowgu¨d
 =
GUARD_HALFWORD
);

427 
	`KASSERT
(*(
uöt16_t
 *)
highgu¨d
 =
GUARD_HALFWORD
);

428 
˛õ¡size
 = *(
uöt16_t
 *)
lowsize
;

429 
	`KASSERT
(
˛õ¡size
 =*(
uöt16_t
 *)
highsize
);

430 
	`KASSERT
(
˛õ¡size
 + 
GUARD_OVERHEAD
 > 
smÆÀrblocksize
);

431 
	`KASSERT
(
˛õ¡size
 + 
GUARD_OVERHEAD
 <
blocksize
);

432 
ídd©a
 = 
d©a
 + 
˛õ¡size
;

433 
i
=
ídd©a
; i<
highgu¨d
; i++) {

434 
	`KASSERT
(*(
uöt8_t
 *)
i
 =
GUARD_FILLBYTE
);

436 
	}
}

440 
	#GUARD_OVERHEAD
 0

	)

447 #ifde‡
SLOWER


448 #i‚de‡
SLOW


449 
	#SLOW


	)

453 #ifde‡
CHECKBEEF


462 
	$checkdódbìf
(*
block
, 
size_t
 
blocksize
)

464 
uöt32_t
 *
±r
 = 
block
;

465 
size_t
 
i
;

467 
i
=1; i < 
blocksize
/(
uöt32_t
); i++) {

468 
	`KASSERT
(
±r
[
i
] == 0xdeadbeef);

470 
	}
}

473 #ifde‡
SLOW


495 
	$checksub∑ge
(
∑gîef
 *
¥
)

497 
vaddr_t
 
¥∑ge
, 
Êa
;

498 
‰ìli°
 *
Ê
;

499 
blkty≥
;

500 
n‰ì
=0;

501 
size_t
 
blocksize
;

502 #ifde‡
CHECKGUARDS


503 c⁄° 
maxblocks
 = 
PAGE_SIZE
 / 
SMALLEST_SUBPAGE_SIZE
;

504 c⁄° 
num‰ìw‹ds
 = 
	`DIVROUNDUP
(
maxblocks
, 32);

505 
uöt32_t
 
is‰ì
[
num‰ìw‹ds
], 
mask
;

506 
numblocks
, 
blocknum
, 
i
;

507 
size_t
 
smÆÀrblocksize
;

510 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

512 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

513 
	`KASSERT
(
¥
->
n‰ì
==0);

517 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

518 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

519 
	`KASSERT
(
blkty≥
 >0 && blkty≥ < 
NSIZES
);

520 
blocksize
 = 
sizes
[
blkty≥
];

522 #ifde‡
CHECKGUARDS


523 
smÆÀrblocksize
 = 
blkty≥
 > 0 ? 
sizes
[blktype - 1] : 0;

524 
i
=0; i<
num‰ìw‹ds
; i++) {

525 
is‰ì
[
i
] = 0;

529 #ifde‡
__mùs__


530 
	`KASSERT
(
¥∑ge
 >
MIPS_KSEG0
);

531 
	`KASSERT
(
¥∑ge
 < 
MIPS_KSEG1
);

534 
	`KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

535 
	`KASSERT
(
¥
->
‰ìli°_off£t
 % 
blocksize
 == 0);

537 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

538 
Ê
 = (
‰ìli°
 *)
Êa
;

540 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

541 
Êa
 = (
vaddr_t
)
Ê
;

542 
	`KASSERT
(
Êa
 >
¥∑ge
 && fœ <ÖΩagê+ 
PAGE_SIZE
);

543 
	`KASSERT
((
Êa
-
¥∑ge
Ë% 
blocksize
 == 0);

544 #ifde‡
CHECKBEEF


545 
	`checkdódbìf
(
Ê
, 
blocksize
);

547 #ifde‡
CHECKGUARDS


548 
blocknum
 = (
Êa
-
¥∑ge
Ë/ 
blocksize
;

549 
mask
 = 1U << (
blocknum
 % 32);

550 
	`KASSERT
((
is‰ì
[
blocknum
 / 32] & 
mask
) == 0);

551 
is‰ì
[
blocknum
 / 32] |
mask
;

553 
	`KASSERT
(
Ê
->
√xt
 != fl);

554 
n‰ì
++;

556 
	`KASSERT
(
n‰ì
==
¥
->nfree);

558 #ifde‡
CHECKGUARDS


559 
numblocks
 = 
PAGE_SIZE
 / 
blocksize
;

560 
i
=0; i<
numblocks
; i++) {

561 
mask
 = 1U << (
i
 % 32);

562 i‡((
is‰ì
[
i
 / 32] & 
mask
) == 0) {

563 
	`checkgu¨db™d
(
¥∑ge
 + 
i
 * 
blocksize
,

564 
smÆÀrblocksize
, 
blocksize
);

568 
	}
}

570 
	#checksub∑ge
(
¥
Ë(()’r))

	)

573 #ifde‡
SLOWER


580 
	$checksub∑ges
()

582 
∑gîef
 *
¥
;

583 
i
;

584 
sc
=0, 
ac
=0;

586 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

588 
i
=0; i<
NSIZES
; i++) {

589 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

590 
	`checksub∑ge
(
¥
);

591 
	`KASSERT
(
sc
 < 
TOTAL_PAGEREFS
);

592 
sc
++;

596 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

597 
	`checksub∑ge
(
¥
);

598 
	`KASSERT
(
ac
 < 
TOTAL_PAGEREFS
);

599 
ac
++;

602 
	`KASSERT
(
sc
==
ac
);

603 
	}
}

605 
	#checksub∑ges
()

	)

610 #ifde‡
LABELS


612 
	#LABEL_PTROFFSET
 (
mÆlo˛abñ
)

	)

613 
	#LABEL_OVERHEAD
 
LABEL_PTROFFSET


	)

615 
	smÆlo˛abñ
 {

616 
vaddr_t
 
	mœbñ
;

617 
	mgíî©i⁄
;

620 
	gmÆlocgíî©i⁄
;

627 
	$e°ablishœbñ
(*
block
, 
vaddr_t
 
œbñ
)

629 
mÆlo˛abñ
 *
ml
;

631 
ml
 = 
block
;

632 
ml
->
œbñ
 =Üabel;

633 
ml
->
gíî©i⁄
 = 
mÆlocgíî©i⁄
;

634 
ml
++;

635  
ml
;

636 
	}
}

640 
	$dump_sub∑ge
(
∑gîef
 *
¥
, 
gíî©i⁄
)

642 
blocksize
 = 
sizes
[
	`PR_BLOCKTYPE
(
¥
)];

643 
numblocks
 = 
PAGE_SIZE
 / 
blocksize
;

644 
num‰ìw‹ds
 = 
	`DIVROUNDUP
(
numblocks
, 32);

645 
uöt32_t
 
is‰ì
[
num‰ìw‹ds
], 
mask
;

646 
vaddr_t
 
¥∑ge
;

647 
‰ìli°
 *
Ê
;

648 
vaddr_t
 
blockaddr
;

649 
mÆlo˛abñ
 *
ml
;

650 
i
;

652 
i
=0; i<
num‰ìw‹ds
; i++) {

653 
is‰ì
[
i
] = 0;

656 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

657 
Ê
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

658 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

659 
i
 = ((
vaddr_t
)
Ê
 - 
¥∑ge
Ë/ 
blocksize
;

660 
mask
 = 1U << (
i
 % 32);

661 
is‰ì
[
i
 / 32] |
mask
;

664 
i
=0; i<
numblocks
; i++) {

665 
mask
 = 1U << (
i
 % 32);

666 i‡(
is‰ì
[
i
 / 32] & 
mask
) {

669 
blockaddr
 = 
¥∑ge
 + 
i
 * 
blocksize
;

670 
ml
 = (
mÆlo˛abñ
 *)
blockaddr
;

671 i‡(
ml
->
gíî©i⁄
 != generation) {

674 
	`k¥ötf
("%5zu bytesát %p,állocatedát %p\n",

675 
blocksize
, (*)
blockaddr
, (*)
ml
->
œbñ
);

677 
	}
}

681 
	$dump_sub∑ges
(
gíî©i⁄
)

683 
∑gîef
 *
¥
;

684 
i
;

686 
	`k¥ötf
("RemaöögáŒoˇti⁄†‰om gíî©i⁄ %u:\n", 
gíî©i⁄
);

687 
i
=0; i<
NSIZES
; i++) {

688 
¥
 = 
sizeba£s
[
i
];Ö∏!
NULL
;Ö∏¥->
√xt_ßmesize
) {

689 
	`dump_sub∑ge
(
¥
, 
gíî©i⁄
);

692 
	}
}

696 
	#LABEL_OVERHEAD
 0

	)

701 
	$khóp_√xtgíî©i⁄
()

703 #ifde‡
LABELS


704 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

705 
mÆlocgíî©i⁄
++;

706 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

708 
	}
}

711 
	$khóp_dump
()

713 #ifde‡
LABELS


715 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

716 
	`dump_sub∑ges
(
mÆlocgíî©i⁄
);

717 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

719 
	`k¥ötf
("Enable LABELS in kmalloc.cÅo useÅhis functionality.\n");

721 
	}
}

724 
	$khóp_dum∑Œ
()

726 #ifde‡
LABELS


727 
i
;

730 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

731 
i
=0; i<=
mÆlocgíî©i⁄
; i++) {

732 
	`dump_sub∑ges
(
i
);

734 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

736 
	`k¥ötf
("Enable LABELS in kmalloc.cÅo useÅhis functionality.\n");

738 
	}
}

747 
	$sub∑ge_°©s
(
∑gîef
 *
¥
)

749 
vaddr_t
 
¥∑ge
, 
Êa
;

750 
‰ìli°
 *
Ê
;

751 
blkty≥
;

752 
i
, 
n
, 
ödex
;

753 
uöt32_t
 
‰ìm≠
[
PAGE_SIZE
 / (
SMALLEST_SUBPAGE_SIZE
*32)];

755 
	`checksub∑ge
(
¥
);

756 
	`KASSERT
(
	`•ölock_do_i_hﬁd
(&
kmÆloc_•ölock
));

759 
i
=0; i<
	`ARRAYCOUNT
(
‰ìm≠
); i++) {

760 
‰ìm≠
[
i
] = 0;

763 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

764 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

765 
	`KASSERT
(
blkty≥
 >0 && blkty≥ < 
NSIZES
);

768 
n
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

769 
	`KASSERT
(
n
 <32 * 
	`ARRAYCOUNT
(
‰ìm≠
));

771 i‡(
¥
->
‰ìli°_off£t
 !
INVALID_OFFSET
) {

772 
Êa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

773 
Ê
 = (
‰ìli°
 *)
Êa
;

775 ; 
Ê
 !
NULL
; f»Ê->
√xt
) {

776 
Êa
 = (
vaddr_t
)
Ê
;

777 
ödex
 = (
Êa
-
¥∑ge
Ë/ 
sizes
[
blkty≥
];

778 
	`KASSERT
(
ödex
<
n
);

779 
‰ìm≠
[
ödex
/32] |= (1<<(index%32));

783 
	`k¥ötf
("at 0x%08lx: size %-4lu %u/%u free\n",

784 ()
¥∑ge
, (Ë
sizes
[
blkty≥
],

785 (Ë
¥
->
n‰ì
, 
n
);

786 
	`k¥ötf
(" ");

787 
i
=0; i<
n
; i++) {

788 
vÆ
 = (
‰ìm≠
[
i
/32] & (1<<(i%32)))!=0;

789 
	`k¥ötf
("%c", 
vÆ
 ? '.' : '*');

790 i‡(
i
%64==63 && i<
n
-1) {

791 
	`k¥ötf
("\n ");

794 
	`k¥ötf
("\n");

795 
	}
}

801 
	$khóp_¥öt°©s
()

803 
∑gîef
 *
¥
;

806 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

808 
	`k¥ötf
("Subpageállocator status:\n");

810 
¥
 = 
Ælba£
;Ö∏!
NULL
;Ö∏¥->
√xt_Æl
) {

811 
	`sub∑ge_°©s
(
¥
);

814 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

815 
	}
}

824 
	$ªmove_li°s
(
∑gîef
 *
¥
, 
blkty≥
)

826 
∑gîef
 **
guy
;

828 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

830 
guy
 = &
sizeba£s
[
blkty≥
]; *guy; guy = &(*guy)->
√xt_ßmesize
) {

831 
	`checksub∑ge
(*
guy
);

832 i‡(*
guy
 =
¥
) {

833 *
guy
 = 
¥
->
√xt_ßmesize
;

838 
guy
 = &
Ælba£
; *guy; guy = &(*guy)->
√xt_Æl
) {

839 
	`checksub∑ge
(*
guy
);

840 i‡(*
guy
 =
¥
) {

841 *
guy
 = 
¥
->
√xt_Æl
;

845 
	}
}

852 
ölöe


853 
	$blockty≥
(
size_t
 
˛õ¡sz
)

855 
i
;

856 
i
=0; i<
NSIZES
; i++) {

857 i‡(
˛õ¡sz
 <
sizes
[
i
]) {

858  
i
;

862 
	`∑nic
("Subpageállocator cannot handleállocation of size %zu\n",

863 
˛õ¡sz
);

867 
	}
}

875 
sub∑ge_kmÆloc
(
size_t
 
sz


876 #ifde‡
LABELS


877 , 
vaddr_t
 
œbñ


881 
	gblkty≥
;

882 
∑gîef
 *
	g¥
;

883 
vaddr_t
 
	g¥∑ge
;

884 
vaddr_t
 
	gÊa
;

885 
‰ìli°
 *vﬁ©ûê
	gÊ
;

886 *
	gªçå
;

888 vﬁ©ûê
	gi
;

890 #ifde‡
GUARDS


891 
size_t
 
	g˛õ¡sz
;

894 #ifde‡
GUARDS


895 
	g˛õ¡sz
 = 
sz
;

896 
	gsz
 +
GUARD_OVERHEAD
;

898 #ifde‡
LABELS


899 #ifde‡
GUARDS


901 
	g˛õ¡sz
 +
LABEL_PTROFFSET
;

903 
	gsz
 +
LABEL_PTROFFSET
;

905 
	gblkty≥
 = 
blockty≥
(
sz
);

906 #ifde‡
GUARDS


907 
	gsz
 = 
sizes
[
blkty≥
];

910 
•ölock_acquúe
(&
kmÆloc_•ölock
);

912 
checksub∑ges
();

914 
	g¥
 = 
sizeba£s
[
blkty≥
];Ö∏!
NULL
;Ö∏
¥
->
√xt_ßmesize
) {

917 
KASSERT
(
PR_BLOCKTYPE
(
¥
Ë=
blkty≥
);

918 
checksub∑ge
(
¥
);

920 i‡(
	g¥
->
	gn‰ì
 > 0) {

922 
	gdﬂŒoc
:

924 
KASSERT
(
¥
->
‰ìli°_off£t
 < 
PAGE_SIZE
);

925 
	g¥∑ge
 = 
PR_PAGEADDR
(
¥
);

926 
	gÊa
 = 
¥∑ge
 + 
¥
->
‰ìli°_off£t
;

927 
	gÊ
 = (
‰ìli°
 *)
Êa
;

929 
	gªçå
 = 
Ê
;

930 
	gÊ
 = 
Ê
->
√xt
;

931 
	g¥
->
	gn‰ì
--;

933 i‡(
	gÊ
 !
NULL
) {

934 
KASSERT
(
¥
->
n‰ì
 > 0);

935 
	gÊa
 = (
vaddr_t
)
Ê
;

936 
KASSERT
(
Êa
 - 
¥∑ge
 < 
PAGE_SIZE
);

937 
	g¥
->
	g‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

940 
KASSERT
(
¥
->
n‰ì
 == 0);

941 
	g¥
->
	g‰ìli°_off£t
 = 
INVALID_OFFSET
;

943 #ifde‡
GUARDS


944 
	gªçå
 = 
e°ablishgu¨db™d
(
ªçå
, 
˛õ¡sz
, 
sz
);

946 #ifde‡
LABELS


947 
	gªçå
 = 
e°ablishœbñ
(
ªçå
, 
œbñ
);

950 
checksub∑ges
();

952 
•ölock_ªÀa£
(&
kmÆloc_•ölock
);

953  
	gªçå
;

966 
•ölock_ªÀa£
(&
kmÆloc_•ölock
);

967 
	g¥∑ge
 = 
Æloc_k∑ges
(1);

968 i‡(
	g¥∑ge
==0) {

970 
k¥ötf
("kmalloc: Subpageállocator couldn't getáÖage\n");

971  
	gNULL
;

973 
KASSERT
(
¥∑ge
 % 
PAGE_SIZE
 == 0);

974 #ifde‡
CHECKBEEF


976 
fûl_dódbìf
((*)
¥∑ge
, 
PAGE_SIZE
);

978 
•ölock_acquúe
(&
kmÆloc_•ölock
);

980 
	g¥
 = 
Ælo˝agîef
();

981 i‡(
	g¥
==
NULL
) {

983 
•ölock_ªÀa£
(&
kmÆloc_•ölock
);

984 
‰ì_k∑ges
(
¥∑ge
);

985 
k¥ötf
("kmalloc: Subpageállocator couldn't getÖageref\n");

986  
	gNULL
;

989 
	g¥
->
	g∑góddr_™d_blockty≥
 = 
MKPAB
(
¥∑ge
, 
blkty≥
);

990 
	g¥
->
	gn‰ì
 = 
PAGE_SIZE
 / 
sizes
[
blkty≥
];

998 
	gÊa
 = 
¥∑ge
;

999 
	gÊ
 = (
‰ìli°
 *)
Êa
;

1000 
	gÊ
->
	g√xt
 = 
NULL
;

1001 
	gi
=1; i<
	g¥
->
	gn‰ì
; i++) {

1002 
	gÊ
 = (
‰ìli°
 *)(
Êa
 + 
i
*
sizes
[
blkty≥
]);

1003 
	gÊ
->
	g√xt
 = (
‰ìli°
 *)(
Êa
 + (
i
-1)*
sizes
[
blkty≥
]);

1004 
KASSERT
(
Ê
 !Ê->
√xt
);

1006 
	gÊa
 = (
vaddr_t
Ë
Ê
;

1007 
	g¥
->
	g‰ìli°_off£t
 = 
Êa
 - 
¥∑ge
;

1008 
KASSERT
(
¥
->
‰ìli°_off£t
 =’r->
n‰ì
-1)*
sizes
[
blkty≥
]);

1010 
	g¥
->
	g√xt_ßmesize
 = 
sizeba£s
[
blkty≥
];

1011 
	gsizeba£s
[
blkty≥
] = 
¥
;

1013 
	g¥
->
	g√xt_Æl
 = 
Ælba£
;

1014 
	gÆlba£
 = 
¥
;

1017 
	gdﬂŒoc
;

1026 
	$sub∑ge_k‰ì
(*
±r
)

1028 
blkty≥
;

1029 
vaddr_t
 
±øddr
;

1030 
∑gîef
 *
¥
;

1031 
vaddr_t
 
¥∑ge
;

1032 
vaddr_t
 
Êa
;

1033 
‰ìli°
 *
Ê
;

1034 
vaddr_t
 
off£t
;

1035 #ifde‡
GUARDS


1036 
size_t
 
blocksize
, 
smÆÀrblocksize
;

1039 
±øddr
 = (
vaddr_t
)
±r
;

1040 #ifde‡
GUARDS


1041 i‡(
±øddr
 % 
PAGE_SIZE
 == 0) {

1054 
±øddr
 -
GUARD_PTROFFSET
;

1056 #ifde‡
LABELS


1057 i‡(
±øddr
 % 
PAGE_SIZE
 == 0) {

1061 
±øddr
 -
LABEL_PTROFFSET
;

1064 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

1066 
	`checksub∑ges
();

1068 
¥
 = 
Ælba£
;Ör;Ö∏¥->
√xt_Æl
) {

1069 
¥∑ge
 = 
	`PR_PAGEADDR
(
¥
);

1070 
blkty≥
 = 
	`PR_BLOCKTYPE
(
¥
);

1071 
	`KASSERT
(
blkty≥
 >0 && blkty≥ < 
NSIZES
);

1074 
	`KASSERT
(
blkty≥
>=0 && blkty≥<
NSIZES
);

1075 
	`checksub∑ge
(
¥
);

1077 i‡(
±øddr
 >
¥∑ge
 &&Öåadd∏<ÖΩagê+ 
PAGE_SIZE
) {

1082 i‡(
¥
==
NULL
) {

1084 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1088 
off£t
 = 
±øddr
 - 
¥∑ge
;

1091 i‡(
off£t
 >
PAGE_SIZE
 || off£à% 
sizes
[
blkty≥
] != 0) {

1092 
	`∑nic
("k‰ì: sub∑gê‰ì o‡övÆidádd∏%p\n", 
±r
);

1095 #ifde‡
GUARDS


1096 
blocksize
 = 
sizes
[
blkty≥
];

1097 
smÆÀrblocksize
 = 
blkty≥
 > 0 ? 
sizes
[blktype - 1] : 0;

1098 
	`checkgu¨db™d
(
±øddr
, 
smÆÀrblocksize
, 
blocksize
);

1105 
	`fûl_dódbìf
((*)
±øddr
, 
sizes
[
blkty≥
]);

1112 
Êa
 = 
¥∑ge
 + 
off£t
;

1113 
Ê
 = (
‰ìli°
 *)
Êa
;

1114 i‡(
¥
->
‰ìli°_off£t
 =
INVALID_OFFSET
) {

1115 
Ê
->
√xt
 = 
NULL
;

1117 
Ê
->
√xt
 = (
‰ìli°
 *)(
¥∑ge
 + 
¥
->
‰ìli°_off£t
);

1120 #ifde‡
SLOW


1122 
‰ìli°
 *
Ê2
;

1124 
Ê2
 = 
Ê
->
√xt
; fl2 !
NULL
; fl2 = fl2->next) {

1125 
	`KASSERT
(
Ê2
 !
Ê
);

1130 
	`KASSERT
(
Ê
 !Ê->
√xt
);

1133 
¥
->
‰ìli°_off£t
 = 
off£t
;

1134 
¥
->
n‰ì
++;

1136 
	`KASSERT
(
¥
->
n‰ì
 <
PAGE_SIZE
 / 
sizes
[
blkty≥
]);

1137 i‡(
¥
->
n‰ì
 =
PAGE_SIZE
 / 
sizes
[
blkty≥
]) {

1139 
	`ªmove_li°s
(
¥
, 
blkty≥
);

1140 
	`‰ì∑gîef
(
¥
);

1142 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1143 
	`‰ì_k∑ges
(
¥∑ge
);

1146 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1149 #ifde‡
SLOWER


1150 
	`•ölock_acquúe
(&
kmÆloc_•ölock
);

1151 
	`checksub∑ges
();

1152 
	`•ölock_ªÀa£
(&
kmÆloc_•ölock
);

1156 
	}
}

1166 
	$kmÆloc
(
size_t
 
sz
)

1168 
size_t
 
checksz
;

1169 #ifde‡
LABELS


1170 
vaddr_t
 
œbñ
;

1173 #ifde‡
LABELS


1174 #ifde‡
__GNUC__


1175 
œbñ
 = (
vaddr_t
)
	`__buûtö_ªtu∫_addªss
(0);

1181 
checksz
 = 
sz
 + 
GUARD_OVERHEAD
 + 
LABEL_OVERHEAD
;

1182 i‡(
checksz
 >
LARGEST_SUBPAGE_SIZE
) {

1183 
≈ages
;

1184 
vaddr_t
 
addªss
;

1187 
≈ages
 = (
sz
 + 
PAGE_SIZE
 - 1)/PAGE_SIZE;

1188 
addªss
 = 
	`Æloc_k∑ges
(
≈ages
);

1189 i‡(
addªss
==0) {

1190  
NULL
;

1192 
	`KASSERT
(
addªss
 % 
PAGE_SIZE
 == 0);

1194  (*)
addªss
;

1197 #ifde‡
LABELS


1198  
	`sub∑ge_kmÆloc
(
sz
, 
œbñ
);

1200  
	`sub∑ge_kmÆloc
(
sz
);

1202 
	}
}

1208 
	$k‰ì
(*
±r
)

1213 i‡(
±r
 =
NULL
) {

1215 } i‡(
	`sub∑ge_k‰ì
(
±r
)) {

1216 
	`KASSERT
((
vaddr_t
)
±r
%
PAGE_SIZE
==0);

1217 
	`‰ì_k∑ges
((
vaddr_t
)
±r
);

1219 
	}
}

	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_AARCH64
 183

	)

253 
	#EM_TILEPRO
 188

	)

254 
	#EM_MICROBLAZE
 189

	)

255 
	#EM_TILEGX
 191

	)

256 
	#EM_NUM
 192

	)

262 
	#EM_ALPHA
 0x9026

	)

266 
	#EV_NONE
 0

	)

267 
	#EV_CURRENT
 1

	)

268 
	#EV_NUM
 2

	)

274 
Elf32_W‹d
 
	msh_«me
;

275 
Elf32_W‹d
 
	msh_ty≥
;

276 
Elf32_W‹d
 
	msh_Êags
;

277 
Elf32_Addr
 
	msh_addr
;

278 
Elf32_Off
 
	msh_off£t
;

279 
Elf32_W‹d
 
	msh_size
;

280 
Elf32_W‹d
 
	msh_lök
;

281 
Elf32_W‹d
 
	msh_öfo
;

282 
Elf32_W‹d
 
	msh_addølign
;

283 
Elf32_W‹d
 
	msh_ítsize
;

284 } 
	tElf32_Shdr
;

288 
Elf64_W‹d
 
	msh_«me
;

289 
Elf64_W‹d
 
	msh_ty≥
;

290 
Elf64_Xw‹d
 
	msh_Êags
;

291 
Elf64_Addr
 
	msh_addr
;

292 
Elf64_Off
 
	msh_off£t
;

293 
Elf64_Xw‹d
 
	msh_size
;

294 
Elf64_W‹d
 
	msh_lök
;

295 
Elf64_W‹d
 
	msh_öfo
;

296 
Elf64_Xw‹d
 
	msh_addølign
;

297 
Elf64_Xw‹d
 
	msh_ítsize
;

298 } 
	tElf64_Shdr
;

302 
	#SHN_UNDEF
 0

	)

303 
	#SHN_LORESERVE
 0xff00

	)

304 
	#SHN_LOPROC
 0xff00

	)

305 
	#SHN_BEFORE
 0xff00

	)

307 
	#SHN_AFTER
 0xff01

	)

309 
	#SHN_HIPROC
 0xff1‡

	)

310 
	#SHN_LOOS
 0xff20

	)

311 
	#SHN_HIOS
 0xff3‡

	)

312 
	#SHN_ABS
 0xfff1

	)

313 
	#SHN_COMMON
 0xfff2

	)

314 
	#SHN_XINDEX
 0xfff‡

	)

315 
	#SHN_HIRESERVE
 0xfff‡

	)

319 
	#SHT_NULL
 0

	)

320 
	#SHT_PROGBITS
 1

	)

321 
	#SHT_SYMTAB
 2

	)

322 
	#SHT_STRTAB
 3

	)

323 
	#SHT_RELA
 4

	)

324 
	#SHT_HASH
 5

	)

325 
	#SHT_DYNAMIC
 6

	)

326 
	#SHT_NOTE
 7

	)

327 
	#SHT_NOBITS
 8

	)

328 
	#SHT_REL
 9

	)

329 
	#SHT_SHLIB
 10

	)

330 
	#SHT_DYNSYM
 11

	)

331 
	#SHT_INIT_ARRAY
 14

	)

332 
	#SHT_FINI_ARRAY
 15

	)

333 
	#SHT_PREINIT_ARRAY
 16

	)

334 
	#SHT_GROUP
 17

	)

335 
	#SHT_SYMTAB_SHNDX
 18

	)

336 
	#SHT_NUM
 19

	)

337 
	#SHT_LOOS
 0x60000000

	)

338 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

339 
	#SHT_GNU_HASH
 0x6ffffff6

	)

340 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

341 
	#SHT_CHECKSUM
 0x6ffffff8

	)

342 
	#SHT_LOSUNW
 0x6fffffÁ

	)

343 
	#SHT_SUNW_move
 0x6fffffÁ

	)

344 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

345 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

346 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

347 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

348 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

349 
	#SHT_HISUNW
 0x6ffffff‡

	)

350 
	#SHT_HIOS
 0x6ffffff‡

	)

351 
	#SHT_LOPROC
 0x70000000

	)

352 
	#SHT_HIPROC
 0x7ffffff‡

	)

353 
	#SHT_LOUSER
 0x80000000

	)

354 
	#SHT_HIUSER
 0x8ffffff‡

	)

358 
	#SHF_WRITE
 (1 << 0Ë

	)

359 
	#SHF_ALLOC
 (1 << 1Ë

	)

360 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

361 
	#SHF_MERGE
 (1 << 4Ë

	)

362 
	#SHF_STRINGS
 (1 << 5Ë

	)

363 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

364 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

365 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

367 
	#SHF_GROUP
 (1 << 9Ë

	)

368 
	#SHF_TLS
 (1 << 10Ë

	)

369 
	#SHF_MASKOS
 0x0ff00000

	)

370 
	#SHF_MASKPROC
 0xf0000000

	)

371 
	#SHF_ORDERED
 (1 << 30Ë

	)

373 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

377 
	#GRP_COMDAT
 0x1

	)

383 
Elf32_W‹d
 
	m°_«me
;

384 
Elf32_Addr
 
	m°_vÆue
;

385 
Elf32_W‹d
 
	m°_size
;

386 
	m°_öfo
;

387 
	m°_Ÿhî
;

388 
Elf32_Se˘i⁄
 
	m°_shndx
;

389 } 
	tElf32_Sym
;

393 
Elf64_W‹d
 
	m°_«me
;

394 
	m°_öfo
;

395 
	m°_Ÿhî
;

396 
Elf64_Se˘i⁄
 
	m°_shndx
;

397 
Elf64_Addr
 
	m°_vÆue
;

398 
Elf64_Xw‹d
 
	m°_size
;

399 } 
	tElf64_Sym
;

406 
Elf32_HÆf
 
	msi_boundto
;

407 
Elf32_HÆf
 
	msi_Êags
;

408 } 
	tElf32_Symöfo
;

412 
Elf64_HÆf
 
	msi_boundto
;

413 
Elf64_HÆf
 
	msi_Êags
;

414 } 
	tElf64_Symöfo
;

417 
	#SYMINFO_BT_SELF
 0xfff‡

	)

418 
	#SYMINFO_BT_PARENT
 0xff„

	)

419 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

422 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

423 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

424 
	#SYMINFO_FLG_COPY
 0x0004

	)

425 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

428 
	#SYMINFO_NONE
 0

	)

429 
	#SYMINFO_CURRENT
 1

	)

430 
	#SYMINFO_NUM
 2

	)

435 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

436 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

437 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

440 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

441 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

442 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

446 
	#STB_LOCAL
 0

	)

447 
	#STB_GLOBAL
 1

	)

448 
	#STB_WEAK
 2

	)

449 
	#STB_NUM
 3

	)

450 
	#STB_LOOS
 10

	)

451 
	#STB_GNU_UNIQUE
 10

	)

452 
	#STB_HIOS
 12

	)

453 
	#STB_LOPROC
 13

	)

454 
	#STB_HIPROC
 15

	)

458 
	#STT_NOTYPE
 0

	)

459 
	#STT_OBJECT
 1

	)

460 
	#STT_FUNC
 2

	)

461 
	#STT_SECTION
 3

	)

462 
	#STT_FILE
 4

	)

463 
	#STT_COMMON
 5

	)

464 
	#STT_TLS
 6

	)

465 
	#STT_NUM
 7

	)

466 
	#STT_LOOS
 10

	)

467 
	#STT_GNU_IFUNC
 10

	)

468 
	#STT_HIOS
 12

	)

469 
	#STT_LOPROC
 13

	)

470 
	#STT_HIPROC
 15

	)

477 
	#STN_UNDEF
 0

	)

482 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

485 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

488 
	#STV_DEFAULT
 0

	)

489 
	#STV_INTERNAL
 1

	)

490 
	#STV_HIDDEN
 2

	)

491 
	#STV_PROTECTED
 3

	)

498 
Elf32_Addr
 
	mr_off£t
;

499 
Elf32_W‹d
 
	mr_öfo
;

500 } 
	tElf32_Rñ
;

509 
Elf64_Addr
 
	mr_off£t
;

510 
Elf64_Xw‹d
 
	mr_öfo
;

511 } 
	tElf64_Rñ
;

517 
Elf32_Addr
 
	mr_off£t
;

518 
Elf32_W‹d
 
	mr_öfo
;

519 
Elf32_Sw‹d
 
	mr_addíd
;

520 } 
	tElf32_Rña
;

524 
Elf64_Addr
 
	mr_off£t
;

525 
Elf64_Xw‹d
 
	mr_öfo
;

526 
Elf64_Sxw‹d
 
	mr_addíd
;

527 } 
	tElf64_Rña
;

531 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

532 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

533 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

535 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

536 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

537 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

543 
Elf32_W‹d
 
	mp_ty≥
;

544 
Elf32_Off
 
	mp_off£t
;

545 
Elf32_Addr
 
	mp_vaddr
;

546 
Elf32_Addr
 
	mp_∑ddr
;

547 
Elf32_W‹d
 
	mp_fûesz
;

548 
Elf32_W‹d
 
	mp_memsz
;

549 
Elf32_W‹d
 
	mp_Êags
;

550 
Elf32_W‹d
 
	mp_Æign
;

551 } 
	tElf32_Phdr
;

555 
Elf64_W‹d
 
	mp_ty≥
;

556 
Elf64_W‹d
 
	mp_Êags
;

557 
Elf64_Off
 
	mp_off£t
;

558 
Elf64_Addr
 
	mp_vaddr
;

559 
Elf64_Addr
 
	mp_∑ddr
;

560 
Elf64_Xw‹d
 
	mp_fûesz
;

561 
Elf64_Xw‹d
 
	mp_memsz
;

562 
Elf64_Xw‹d
 
	mp_Æign
;

563 } 
	tElf64_Phdr
;

569 
	#PN_XNUM
 0xffff

	)

573 
	#PT_NULL
 0

	)

574 
	#PT_LOAD
 1

	)

575 
	#PT_DYNAMIC
 2

	)

576 
	#PT_INTERP
 3

	)

577 
	#PT_NOTE
 4

	)

578 
	#PT_SHLIB
 5

	)

579 
	#PT_PHDR
 6

	)

580 
	#PT_TLS
 7

	)

581 
	#PT_NUM
 8

	)

582 
	#PT_LOOS
 0x60000000

	)

583 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

584 
	#PT_GNU_STACK
 0x6474e551

	)

585 
	#PT_GNU_RELRO
 0x6474e552

	)

586 
	#PT_LOSUNW
 0x6fffffÁ

	)

587 
	#PT_SUNWBSS
 0x6fffffÁ

	)

588 
	#PT_SUNWSTACK
 0x6ffffffb

	)

589 
	#PT_HISUNW
 0x6fffffff

	)

590 
	#PT_HIOS
 0x6ffffff‡

	)

591 
	#PT_LOPROC
 0x70000000

	)

592 
	#PT_HIPROC
 0x7ffffff‡

	)

596 
	#PF_X
 (1 << 0Ë

	)

597 
	#PF_W
 (1 << 1Ë

	)

598 
	#PF_R
 (1 << 2Ë

	)

599 
	#PF_MASKOS
 0x0ff00000

	)

600 
	#PF_MASKPROC
 0xf0000000

	)

604 
	#NT_PRSTATUS
 1

	)

605 
	#NT_FPREGSET
 2

	)

606 
	#NT_PRPSINFO
 3

	)

607 
	#NT_PRXREG
 4

	)

608 
	#NT_TASKSTRUCT
 4

	)

609 
	#NT_PLATFORM
 5

	)

610 
	#NT_AUXV
 6

	)

611 
	#NT_GWINDOWS
 7

	)

612 
	#NT_ASRS
 8

	)

613 
	#NT_PSTATUS
 10

	)

614 
	#NT_PSINFO
 13

	)

615 
	#NT_PRCRED
 14

	)

616 
	#NT_UTSNAME
 15

	)

617 
	#NT_LWPSTATUS
 16

	)

618 
	#NT_LWPSINFO
 17

	)

619 
	#NT_PRFPXREG
 20

	)

620 
	#NT_SIGINFO
 0x53494749

	)

622 
	#NT_FILE
 0x46494c45

	)

624 
	#NT_PRXFPREG
 0x46e62b7‡

	)

625 
	#NT_PPC_VMX
 0x100

	)

626 
	#NT_PPC_SPE
 0x101

	)

627 
	#NT_PPC_VSX
 0x102

	)

628 
	#NT_386_TLS
 0x200

	)

629 
	#NT_386_IOPERM
 0x201

	)

630 
	#NT_X86_XSTATE
 0x202

	)

631 
	#NT_S390_HIGH_GPRS
 0x300

	)

632 
	#NT_S390_TIMER
 0x301

	)

633 
	#NT_S390_TODCMP
 0x302

	)

634 
	#NT_S390_TODPREG
 0x303

	)

635 
	#NT_S390_CTRS
 0x304

	)

636 
	#NT_S390_PREFIX
 0x305

	)

637 
	#NT_S390_LAST_BREAK
 0x306

	)

638 
	#NT_S390_SYSTEM_CALL
 0x307

	)

639 
	#NT_S390_TDB
 0x308

	)

640 
	#NT_ARM_VFP
 0x400

	)

641 
	#NT_ARM_TLS
 0x401

	)

642 
	#NT_ARM_HW_BREAK
 0x402

	)

643 
	#NT_ARM_HW_WATCH
 0x403

	)

647 
	#NT_VERSION
 1

	)

654 
Elf32_Sw‹d
 
	md_èg
;

657 
Elf32_W‹d
 
	md_vÆ
;

658 
Elf32_Addr
 
	md_±r
;

659 } 
	md_un
;

660 } 
	tElf32_Dyn
;

664 
Elf64_Sxw‹d
 
	md_èg
;

667 
Elf64_Xw‹d
 
	md_vÆ
;

668 
Elf64_Addr
 
	md_±r
;

669 } 
	md_un
;

670 } 
	tElf64_Dyn
;

674 
	#DT_NULL
 0

	)

675 
	#DT_NEEDED
 1

	)

676 
	#DT_PLTRELSZ
 2

	)

677 
	#DT_PLTGOT
 3

	)

678 
	#DT_HASH
 4

	)

679 
	#DT_STRTAB
 5

	)

680 
	#DT_SYMTAB
 6

	)

681 
	#DT_RELA
 7

	)

682 
	#DT_RELASZ
 8

	)

683 
	#DT_RELAENT
 9

	)

684 
	#DT_STRSZ
 10

	)

685 
	#DT_SYMENT
 11

	)

686 
	#DT_INIT
 12

	)

687 
	#DT_FINI
 13

	)

688 
	#DT_SONAME
 14

	)

689 
	#DT_RPATH
 15

	)

690 
	#DT_SYMBOLIC
 16

	)

691 
	#DT_REL
 17

	)

692 
	#DT_RELSZ
 18

	)

693 
	#DT_RELENT
 19

	)

694 
	#DT_PLTREL
 20

	)

695 
	#DT_DEBUG
 21

	)

696 
	#DT_TEXTREL
 22

	)

697 
	#DT_JMPREL
 23

	)

698 
	#DT_BIND_NOW
 24

	)

699 
	#DT_INIT_ARRAY
 25

	)

700 
	#DT_FINI_ARRAY
 26

	)

701 
	#DT_INIT_ARRAYSZ
 27

	)

702 
	#DT_FINI_ARRAYSZ
 28

	)

703 
	#DT_RUNPATH
 29

	)

704 
	#DT_FLAGS
 30

	)

705 
	#DT_ENCODING
 32

	)

706 
	#DT_PREINIT_ARRAY
 32

	)

707 
	#DT_PREINIT_ARRAYSZ
 33

	)

708 
	#DT_NUM
 34

	)

709 
	#DT_LOOS
 0x6000000d

	)

710 
	#DT_HIOS
 0x6ffff000

	)

711 
	#DT_LOPROC
 0x70000000

	)

712 
	#DT_HIPROC
 0x7ffffff‡

	)

713 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

718 
	#DT_VALRNGLO
 0x6ffffd00

	)

719 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

720 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

721 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

722 
	#DT_CHECKSUM
 0x6ffffdf8

	)

723 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

724 
	#DT_MOVEENT
 0x6ffffdÁ

	)

725 
	#DT_MOVESZ
 0x6ffffdfb

	)

726 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

727 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

729 
	#DT_SYMINSZ
 0x6ffffd„

	)

730 
	#DT_SYMINENT
 0x6ffffdf‡

	)

731 
	#DT_VALRNGHI
 0x6ffffdff

	)

732 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

733 
	#DT_VALNUM
 12

	)

740 
	#DT_ADDRRNGLO
 0x6fff„00

	)

741 
	#DT_GNU_HASH
 0x6fff„f5

	)

742 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

743 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

744 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

745 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

746 
	#DT_CONFIG
 0x6fff„Á

	)

747 
	#DT_DEPAUDIT
 0x6fff„fb

	)

748 
	#DT_AUDIT
 0x6fff„f¯

	)

749 
	#DT_PLTPAD
 0x6fff„fd

	)

750 
	#DT_MOVETAB
 0x6fff„„

	)

751 
	#DT_SYMINFO
 0x6fff„f‡

	)

752 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

753 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

754 
	#DT_ADDRNUM
 11

	)

758 
	#DT_VERSYM
 0x6ffffff0

	)

760 
	#DT_RELACOUNT
 0x6ffffff9

	)

761 
	#DT_RELCOUNT
 0x6fffffÁ

	)

764 
	#DT_FLAGS_1
 0x6ffffffb

	)

765 
	#DT_VERDEF
 0x6ffffff¯

	)

767 
	#DT_VERDEFNUM
 0x6ffffffd

	)

768 
	#DT_VERNEED
 0x6fffff„

	)

770 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

771 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

772 
	#DT_VERSIONTAGNUM
 16

	)

776 
	#DT_AUXILIARY
 0x7ffffffd

	)

777 
	#DT_FILTER
 0x7ffffff‡

	)

778 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

779 
	#DT_EXTRANUM
 3

	)

782 
	#DF_ORIGIN
 0x00000001

	)

783 
	#DF_SYMBOLIC
 0x00000002

	)

784 
	#DF_TEXTREL
 0x00000004

	)

785 
	#DF_BIND_NOW
 0x00000008

	)

786 
	#DF_STATIC_TLS
 0x00000010

	)

790 
	#DF_1_NOW
 0x00000001

	)

791 
	#DF_1_GLOBAL
 0x00000002

	)

792 
	#DF_1_GROUP
 0x00000004

	)

793 
	#DF_1_NODELETE
 0x00000008

	)

794 
	#DF_1_LOADFLTR
 0x00000010

	)

795 
	#DF_1_INITFIRST
 0x00000020

	)

796 
	#DF_1_NOOPEN
 0x00000040

	)

797 
	#DF_1_ORIGIN
 0x00000080

	)

798 
	#DF_1_DIRECT
 0x00000100

	)

799 
	#DF_1_TRANS
 0x00000200

	)

800 
	#DF_1_INTERPOSE
 0x00000400

	)

801 
	#DF_1_NODEFLIB
 0x00000800

	)

802 
	#DF_1_NODUMP
 0x00001000

	)

803 
	#DF_1_CONFALT
 0x00002000

	)

804 
	#DF_1_ENDFILTEE
 0x00004000

	)

805 
	#DF_1_DISPRELDNE
 0x00008000

	)

806 
	#DF_1_DISPRELPND
 0x00010000

	)

807 
	#DF_1_NODIRECT
 0x00020000

	)

808 
	#DF_1_IGNMULDEF
 0x00040000

	)

809 
	#DF_1_NOKSYMS
 0x00080000

	)

810 
	#DF_1_NOHDR
 0x00100000

	)

811 
	#DF_1_EDITED
 0x00200000

	)

812 
	#DF_1_NORELOC
 0x00400000

	)

813 
	#DF_1_SYMINTPOSE
 0x00800000

	)

814 
	#DF_1_GLOBAUDIT
 0x01000000

	)

815 
	#DF_1_SINGLETON
 0x02000000

	)

818 
	#DTF_1_PARINIT
 0x00000001

	)

819 
	#DTF_1_CONFEXP
 0x00000002

	)

822 
	#DF_P1_LAZYLOAD
 0x00000001

	)

823 
	#DF_P1_GROUPPERM
 0x00000002

	)

830 
Elf32_HÆf
 
	mvd_vîsi⁄
;

831 
Elf32_HÆf
 
	mvd_Êags
;

832 
Elf32_HÆf
 
	mvd_ndx
;

833 
Elf32_HÆf
 
	mvd_˙t
;

834 
Elf32_W‹d
 
	mvd_hash
;

835 
Elf32_W‹d
 
	mvd_aux
;

836 
Elf32_W‹d
 
	mvd_√xt
;

838 } 
	tElf32_Vîdef
;

842 
Elf64_HÆf
 
	mvd_vîsi⁄
;

843 
Elf64_HÆf
 
	mvd_Êags
;

844 
Elf64_HÆf
 
	mvd_ndx
;

845 
Elf64_HÆf
 
	mvd_˙t
;

846 
Elf64_W‹d
 
	mvd_hash
;

847 
Elf64_W‹d
 
	mvd_aux
;

848 
Elf64_W‹d
 
	mvd_√xt
;

850 } 
	tElf64_Vîdef
;

854 
	#VER_DEF_NONE
 0

	)

855 
	#VER_DEF_CURRENT
 1

	)

856 
	#VER_DEF_NUM
 2

	)

859 
	#VER_FLG_BASE
 0x1

	)

860 
	#VER_FLG_WEAK
 0x2

	)

863 
	#VER_NDX_LOCAL
 0

	)

864 
	#VER_NDX_GLOBAL
 1

	)

865 
	#VER_NDX_LORESERVE
 0xff00

	)

866 
	#VER_NDX_ELIMINATE
 0xff01

	)

872 
Elf32_W‹d
 
	mvda_«me
;

873 
Elf32_W‹d
 
	mvda_√xt
;

875 } 
	tElf32_Vîdaux
;

879 
Elf64_W‹d
 
	mvda_«me
;

880 
Elf64_W‹d
 
	mvda_√xt
;

882 } 
	tElf64_Vîdaux
;

889 
Elf32_HÆf
 
	mvn_vîsi⁄
;

890 
Elf32_HÆf
 
	mvn_˙t
;

891 
Elf32_W‹d
 
	mvn_fûe
;

893 
Elf32_W‹d
 
	mvn_aux
;

894 
Elf32_W‹d
 
	mvn_√xt
;

896 } 
	tElf32_Vî√ed
;

900 
Elf64_HÆf
 
	mvn_vîsi⁄
;

901 
Elf64_HÆf
 
	mvn_˙t
;

902 
Elf64_W‹d
 
	mvn_fûe
;

904 
Elf64_W‹d
 
	mvn_aux
;

905 
Elf64_W‹d
 
	mvn_√xt
;

907 } 
	tElf64_Vî√ed
;

911 
	#VER_NEED_NONE
 0

	)

912 
	#VER_NEED_CURRENT
 1

	)

913 
	#VER_NEED_NUM
 2

	)

919 
Elf32_W‹d
 
	mv«_hash
;

920 
Elf32_HÆf
 
	mv«_Êags
;

921 
Elf32_HÆf
 
	mv«_Ÿhî
;

922 
Elf32_W‹d
 
	mv«_«me
;

923 
Elf32_W‹d
 
	mv«_√xt
;

925 } 
	tElf32_Vî«ux
;

929 
Elf64_W‹d
 
	mv«_hash
;

930 
Elf64_HÆf
 
	mv«_Êags
;

931 
Elf64_HÆf
 
	mv«_Ÿhî
;

932 
Elf64_W‹d
 
	mv«_«me
;

933 
Elf64_W‹d
 
	mv«_√xt
;

935 } 
	tElf64_Vî«ux
;

939 
	#VER_FLG_WEAK
 0x2

	)

953 
uöt32_t
 
	ma_ty≥
;

956 
uöt32_t
 
	ma_vÆ
;

960 } 
	ma_un
;

961 } 
	tElf32_auxv_t
;

965 
uöt64_t
 
	ma_ty≥
;

968 
uöt64_t
 
	ma_vÆ
;

972 } 
	ma_un
;

973 } 
	tElf64_auxv_t
;

975 
	~<bôs/auxv.h
>

981 
Elf32_W‹d
 
	mn_«mesz
;

982 
Elf32_W‹d
 
	mn_descsz
;

983 
Elf32_W‹d
 
	mn_ty≥
;

984 } 
	tElf32_Nhdr
;

988 
Elf64_W‹d
 
	mn_«mesz
;

989 
Elf64_W‹d
 
	mn_descsz
;

990 
Elf64_W‹d
 
	mn_ty≥
;

991 } 
	tElf64_Nhdr
;

996 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

999 
	#ELF_NOTE_GNU
 "GNU"

	)

1005 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1016 
	#NT_GNU_ABI_TAG
 1

	)

1017 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1021 
	#ELF_NOTE_OS_LINUX
 0

	)

1022 
	#ELF_NOTE_OS_GNU
 1

	)

1023 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1024 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1032 
	#NT_GNU_HWCAP
 2

	)

1036 
	#NT_GNU_BUILD_ID
 3

	)

1039 
	#NT_GNU_GOLD_VERSION
 4

	)

1045 
Elf32_Xw‹d
 
	mm_vÆue
;

1046 
Elf32_W‹d
 
	mm_öfo
;

1047 
Elf32_W‹d
 
	mm_poff£t
;

1048 
Elf32_HÆf
 
	mm_ª≥©
;

1049 
Elf32_HÆf
 
	mm_°ride
;

1050 } 
	tElf32_Move
;

1054 
Elf64_Xw‹d
 
	mm_vÆue
;

1055 
Elf64_Xw‹d
 
	mm_öfo
;

1056 
Elf64_Xw‹d
 
	mm_poff£t
;

1057 
Elf64_HÆf
 
	mm_ª≥©
;

1058 
Elf64_HÆf
 
	mm_°ride
;

1059 } 
	tElf64_Move
;

1062 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1063 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1064 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1066 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1067 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1068 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1074 
	#EF_CPU32
 0x00810000

	)

1078 
	#R_68K_NONE
 0

	)

1079 
	#R_68K_32
 1

	)

1080 
	#R_68K_16
 2

	)

1081 
	#R_68K_8
 3

	)

1082 
	#R_68K_PC32
 4

	)

1083 
	#R_68K_PC16
 5

	)

1084 
	#R_68K_PC8
 6

	)

1085 
	#R_68K_GOT32
 7

	)

1086 
	#R_68K_GOT16
 8

	)

1087 
	#R_68K_GOT8
 9

	)

1088 
	#R_68K_GOT32O
 10

	)

1089 
	#R_68K_GOT16O
 11

	)

1090 
	#R_68K_GOT8O
 12

	)

1091 
	#R_68K_PLT32
 13

	)

1092 
	#R_68K_PLT16
 14

	)

1093 
	#R_68K_PLT8
 15

	)

1094 
	#R_68K_PLT32O
 16

	)

1095 
	#R_68K_PLT16O
 17

	)

1096 
	#R_68K_PLT8O
 18

	)

1097 
	#R_68K_COPY
 19

	)

1098 
	#R_68K_GLOB_DAT
 20

	)

1099 
	#R_68K_JMP_SLOT
 21

	)

1100 
	#R_68K_RELATIVE
 22

	)

1101 
	#R_68K_TLS_GD32
 25

	)

1102 
	#R_68K_TLS_GD16
 26

	)

1103 
	#R_68K_TLS_GD8
 27

	)

1104 
	#R_68K_TLS_LDM32
 28

	)

1105 
	#R_68K_TLS_LDM16
 29

	)

1106 
	#R_68K_TLS_LDM8
 30

	)

1107 
	#R_68K_TLS_LDO32
 31

	)

1108 
	#R_68K_TLS_LDO16
 32

	)

1109 
	#R_68K_TLS_LDO8
 33

	)

1110 
	#R_68K_TLS_IE32
 34

	)

1111 
	#R_68K_TLS_IE16
 35

	)

1112 
	#R_68K_TLS_IE8
 36

	)

1113 
	#R_68K_TLS_LE32
 37

	)

1115 
	#R_68K_TLS_LE16
 38

	)

1117 
	#R_68K_TLS_LE8
 39

	)

1119 
	#R_68K_TLS_DTPMOD32
 40

	)

1120 
	#R_68K_TLS_DTPREL32
 41

	)

1121 
	#R_68K_TLS_TPREL32
 42

	)

1123 
	#R_68K_NUM
 43

	)

1129 
	#R_386_NONE
 0

	)

1130 
	#R_386_32
 1

	)

1131 
	#R_386_PC32
 2

	)

1132 
	#R_386_GOT32
 3

	)

1133 
	#R_386_PLT32
 4

	)

1134 
	#R_386_COPY
 5

	)

1135 
	#R_386_GLOB_DAT
 6

	)

1136 
	#R_386_JMP_SLOT
 7

	)

1137 
	#R_386_RELATIVE
 8

	)

1138 
	#R_386_GOTOFF
 9

	)

1139 
	#R_386_GOTPC
 10

	)

1140 
	#R_386_32PLT
 11

	)

1141 
	#R_386_TLS_TPOFF
 14

	)

1142 
	#R_386_TLS_IE
 15

	)

1144 
	#R_386_TLS_GOTIE
 16

	)

1146 
	#R_386_TLS_LE
 17

	)

1148 
	#R_386_TLS_GD
 18

	)

1150 
	#R_386_TLS_LDM
 19

	)

1153 
	#R_386_16
 20

	)

1154 
	#R_386_PC16
 21

	)

1155 
	#R_386_8
 22

	)

1156 
	#R_386_PC8
 23

	)

1157 
	#R_386_TLS_GD_32
 24

	)

1159 
	#R_386_TLS_GD_PUSH
 25

	)

1160 
	#R_386_TLS_GD_CALL
 26

	)

1162 
	#R_386_TLS_GD_POP
 27

	)

1163 
	#R_386_TLS_LDM_32
 28

	)

1165 
	#R_386_TLS_LDM_PUSH
 29

	)

1166 
	#R_386_TLS_LDM_CALL
 30

	)

1168 
	#R_386_TLS_LDM_POP
 31

	)

1169 
	#R_386_TLS_LDO_32
 32

	)

1170 
	#R_386_TLS_IE_32
 33

	)

1172 
	#R_386_TLS_LE_32
 34

	)

1174 
	#R_386_TLS_DTPMOD32
 35

	)

1175 
	#R_386_TLS_DTPOFF32
 36

	)

1176 
	#R_386_TLS_TPOFF32
 37

	)

1177 
	#R_386_SIZE32
 38

	)

1178 
	#R_386_TLS_GOTDESC
 39

	)

1179 
	#R_386_TLS_DESC_CALL
 40

	)

1182 
	#R_386_TLS_DESC
 41

	)

1186 
	#R_386_IRELATIVE
 42

	)

1188 
	#R_386_NUM
 43

	)

1194 
	#STT_SPARC_REGISTER
 13

	)

1198 
	#EF_SPARCV9_MM
 3

	)

1199 
	#EF_SPARCV9_TSO
 0

	)

1200 
	#EF_SPARCV9_PSO
 1

	)

1201 
	#EF_SPARCV9_RMO
 2

	)

1202 
	#EF_SPARC_LEDATA
 0x800000

	)

1203 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1204 
	#EF_SPARC_32PLUS
 0x000100

	)

1205 
	#EF_SPARC_SUN_US1
 0x000200

	)

1206 
	#EF_SPARC_HAL_R1
 0x000400

	)

1207 
	#EF_SPARC_SUN_US3
 0x000800

	)

1211 
	#R_SPARC_NONE
 0

	)

1212 
	#R_SPARC_8
 1

	)

1213 
	#R_SPARC_16
 2

	)

1214 
	#R_SPARC_32
 3

	)

1215 
	#R_SPARC_DISP8
 4

	)

1216 
	#R_SPARC_DISP16
 5

	)

1217 
	#R_SPARC_DISP32
 6

	)

1218 
	#R_SPARC_WDISP30
 7

	)

1219 
	#R_SPARC_WDISP22
 8

	)

1220 
	#R_SPARC_HI22
 9

	)

1221 
	#R_SPARC_22
 10

	)

1222 
	#R_SPARC_13
 11

	)

1223 
	#R_SPARC_LO10
 12

	)

1224 
	#R_SPARC_GOT10
 13

	)

1225 
	#R_SPARC_GOT13
 14

	)

1226 
	#R_SPARC_GOT22
 15

	)

1227 
	#R_SPARC_PC10
 16

	)

1228 
	#R_SPARC_PC22
 17

	)

1229 
	#R_SPARC_WPLT30
 18

	)

1230 
	#R_SPARC_COPY
 19

	)

1231 
	#R_SPARC_GLOB_DAT
 20

	)

1232 
	#R_SPARC_JMP_SLOT
 21

	)

1233 
	#R_SPARC_RELATIVE
 22

	)

1234 
	#R_SPARC_UA32
 23

	)

1238 
	#R_SPARC_PLT32
 24

	)

1239 
	#R_SPARC_HIPLT22
 25

	)

1240 
	#R_SPARC_LOPLT10
 26

	)

1241 
	#R_SPARC_PCPLT32
 27

	)

1242 
	#R_SPARC_PCPLT22
 28

	)

1243 
	#R_SPARC_PCPLT10
 29

	)

1244 
	#R_SPARC_10
 30

	)

1245 
	#R_SPARC_11
 31

	)

1246 
	#R_SPARC_64
 32

	)

1247 
	#R_SPARC_OLO10
 33

	)

1248 
	#R_SPARC_HH22
 34

	)

1249 
	#R_SPARC_HM10
 35

	)

1250 
	#R_SPARC_LM22
 36

	)

1251 
	#R_SPARC_PC_HH22
 37

	)

1252 
	#R_SPARC_PC_HM10
 38

	)

1253 
	#R_SPARC_PC_LM22
 39

	)

1254 
	#R_SPARC_WDISP16
 40

	)

1255 
	#R_SPARC_WDISP19
 41

	)

1256 
	#R_SPARC_GLOB_JMP
 42

	)

1257 
	#R_SPARC_7
 43

	)

1258 
	#R_SPARC_5
 44

	)

1259 
	#R_SPARC_6
 45

	)

1260 
	#R_SPARC_DISP64
 46

	)

1261 
	#R_SPARC_PLT64
 47

	)

1262 
	#R_SPARC_HIX22
 48

	)

1263 
	#R_SPARC_LOX10
 49

	)

1264 
	#R_SPARC_H44
 50

	)

1265 
	#R_SPARC_M44
 51

	)

1266 
	#R_SPARC_L44
 52

	)

1267 
	#R_SPARC_REGISTER
 53

	)

1268 
	#R_SPARC_UA64
 54

	)

1269 
	#R_SPARC_UA16
 55

	)

1270 
	#R_SPARC_TLS_GD_HI22
 56

	)

1271 
	#R_SPARC_TLS_GD_LO10
 57

	)

1272 
	#R_SPARC_TLS_GD_ADD
 58

	)

1273 
	#R_SPARC_TLS_GD_CALL
 59

	)

1274 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1275 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1276 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1277 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1278 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1279 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1280 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1281 
	#R_SPARC_TLS_IE_HI22
 67

	)

1282 
	#R_SPARC_TLS_IE_LO10
 68

	)

1283 
	#R_SPARC_TLS_IE_LD
 69

	)

1284 
	#R_SPARC_TLS_IE_LDX
 70

	)

1285 
	#R_SPARC_TLS_IE_ADD
 71

	)

1286 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1287 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1288 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1289 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1290 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1291 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1292 
	#R_SPARC_TLS_TPOFF32
 78

	)

1293 
	#R_SPARC_TLS_TPOFF64
 79

	)

1294 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1295 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1296 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1297 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1298 
	#R_SPARC_GOTDATA_OP
 84

	)

1299 
	#R_SPARC_H34
 85

	)

1300 
	#R_SPARC_SIZE32
 86

	)

1301 
	#R_SPARC_SIZE64
 87

	)

1302 
	#R_SPARC_WDISP10
 88

	)

1303 
	#R_SPARC_JMP_IREL
 248

	)

1304 
	#R_SPARC_IRELATIVE
 249

	)

1305 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1306 
	#R_SPARC_GNU_VTENTRY
 251

	)

1307 
	#R_SPARC_REV32
 252

	)

1309 
	#R_SPARC_NUM
 253

	)

1313 
	#DT_SPARC_REGISTER
 0x70000001

	)

1314 
	#DT_SPARC_NUM
 2

	)

1320 
	#EF_MIPS_NOREORDER
 1

	)

1321 
	#EF_MIPS_PIC
 2

	)

1322 
	#EF_MIPS_CPIC
 4

	)

1323 
	#EF_MIPS_XGOT
 8

	)

1324 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1325 
	#EF_MIPS_ABI2
 32

	)

1326 
	#EF_MIPS_ABI_ON32
 64

	)

1327 
	#EF_MIPS_NAN2008
 1024

	)

1328 
	#EF_MIPS_ARCH
 0xf0000000

	)

1332 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1333 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1334 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1335 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1336 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1337 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1338 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1339 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1340 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1344 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1345 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1346 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1347 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1348 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1349 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1350 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1354 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1355 
	#SHN_MIPS_TEXT
 0xff01

	)

1356 
	#SHN_MIPS_DATA
 0xff02

	)

1357 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1358 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1362 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1363 
	#SHT_MIPS_MSYM
 0x70000001

	)

1364 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1365 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1366 
	#SHT_MIPS_UCODE
 0x70000004

	)

1367 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1368 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1369 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1370 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1371 
	#SHT_MIPS_RELD
 0x70000009

	)

1372 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1373 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1374 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1375 
	#SHT_MIPS_SHDR
 0x70000010

	)

1376 
	#SHT_MIPS_FDESC
 0x70000011

	)

1377 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1378 
	#SHT_MIPS_DENSE
 0x70000013

	)

1379 
	#SHT_MIPS_PDESC
 0x70000014

	)

1380 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1381 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1382 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1383 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1384 
	#SHT_MIPS_LINE
 0x70000019

	)

1385 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1386 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1387 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1388 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1389 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1390 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1391 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1392 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1393 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1394 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1395 
	#SHT_MIPS_XLATE
 0x70000024

	)

1396 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1397 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1398 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1399 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1400 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1404 
	#SHF_MIPS_GPREL
 0x10000000

	)

1405 
	#SHF_MIPS_MERGE
 0x20000000

	)

1406 
	#SHF_MIPS_ADDR
 0x40000000

	)

1407 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1408 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1409 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1410 
	#SHF_MIPS_NAMES
 0x02000000

	)

1411 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1417 
	#STO_MIPS_DEFAULT
 0x0

	)

1418 
	#STO_MIPS_INTERNAL
 0x1

	)

1419 
	#STO_MIPS_HIDDEN
 0x2

	)

1420 
	#STO_MIPS_PROTECTED
 0x3

	)

1421 
	#STO_MIPS_PLT
 0x8

	)

1422 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1425 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1433 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1434 
Elf32_W‹d
 
	mgt_unu£d
;

1435 } 
	mgt_hódî
;

1438 
Elf32_W‹d
 
	mgt_g_vÆue
;

1439 
Elf32_W‹d
 
	mgt_byãs
;

1440 } 
	mgt_íåy
;

1441 } 
	tElf32_g±ab
;

1447 
Elf32_W‹d
 
	mri_g¥mask
;

1448 
Elf32_W‹d
 
	mri_˝rmask
[4];

1449 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1450 } 
	tElf32_RegInfo
;

1456 
	mköd
;

1458 
	msize
;

1459 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1461 
Elf32_W‹d
 
	möfo
;

1462 } 
	tElf_O±i⁄s
;

1466 
	#ODK_NULL
 0

	)

1467 
	#ODK_REGINFO
 1

	)

1468 
	#ODK_EXCEPTIONS
 2

	)

1469 
	#ODK_PAD
 3

	)

1470 
	#ODK_HWPATCH
 4

	)

1471 
	#ODK_FILL
 5

	)

1472 
	#ODK_TAGS
 6

	)

1473 
	#ODK_HWAND
 7

	)

1474 
	#ODK_HWOR
 8

	)

1478 
	#OEX_FPU_MIN
 0x1‡

	)

1479 
	#OEX_FPU_MAX
 0x1f00

	)

1480 
	#OEX_PAGE0
 0x10000

	)

1481 
	#OEX_SMM
 0x20000

	)

1482 
	#OEX_FPDBUG
 0x40000

	)

1483 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1484 
	#OEX_DISMISS
 0x80000

	)

1486 
	#OEX_FPU_INVAL
 0x10

	)

1487 
	#OEX_FPU_DIV0
 0x08

	)

1488 
	#OEX_FPU_OFLO
 0x04

	)

1489 
	#OEX_FPU_UFLO
 0x02

	)

1490 
	#OEX_FPU_INEX
 0x01

	)

1494 
	#OHW_R4KEOP
 0x1

	)

1495 
	#OHW_R8KPFETCH
 0x2

	)

1496 
	#OHW_R5KEOP
 0x4

	)

1497 
	#OHW_R5KCVTL
 0x8

	)

1499 
	#OPAD_PREFIX
 0x1

	)

1500 
	#OPAD_POSTFIX
 0x2

	)

1501 
	#OPAD_SYMBOL
 0x4

	)

1507 
Elf32_W‹d
 
	mhwp_Êags1
;

1508 
Elf32_W‹d
 
	mhwp_Êags2
;

1509 } 
	tElf_O±i⁄s_Hw
;

1513 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1514 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1518 
	#R_MIPS_NONE
 0

	)

1519 
	#R_MIPS_16
 1

	)

1520 
	#R_MIPS_32
 2

	)

1521 
	#R_MIPS_REL32
 3

	)

1522 
	#R_MIPS_26
 4

	)

1523 
	#R_MIPS_HI16
 5

	)

1524 
	#R_MIPS_LO16
 6

	)

1525 
	#R_MIPS_GPREL16
 7

	)

1526 
	#R_MIPS_LITERAL
 8

	)

1527 
	#R_MIPS_GOT16
 9

	)

1528 
	#R_MIPS_PC16
 10

	)

1529 
	#R_MIPS_CALL16
 11

	)

1530 
	#R_MIPS_GPREL32
 12

	)

1532 
	#R_MIPS_SHIFT5
 16

	)

1533 
	#R_MIPS_SHIFT6
 17

	)

1534 
	#R_MIPS_64
 18

	)

1535 
	#R_MIPS_GOT_DISP
 19

	)

1536 
	#R_MIPS_GOT_PAGE
 20

	)

1537 
	#R_MIPS_GOT_OFST
 21

	)

1538 
	#R_MIPS_GOT_HI16
 22

	)

1539 
	#R_MIPS_GOT_LO16
 23

	)

1540 
	#R_MIPS_SUB
 24

	)

1541 
	#R_MIPS_INSERT_A
 25

	)

1542 
	#R_MIPS_INSERT_B
 26

	)

1543 
	#R_MIPS_DELETE
 27

	)

1544 
	#R_MIPS_HIGHER
 28

	)

1545 
	#R_MIPS_HIGHEST
 29

	)

1546 
	#R_MIPS_CALL_HI16
 30

	)

1547 
	#R_MIPS_CALL_LO16
 31

	)

1548 
	#R_MIPS_SCN_DISP
 32

	)

1549 
	#R_MIPS_REL16
 33

	)

1550 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1551 
	#R_MIPS_PJUMP
 35

	)

1552 
	#R_MIPS_RELGOT
 36

	)

1553 
	#R_MIPS_JALR
 37

	)

1554 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1555 
	#R_MIPS_TLS_DTPREL32
 39

	)

1556 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1557 
	#R_MIPS_TLS_DTPREL64
 41

	)

1558 
	#R_MIPS_TLS_GD
 42

	)

1559 
	#R_MIPS_TLS_LDM
 43

	)

1560 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1561 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1562 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1563 
	#R_MIPS_TLS_TPREL32
 47

	)

1564 
	#R_MIPS_TLS_TPREL64
 48

	)

1565 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1566 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1567 
	#R_MIPS_GLOB_DAT
 51

	)

1568 
	#R_MIPS_COPY
 126

	)

1569 
	#R_MIPS_JUMP_SLOT
 127

	)

1571 
	#R_MIPS_NUM
 128

	)

1575 
	#PT_MIPS_REGINFO
 0x70000000

	)

1576 
	#PT_MIPS_RTPROC
 0x70000001

	)

1577 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1581 
	#PF_MIPS_LOCAL
 0x10000000

	)

1585 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1586 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1587 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1588 
	#DT_MIPS_IVERSION
 0x70000004

	)

1589 
	#DT_MIPS_FLAGS
 0x70000005

	)

1590 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1591 
	#DT_MIPS_MSYM
 0x70000007

	)

1592 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1593 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1594 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1595 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1596 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1597 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1598 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1599 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1600 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1601 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1602 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1603 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1605 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1606 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1608 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1609 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1611 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1613 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1615 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1617 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1619 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1620 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1621 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1622 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1623 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1624 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1625 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1626 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1627 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1628 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1629 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1630 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1632 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1634 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1635 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1636 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1638 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1642 
	#DT_MIPS_RWPLT
 0x70000034

	)

1643 
	#DT_MIPS_NUM
 0x35

	)

1647 
	#RHF_NONE
 0

	)

1648 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1649 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1650 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1651 
	#RHF_NO_MOVE
 (1 << 3)

	)

1652 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1653 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1654 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1655 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1656 
	#RHF_PIXIE
 (1 << 8)

	)

1657 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1658 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1659 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1660 
	#RHF_CORD
 (1 << 12)

	)

1661 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1662 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1668 
Elf32_W‹d
 
	ml_«me
;

1669 
Elf32_W‹d
 
	ml_time_°amp
;

1670 
Elf32_W‹d
 
	ml_checksum
;

1671 
Elf32_W‹d
 
	ml_vîsi⁄
;

1672 
Elf32_W‹d
 
	ml_Êags
;

1673 } 
	tElf32_Lib
;

1677 
Elf64_W‹d
 
	ml_«me
;

1678 
Elf64_W‹d
 
	ml_time_°amp
;

1679 
Elf64_W‹d
 
	ml_checksum
;

1680 
Elf64_W‹d
 
	ml_vîsi⁄
;

1681 
Elf64_W‹d
 
	ml_Êags
;

1682 } 
	tElf64_Lib
;

1687 
	#LL_NONE
 0

	)

1688 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1689 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1690 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1691 
	#LL_EXPORTS
 (1 << 3)

	)

1692 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1693 
	#LL_DELTA
 (1 << 5)

	)

1697 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1704 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1705 
	#EF_PARISC_EXT
 0x00020000

	)

1706 
	#EF_PARISC_LSB
 0x00040000

	)

1707 
	#EF_PARISC_WIDE
 0x00080000

	)

1708 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1710 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1711 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1715 
	#EFA_PARISC_1_0
 0x020b

	)

1716 
	#EFA_PARISC_1_1
 0x0210

	)

1717 
	#EFA_PARISC_2_0
 0x0214

	)

1721 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1723 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1727 
	#SHT_PARISC_EXT
 0x70000000

	)

1728 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1729 
	#SHT_PARISC_DOC
 0x70000002

	)

1733 
	#SHF_PARISC_SHORT
 0x20000000

	)

1734 
	#SHF_PARISC_HUGE
 0x40000000

	)

1735 
	#SHF_PARISC_SBP
 0x80000000

	)

1739 
	#STT_PARISC_MILLICODE
 13

	)

1741 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1742 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1746 
	#R_PARISC_NONE
 0

	)

1747 
	#R_PARISC_DIR32
 1

	)

1748 
	#R_PARISC_DIR21L
 2

	)

1749 
	#R_PARISC_DIR17R
 3

	)

1750 
	#R_PARISC_DIR17F
 4

	)

1751 
	#R_PARISC_DIR14R
 6

	)

1752 
	#R_PARISC_PCREL32
 9

	)

1753 
	#R_PARISC_PCREL21L
 10

	)

1754 
	#R_PARISC_PCREL17R
 11

	)

1755 
	#R_PARISC_PCREL17F
 12

	)

1756 
	#R_PARISC_PCREL14R
 14

	)

1757 
	#R_PARISC_DPREL21L
 18

	)

1758 
	#R_PARISC_DPREL14R
 22

	)

1759 
	#R_PARISC_GPREL21L
 26

	)

1760 
	#R_PARISC_GPREL14R
 30

	)

1761 
	#R_PARISC_LTOFF21L
 34

	)

1762 
	#R_PARISC_LTOFF14R
 38

	)

1763 
	#R_PARISC_SECREL32
 41

	)

1764 
	#R_PARISC_SEGBASE
 48

	)

1765 
	#R_PARISC_SEGREL32
 49

	)

1766 
	#R_PARISC_PLTOFF21L
 50

	)

1767 
	#R_PARISC_PLTOFF14R
 54

	)

1768 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1769 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1770 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1771 
	#R_PARISC_FPTR64
 64

	)

1772 
	#R_PARISC_PLABEL32
 65

	)

1773 
	#R_PARISC_PLABEL21L
 66

	)

1774 
	#R_PARISC_PLABEL14R
 70

	)

1775 
	#R_PARISC_PCREL64
 72

	)

1776 
	#R_PARISC_PCREL22F
 74

	)

1777 
	#R_PARISC_PCREL14WR
 75

	)

1778 
	#R_PARISC_PCREL14DR
 76

	)

1779 
	#R_PARISC_PCREL16F
 77

	)

1780 
	#R_PARISC_PCREL16WF
 78

	)

1781 
	#R_PARISC_PCREL16DF
 79

	)

1782 
	#R_PARISC_DIR64
 80

	)

1783 
	#R_PARISC_DIR14WR
 83

	)

1784 
	#R_PARISC_DIR14DR
 84

	)

1785 
	#R_PARISC_DIR16F
 85

	)

1786 
	#R_PARISC_DIR16WF
 86

	)

1787 
	#R_PARISC_DIR16DF
 87

	)

1788 
	#R_PARISC_GPREL64
 88

	)

1789 
	#R_PARISC_GPREL14WR
 91

	)

1790 
	#R_PARISC_GPREL14DR
 92

	)

1791 
	#R_PARISC_GPREL16F
 93

	)

1792 
	#R_PARISC_GPREL16WF
 94

	)

1793 
	#R_PARISC_GPREL16DF
 95

	)

1794 
	#R_PARISC_LTOFF64
 96

	)

1795 
	#R_PARISC_LTOFF14WR
 99

	)

1796 
	#R_PARISC_LTOFF14DR
 100

	)

1797 
	#R_PARISC_LTOFF16F
 101

	)

1798 
	#R_PARISC_LTOFF16WF
 102

	)

1799 
	#R_PARISC_LTOFF16DF
 103

	)

1800 
	#R_PARISC_SECREL64
 104

	)

1801 
	#R_PARISC_SEGREL64
 112

	)

1802 
	#R_PARISC_PLTOFF14WR
 115

	)

1803 
	#R_PARISC_PLTOFF14DR
 116

	)

1804 
	#R_PARISC_PLTOFF16F
 117

	)

1805 
	#R_PARISC_PLTOFF16WF
 118

	)

1806 
	#R_PARISC_PLTOFF16DF
 119

	)

1807 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1808 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1809 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1810 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1811 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1812 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1813 
	#R_PARISC_LORESERVE
 128

	)

1814 
	#R_PARISC_COPY
 128

	)

1815 
	#R_PARISC_IPLT
 129

	)

1816 
	#R_PARISC_EPLT
 130

	)

1817 
	#R_PARISC_TPREL32
 153

	)

1818 
	#R_PARISC_TPREL21L
 154

	)

1819 
	#R_PARISC_TPREL14R
 158

	)

1820 
	#R_PARISC_LTOFF_TP21L
 162

	)

1821 
	#R_PARISC_LTOFF_TP14R
 166

	)

1822 
	#R_PARISC_LTOFF_TP14F
 167

	)

1823 
	#R_PARISC_TPREL64
 216

	)

1824 
	#R_PARISC_TPREL14WR
 219

	)

1825 
	#R_PARISC_TPREL14DR
 220

	)

1826 
	#R_PARISC_TPREL16F
 221

	)

1827 
	#R_PARISC_TPREL16WF
 222

	)

1828 
	#R_PARISC_TPREL16DF
 223

	)

1829 
	#R_PARISC_LTOFF_TP64
 224

	)

1830 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1831 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1832 
	#R_PARISC_LTOFF_TP16F
 229

	)

1833 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1834 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1835 
	#R_PARISC_GNU_VTENTRY
 232

	)

1836 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1837 
	#R_PARISC_TLS_GD21L
 234

	)

1838 
	#R_PARISC_TLS_GD14R
 235

	)

1839 
	#R_PARISC_TLS_GDCALL
 236

	)

1840 
	#R_PARISC_TLS_LDM21L
 237

	)

1841 
	#R_PARISC_TLS_LDM14R
 238

	)

1842 
	#R_PARISC_TLS_LDMCALL
 239

	)

1843 
	#R_PARISC_TLS_LDO21L
 240

	)

1844 
	#R_PARISC_TLS_LDO14R
 241

	)

1845 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1846 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1847 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1848 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1849 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1850 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1851 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1852 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1853 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1854 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1855 
	#R_PARISC_HIRESERVE
 255

	)

1859 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1860 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1861 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1862 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1863 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1864 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1865 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1866 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1867 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1868 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1869 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1870 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1871 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1872 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1873 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1875 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1876 
	#PT_PARISC_UNWIND
 0x70000001

	)

1880 
	#PF_PARISC_SBP
 0x08000000

	)

1882 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1883 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1884 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1885 
	#PF_HP_CODE
 0x01000000

	)

1886 
	#PF_HP_MODIFY
 0x02000000

	)

1887 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1888 
	#PF_HP_SBP
 0x08000000

	)

1895 
	#EF_ALPHA_32BIT
 1

	)

1896 
	#EF_ALPHA_CANRELAX
 2

	)

1901 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1902 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1906 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1909 
	#STO_ALPHA_NOPV
 0x80

	)

1910 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1914 
	#R_ALPHA_NONE
 0

	)

1915 
	#R_ALPHA_REFLONG
 1

	)

1916 
	#R_ALPHA_REFQUAD
 2

	)

1917 
	#R_ALPHA_GPREL32
 3

	)

1918 
	#R_ALPHA_LITERAL
 4

	)

1919 
	#R_ALPHA_LITUSE
 5

	)

1920 
	#R_ALPHA_GPDISP
 6

	)

1921 
	#R_ALPHA_BRADDR
 7

	)

1922 
	#R_ALPHA_HINT
 8

	)

1923 
	#R_ALPHA_SREL16
 9

	)

1924 
	#R_ALPHA_SREL32
 10

	)

1925 
	#R_ALPHA_SREL64
 11

	)

1926 
	#R_ALPHA_GPRELHIGH
 17

	)

1927 
	#R_ALPHA_GPRELLOW
 18

	)

1928 
	#R_ALPHA_GPREL16
 19

	)

1929 
	#R_ALPHA_COPY
 24

	)

1930 
	#R_ALPHA_GLOB_DAT
 25

	)

1931 
	#R_ALPHA_JMP_SLOT
 26

	)

1932 
	#R_ALPHA_RELATIVE
 27

	)

1933 
	#R_ALPHA_TLS_GD_HI
 28

	)

1934 
	#R_ALPHA_TLSGD
 29

	)

1935 
	#R_ALPHA_TLS_LDM
 30

	)

1936 
	#R_ALPHA_DTPMOD64
 31

	)

1937 
	#R_ALPHA_GOTDTPREL
 32

	)

1938 
	#R_ALPHA_DTPREL64
 33

	)

1939 
	#R_ALPHA_DTPRELHI
 34

	)

1940 
	#R_ALPHA_DTPRELLO
 35

	)

1941 
	#R_ALPHA_DTPREL16
 36

	)

1942 
	#R_ALPHA_GOTTPREL
 37

	)

1943 
	#R_ALPHA_TPREL64
 38

	)

1944 
	#R_ALPHA_TPRELHI
 39

	)

1945 
	#R_ALPHA_TPRELLO
 40

	)

1946 
	#R_ALPHA_TPREL16
 41

	)

1948 
	#R_ALPHA_NUM
 46

	)

1951 
	#LITUSE_ALPHA_ADDR
 0

	)

1952 
	#LITUSE_ALPHA_BASE
 1

	)

1953 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1954 
	#LITUSE_ALPHA_JSR
 3

	)

1955 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1956 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1959 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1960 
	#DT_ALPHA_NUM
 1

	)

1965 
	#EF_PPC_EMB
 0x80000000

	)

1968 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1969 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

1973 
	#R_PPC_NONE
 0

	)

1974 
	#R_PPC_ADDR32
 1

	)

1975 
	#R_PPC_ADDR24
 2

	)

1976 
	#R_PPC_ADDR16
 3

	)

1977 
	#R_PPC_ADDR16_LO
 4

	)

1978 
	#R_PPC_ADDR16_HI
 5

	)

1979 
	#R_PPC_ADDR16_HA
 6

	)

1980 
	#R_PPC_ADDR14
 7

	)

1981 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1982 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1983 
	#R_PPC_REL24
 10

	)

1984 
	#R_PPC_REL14
 11

	)

1985 
	#R_PPC_REL14_BRTAKEN
 12

	)

1986 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1987 
	#R_PPC_GOT16
 14

	)

1988 
	#R_PPC_GOT16_LO
 15

	)

1989 
	#R_PPC_GOT16_HI
 16

	)

1990 
	#R_PPC_GOT16_HA
 17

	)

1991 
	#R_PPC_PLTREL24
 18

	)

1992 
	#R_PPC_COPY
 19

	)

1993 
	#R_PPC_GLOB_DAT
 20

	)

1994 
	#R_PPC_JMP_SLOT
 21

	)

1995 
	#R_PPC_RELATIVE
 22

	)

1996 
	#R_PPC_LOCAL24PC
 23

	)

1997 
	#R_PPC_UADDR32
 24

	)

1998 
	#R_PPC_UADDR16
 25

	)

1999 
	#R_PPC_REL32
 26

	)

2000 
	#R_PPC_PLT32
 27

	)

2001 
	#R_PPC_PLTREL32
 28

	)

2002 
	#R_PPC_PLT16_LO
 29

	)

2003 
	#R_PPC_PLT16_HI
 30

	)

2004 
	#R_PPC_PLT16_HA
 31

	)

2005 
	#R_PPC_SDAREL16
 32

	)

2006 
	#R_PPC_SECTOFF
 33

	)

2007 
	#R_PPC_SECTOFF_LO
 34

	)

2008 
	#R_PPC_SECTOFF_HI
 35

	)

2009 
	#R_PPC_SECTOFF_HA
 36

	)

2012 
	#R_PPC_TLS
 67

	)

2013 
	#R_PPC_DTPMOD32
 68

	)

2014 
	#R_PPC_TPREL16
 69

	)

2015 
	#R_PPC_TPREL16_LO
 70

	)

2016 
	#R_PPC_TPREL16_HI
 71

	)

2017 
	#R_PPC_TPREL16_HA
 72

	)

2018 
	#R_PPC_TPREL32
 73

	)

2019 
	#R_PPC_DTPREL16
 74

	)

2020 
	#R_PPC_DTPREL16_LO
 75

	)

2021 
	#R_PPC_DTPREL16_HI
 76

	)

2022 
	#R_PPC_DTPREL16_HA
 77

	)

2023 
	#R_PPC_DTPREL32
 78

	)

2024 
	#R_PPC_GOT_TLSGD16
 79

	)

2025 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2026 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2027 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2028 
	#R_PPC_GOT_TLSLD16
 83

	)

2029 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2030 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2031 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2032 
	#R_PPC_GOT_TPREL16
 87

	)

2033 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2034 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2035 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2036 
	#R_PPC_GOT_DTPREL16
 91

	)

2037 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2038 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2039 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2043 
	#R_PPC_EMB_NADDR32
 101

	)

2044 
	#R_PPC_EMB_NADDR16
 102

	)

2045 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2046 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2047 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2048 
	#R_PPC_EMB_SDAI16
 106

	)

2049 
	#R_PPC_EMB_SDA2I16
 107

	)

2050 
	#R_PPC_EMB_SDA2REL
 108

	)

2051 
	#R_PPC_EMB_SDA21
 109

	)

2052 
	#R_PPC_EMB_MRKREF
 110

	)

2053 
	#R_PPC_EMB_RELSEC16
 111

	)

2054 
	#R_PPC_EMB_RELST_LO
 112

	)

2055 
	#R_PPC_EMB_RELST_HI
 113

	)

2056 
	#R_PPC_EMB_RELST_HA
 114

	)

2057 
	#R_PPC_EMB_BIT_FLD
 115

	)

2058 
	#R_PPC_EMB_RELSDA
 116

	)

2061 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2062 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2063 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2064 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2065 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2066 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2069 
	#R_PPC_IRELATIVE
 248

	)

2072 
	#R_PPC_REL16
 249

	)

2073 
	#R_PPC_REL16_LO
 250

	)

2074 
	#R_PPC_REL16_HI
 251

	)

2075 
	#R_PPC_REL16_HA
 252

	)

2079 
	#R_PPC_TOC16
 255

	)

2082 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2083 
	#DT_PPC_NUM
 1

	)

2086 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2087 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2088 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2089 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2090 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2091 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2092 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2093 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2094 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2095 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2096 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2097 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2098 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2099 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2100 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2101 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2102 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2103 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2105 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2106 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2107 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2108 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2110 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2111 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2112 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2113 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2114 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2115 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2116 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2117 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2119 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2120 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2121 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2122 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2123 
	#R_PPC64_ADDR30
 37

	)

2124 
	#R_PPC64_ADDR64
 38

	)

2125 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2126 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2127 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2128 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2129 
	#R_PPC64_UADDR64
 43

	)

2130 
	#R_PPC64_REL64
 44

	)

2131 
	#R_PPC64_PLT64
 45

	)

2132 
	#R_PPC64_PLTREL64
 46

	)

2133 
	#R_PPC64_TOC16
 47

	)

2134 
	#R_PPC64_TOC16_LO
 48

	)

2135 
	#R_PPC64_TOC16_HI
 49

	)

2136 
	#R_PPC64_TOC16_HA
 50

	)

2137 
	#R_PPC64_TOC
 51

	)

2138 
	#R_PPC64_PLTGOT16
 52

	)

2139 
	#R_PPC64_PLTGOT16_LO
 53

	)

2140 
	#R_PPC64_PLTGOT16_HI
 54

	)

2141 
	#R_PPC64_PLTGOT16_HA
 55

	)

2143 
	#R_PPC64_ADDR16_DS
 56

	)

2144 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2145 
	#R_PPC64_GOT16_DS
 58

	)

2146 
	#R_PPC64_GOT16_LO_DS
 59

	)

2147 
	#R_PPC64_PLT16_LO_DS
 60

	)

2148 
	#R_PPC64_SECTOFF_DS
 61

	)

2149 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2150 
	#R_PPC64_TOC16_DS
 63

	)

2151 
	#R_PPC64_TOC16_LO_DS
 64

	)

2152 
	#R_PPC64_PLTGOT16_DS
 65

	)

2153 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2156 
	#R_PPC64_TLS
 67

	)

2157 
	#R_PPC64_DTPMOD64
 68

	)

2158 
	#R_PPC64_TPREL16
 69

	)

2159 
	#R_PPC64_TPREL16_LO
 70

	)

2160 
	#R_PPC64_TPREL16_HI
 71

	)

2161 
	#R_PPC64_TPREL16_HA
 72

	)

2162 
	#R_PPC64_TPREL64
 73

	)

2163 
	#R_PPC64_DTPREL16
 74

	)

2164 
	#R_PPC64_DTPREL16_LO
 75

	)

2165 
	#R_PPC64_DTPREL16_HI
 76

	)

2166 
	#R_PPC64_DTPREL16_HA
 77

	)

2167 
	#R_PPC64_DTPREL64
 78

	)

2168 
	#R_PPC64_GOT_TLSGD16
 79

	)

2169 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2170 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2171 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2172 
	#R_PPC64_GOT_TLSLD16
 83

	)

2173 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2174 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2175 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2176 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2177 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2178 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2179 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2180 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2181 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2182 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2183 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2184 
	#R_PPC64_TPREL16_DS
 95

	)

2185 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2186 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2187 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2188 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2189 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2190 
	#R_PPC64_DTPREL16_DS
 101

	)

2191 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2192 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2193 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2194 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2195 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2196 
	#R_PPC64_TLSGD
 107

	)

2197 
	#R_PPC64_TLSLD
 108

	)

2198 
	#R_PPC64_TOCSAVE
 109

	)

2201 
	#R_PPC64_ADDR16_HIGH
 110

	)

2202 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2203 
	#R_PPC64_TPREL16_HIGH
 112

	)

2204 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2205 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2206 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2209 
	#R_PPC64_JMP_IREL
 247

	)

2210 
	#R_PPC64_IRELATIVE
 248

	)

2211 
	#R_PPC64_REL16
 249

	)

2212 
	#R_PPC64_REL16_LO
 250

	)

2213 
	#R_PPC64_REL16_HI
 251

	)

2214 
	#R_PPC64_REL16_HA
 252

	)

2220 
	#EF_PPC64_ABI
 3

	)

2223 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2224 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2225 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2226 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2227 
	#DT_PPC64_NUM
 3

	)

2230 
	#PPC64_OPT_TLS
 1

	)

2231 
	#PPC64_OPT_MULTI_TOC
 2

	)

2234 
	#STO_PPC64_LOCAL_BIT
 5

	)

2235 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2236 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2237 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2243 
	#EF_ARM_RELEXEC
 0x01

	)

2244 
	#EF_ARM_HASENTRY
 0x02

	)

2245 
	#EF_ARM_INTERWORK
 0x04

	)

2246 
	#EF_ARM_APCS_26
 0x08

	)

2247 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2248 
	#EF_ARM_PIC
 0x20

	)

2249 
	#EF_ARM_ALIGN8
 0x40

	)

2250 
	#EF_ARM_NEW_ABI
 0x80

	)

2251 
	#EF_ARM_OLD_ABI
 0x100

	)

2252 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2253 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2254 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2256 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2257 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2262 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2263 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2264 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2265 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2268 
	#EF_ARM_BE8
 0x00800000

	)

2269 
	#EF_ARM_LE8
 0x00400000

	)

2271 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2272 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2273 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2274 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2275 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2276 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2277 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2280 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2281 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2284 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2285 
	#SHF_ARM_COMDEF
 0x80000000

	)

2289 
	#PF_ARM_SB
 0x10000000

	)

2291 
	#PF_ARM_PI
 0x20000000

	)

2292 
	#PF_ARM_ABS
 0x40000000

	)

2295 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2298 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2299 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2300 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2305 
	#R_AARCH64_NONE
 0

	)

2306 
	#R_AARCH64_ABS64
 257

	)

2307 
	#R_AARCH64_ABS32
 258

	)

2308 
	#R_AARCH64_ABS16
 259

	)

2309 
	#R_AARCH64_PREL64
 260

	)

2310 
	#R_AARCH64_PREL32
 261

	)

2311 
	#R_AARCH64_PREL16
 262

	)

2312 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2313 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2314 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2315 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2316 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2317 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2318 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2319 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2320 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2321 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2322 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2323 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2324 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2325 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2326 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2327 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2328 
	#R_AARCH64_TSTBR14
 279

	)

2329 
	#R_AARCH64_CONDBR19
 280

	)

2330 
	#R_AARCH64_JUMP26
 282

	)

2331 
	#R_AARCH64_CALL26
 283

	)

2332 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2333 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2334 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2335 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2336 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2337 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2338 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2339 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2340 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2341 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2342 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2343 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2344 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2345 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2346 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2347 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2348 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2349 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2350 
	#R_AARCH64_GOTREL64
 307

	)

2351 
	#R_AARCH64_GOTREL32
 308

	)

2352 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2353 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2354 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2355 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2356 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2357 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2358 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2359 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2360 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2361 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2362 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2363 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2364 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2365 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2366 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2367 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2368 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2369 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2370 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2371 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2372 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2373 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2374 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2375 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2376 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2377 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2378 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2379 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2380 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2381 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2382 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2383 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2384 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2385 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2386 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2387 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2388 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2389 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2390 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2391 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2392 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2393 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2394 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2395 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2396 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2397 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2398 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2399 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2400 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2401 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2402 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2403 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2404 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2405 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2406 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2407 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2408 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2409 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2410 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2411 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2412 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2413 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2414 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2415 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2416 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2417 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2418 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2419 
	#R_AARCH64_COPY
 1024

	)

2420 
	#R_AARCH64_GLOB_DAT
 1025

	)

2421 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2422 
	#R_AARCH64_RELATIVE
 1027

	)

2423 
	#R_AARCH64_TLS_DTPMOD64
 1028

	)

2424 
	#R_AARCH64_TLS_DTPREL64
 1029

	)

2425 
	#R_AARCH64_TLS_TPREL64
 1030

	)

2426 
	#R_AARCH64_TLSDESC
 1031

	)

2427 
	#R_AARCH64_IRELATIVE
 1032

	)

2431 
	#R_ARM_NONE
 0

	)

2432 
	#R_ARM_PC24
 1

	)

2434 
	#R_ARM_ABS32
 2

	)

2435 
	#R_ARM_REL32
 3

	)

2436 
	#R_ARM_PC13
 4

	)

2437 
	#R_ARM_ABS16
 5

	)

2438 
	#R_ARM_ABS12
 6

	)

2439 
	#R_ARM_THM_ABS5
 7

	)

2440 
	#R_ARM_ABS8
 8

	)

2441 
	#R_ARM_SBREL32
 9

	)

2442 
	#R_ARM_THM_PC22
 10

	)

2443 
	#R_ARM_THM_PC8
 11

	)

2445 
	#R_ARM_AMP_VCALL9
 12

	)

2446 
	#R_ARM_SWI24
 13

	)

2447 
	#R_ARM_TLS_DESC
 13

	)

2448 
	#R_ARM_THM_SWI8
 14

	)

2449 
	#R_ARM_XPC25
 15

	)

2450 
	#R_ARM_THM_XPC22
 16

	)

2451 
	#R_ARM_TLS_DTPMOD32
 17

	)

2452 
	#R_ARM_TLS_DTPOFF32
 18

	)

2453 
	#R_ARM_TLS_TPOFF32
 19

	)

2454 
	#R_ARM_COPY
 20

	)

2455 
	#R_ARM_GLOB_DAT
 21

	)

2456 
	#R_ARM_JUMP_SLOT
 22

	)

2457 
	#R_ARM_RELATIVE
 23

	)

2458 
	#R_ARM_GOTOFF
 24

	)

2459 
	#R_ARM_GOTPC
 25

	)

2460 
	#R_ARM_GOT32
 26

	)

2461 
	#R_ARM_PLT32
 27

	)

2462 
	#R_ARM_CALL
 28

	)

2463 
	#R_ARM_JUMP24
 29

	)

2465 
	#R_ARM_THM_JUMP24
 30

	)

2466 
	#R_ARM_BASE_ABS
 31

	)

2467 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2468 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2469 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2470 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2471 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2472 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2473 
	#R_ARM_TARGET1
 38

	)

2474 
	#R_ARM_SBREL31
 39

	)

2475 
	#R_ARM_V4BX
 40

	)

2476 
	#R_ARM_TARGET2
 41

	)

2477 
	#R_ARM_PREL31
 42

	)

2478 
	#R_ARM_MOVW_ABS_NC
 43

	)

2479 
	#R_ARM_MOVT_ABS
 44

	)

2480 
	#R_ARM_MOVW_PREL_NC
 45

	)

2481 
	#R_ARM_MOVT_PREL
 46

	)

2482 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2483 
	#R_ARM_THM_MOVT_ABS
 48

	)

2485 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2487 
	#R_ARM_THM_MOVT_PREL
 50

	)

2489 
	#R_ARM_THM_JUMP19
 51

	)

2491 
	#R_ARM_THM_JUMP6
 52

	)

2493 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2495 
	#R_ARM_THM_PC12
 54

	)

2497 
	#R_ARM_ABS32_NOI
 55

	)

2498 
	#R_ARM_REL32_NOI
 56

	)

2499 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2500 
	#R_ARM_ALU_PC_G0
 58

	)

2501 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2502 
	#R_ARM_ALU_PC_G1
 60

	)

2503 
	#R_ARM_ALU_PC_G2
 61

	)

2504 
	#R_ARM_LDR_PC_G1
 62

	)

2505 
	#R_ARM_LDR_PC_G2
 63

	)

2506 
	#R_ARM_LDRS_PC_G0
 64

	)

2508 
	#R_ARM_LDRS_PC_G1
 65

	)

2510 
	#R_ARM_LDRS_PC_G2
 66

	)

2512 
	#R_ARM_LDC_PC_G0
 67

	)

2513 
	#R_ARM_LDC_PC_G1
 68

	)

2514 
	#R_ARM_LDC_PC_G2
 69

	)

2515 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2516 
	#R_ARM_ALU_SB_G0
 71

	)

2517 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2518 
	#R_ARM_ALU_SB_G1
 73

	)

2519 
	#R_ARM_ALU_SB_G2
 74

	)

2520 
	#R_ARM_LDR_SB_G0
 75

	)

2522 
	#R_ARM_LDR_SB_G1
 76

	)

2524 
	#R_ARM_LDR_SB_G2
 77

	)

2526 
	#R_ARM_LDRS_SB_G0
 78

	)

2528 
	#R_ARM_LDRS_SB_G1
 79

	)

2530 
	#R_ARM_LDRS_SB_G2
 80

	)

2532 
	#R_ARM_LDC_SB_G0
 81

	)

2533 
	#R_ARM_LDC_SB_G1
 82

	)

2534 
	#R_ARM_LDC_SB_G2
 83

	)

2535 
	#R_ARM_MOVW_BREL_NC
 84

	)

2537 
	#R_ARM_MOVT_BREL
 85

	)

2539 
	#R_ARM_MOVW_BREL
 86

	)

2541 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2543 
	#R_ARM_THM_MOVT_BREL
 88

	)

2545 
	#R_ARM_THM_MOVW_BREL
 89

	)

2547 
	#R_ARM_TLS_GOTDESC
 90

	)

2548 
	#R_ARM_TLS_CALL
 91

	)

2549 
	#R_ARM_TLS_DESCSEQ
 92

	)

2550 
	#R_ARM_THM_TLS_CALL
 93

	)

2551 
	#R_ARM_PLT32_ABS
 94

	)

2552 
	#R_ARM_GOT_ABS
 95

	)

2553 
	#R_ARM_GOT_PREL
 96

	)

2554 
	#R_ARM_GOT_BREL12
 97

	)

2556 
	#R_ARM_GOTOFF12
 98

	)

2558 
	#R_ARM_GOTRELAX
 99

	)

2559 
	#R_ARM_GNU_VTENTRY
 100

	)

2560 
	#R_ARM_GNU_VTINHERIT
 101

	)

2561 
	#R_ARM_THM_PC11
 102

	)

2562 
	#R_ARM_THM_PC9
 103

	)

2564 
	#R_ARM_TLS_GD32
 104

	)

2566 
	#R_ARM_TLS_LDM32
 105

	)

2568 
	#R_ARM_TLS_LDO32
 106

	)

2570 
	#R_ARM_TLS_IE32
 107

	)

2572 
	#R_ARM_TLS_LE32
 108

	)

2574 
	#R_ARM_TLS_LDO12
 109

	)

2576 
	#R_ARM_TLS_LE12
 110

	)

2578 
	#R_ARM_TLS_IE12GP
 111

	)

2580 
	#R_ARM_ME_TOO
 128

	)

2581 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2582 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2583 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2584 
	#R_ARM_THM_GOT_BREL12
 131

	)

2586 
	#R_ARM_IRELATIVE
 160

	)

2587 
	#R_ARM_RXPC25
 249

	)

2588 
	#R_ARM_RSBREL32
 250

	)

2589 
	#R_ARM_THM_RPC22
 251

	)

2590 
	#R_ARM_RREL32
 252

	)

2591 
	#R_ARM_RABS22
 253

	)

2592 
	#R_ARM_RPC24
 254

	)

2593 
	#R_ARM_RBASE
 255

	)

2595 
	#R_ARM_NUM
 256

	)

2600 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2601 
	#EF_IA_64_ABI64
 0x00000010

	)

2602 
	#EF_IA_64_ARCH
 0xff000000

	)

2605 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2606 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2607 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2608 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2609 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2612 
	#PF_IA_64_NORECOV
 0x80000000

	)

2615 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2616 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2619 
	#SHF_IA_64_SHORT
 0x10000000

	)

2620 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2623 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2624 
	#DT_IA_64_NUM
 1

	)

2627 
	#R_IA64_NONE
 0x00

	)

2628 
	#R_IA64_IMM14
 0x21

	)

2629 
	#R_IA64_IMM22
 0x22

	)

2630 
	#R_IA64_IMM64
 0x23

	)

2631 
	#R_IA64_DIR32MSB
 0x24

	)

2632 
	#R_IA64_DIR32LSB
 0x25

	)

2633 
	#R_IA64_DIR64MSB
 0x26

	)

2634 
	#R_IA64_DIR64LSB
 0x27

	)

2635 
	#R_IA64_GPREL22
 0x2®

	)

2636 
	#R_IA64_GPREL64I
 0x2b

	)

2637 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2638 
	#R_IA64_GPREL32LSB
 0x2d

	)

2639 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2640 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2641 
	#R_IA64_LTOFF22
 0x32

	)

2642 
	#R_IA64_LTOFF64I
 0x33

	)

2643 
	#R_IA64_PLTOFF22
 0x3®

	)

2644 
	#R_IA64_PLTOFF64I
 0x3b

	)

2645 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2646 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2647 
	#R_IA64_FPTR64I
 0x43

	)

2648 
	#R_IA64_FPTR32MSB
 0x44

	)

2649 
	#R_IA64_FPTR32LSB
 0x45

	)

2650 
	#R_IA64_FPTR64MSB
 0x46

	)

2651 
	#R_IA64_FPTR64LSB
 0x47

	)

2652 
	#R_IA64_PCREL60B
 0x48

	)

2653 
	#R_IA64_PCREL21B
 0x49

	)

2654 
	#R_IA64_PCREL21M
 0x4®

	)

2655 
	#R_IA64_PCREL21F
 0x4b

	)

2656 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2657 
	#R_IA64_PCREL32LSB
 0x4d

	)

2658 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2659 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2660 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2661 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2662 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2663 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2664 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2665 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2666 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2667 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2668 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2669 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2670 
	#R_IA64_SECREL32MSB
 0x64

	)

2671 
	#R_IA64_SECREL32LSB
 0x65

	)

2672 
	#R_IA64_SECREL64MSB
 0x66

	)

2673 
	#R_IA64_SECREL64LSB
 0x67

	)

2674 
	#R_IA64_REL32MSB
 0x6¯

	)

2675 
	#R_IA64_REL32LSB
 0x6d

	)

2676 
	#R_IA64_REL64MSB
 0x6ê

	)

2677 
	#R_IA64_REL64LSB
 0x6‡

	)

2678 
	#R_IA64_LTV32MSB
 0x74

	)

2679 
	#R_IA64_LTV32LSB
 0x75

	)

2680 
	#R_IA64_LTV64MSB
 0x76

	)

2681 
	#R_IA64_LTV64LSB
 0x77

	)

2682 
	#R_IA64_PCREL21BI
 0x79

	)

2683 
	#R_IA64_PCREL22
 0x7®

	)

2684 
	#R_IA64_PCREL64I
 0x7b

	)

2685 
	#R_IA64_IPLTMSB
 0x80

	)

2686 
	#R_IA64_IPLTLSB
 0x81

	)

2687 
	#R_IA64_COPY
 0x84

	)

2688 
	#R_IA64_SUB
 0x85

	)

2689 
	#R_IA64_LTOFF22X
 0x86

	)

2690 
	#R_IA64_LDXMOV
 0x87

	)

2691 
	#R_IA64_TPREL14
 0x91

	)

2692 
	#R_IA64_TPREL22
 0x92

	)

2693 
	#R_IA64_TPREL64I
 0x93

	)

2694 
	#R_IA64_TPREL64MSB
 0x96

	)

2695 
	#R_IA64_TPREL64LSB
 0x97

	)

2696 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2697 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2698 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2699 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2700 
	#R_IA64_DTPREL14
 0xb1

	)

2701 
	#R_IA64_DTPREL22
 0xb2

	)

2702 
	#R_IA64_DTPREL64I
 0xb3

	)

2703 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2704 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2705 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2706 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2707 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2712 
	#EF_SH_MACH_MASK
 0x1f

	)

2713 
	#EF_SH_UNKNOWN
 0x0

	)

2714 
	#EF_SH1
 0x1

	)

2715 
	#EF_SH2
 0x2

	)

2716 
	#EF_SH3
 0x3

	)

2717 
	#EF_SH_DSP
 0x4

	)

2718 
	#EF_SH3_DSP
 0x5

	)

2719 
	#EF_SH4AL_DSP
 0x6

	)

2720 
	#EF_SH3E
 0x8

	)

2721 
	#EF_SH4
 0x9

	)

2722 
	#EF_SH2E
 0xb

	)

2723 
	#EF_SH4A
 0xc

	)

2724 
	#EF_SH2A
 0xd

	)

2725 
	#EF_SH4_NOFPU
 0x10

	)

2726 
	#EF_SH4A_NOFPU
 0x11

	)

2727 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2728 
	#EF_SH2A_NOFPU
 0x13

	)

2729 
	#EF_SH3_NOMMU
 0x14

	)

2730 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2731 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2732 
	#EF_SH2A_SH4
 0x17

	)

2733 
	#EF_SH2A_SH3E
 0x18

	)

2736 
	#R_SH_NONE
 0

	)

2737 
	#R_SH_DIR32
 1

	)

2738 
	#R_SH_REL32
 2

	)

2739 
	#R_SH_DIR8WPN
 3

	)

2740 
	#R_SH_IND12W
 4

	)

2741 
	#R_SH_DIR8WPL
 5

	)

2742 
	#R_SH_DIR8WPZ
 6

	)

2743 
	#R_SH_DIR8BP
 7

	)

2744 
	#R_SH_DIR8W
 8

	)

2745 
	#R_SH_DIR8L
 9

	)

2746 
	#R_SH_SWITCH16
 25

	)

2747 
	#R_SH_SWITCH32
 26

	)

2748 
	#R_SH_USES
 27

	)

2749 
	#R_SH_COUNT
 28

	)

2750 
	#R_SH_ALIGN
 29

	)

2751 
	#R_SH_CODE
 30

	)

2752 
	#R_SH_DATA
 31

	)

2753 
	#R_SH_LABEL
 32

	)

2754 
	#R_SH_SWITCH8
 33

	)

2755 
	#R_SH_GNU_VTINHERIT
 34

	)

2756 
	#R_SH_GNU_VTENTRY
 35

	)

2757 
	#R_SH_TLS_GD_32
 144

	)

2758 
	#R_SH_TLS_LD_32
 145

	)

2759 
	#R_SH_TLS_LDO_32
 146

	)

2760 
	#R_SH_TLS_IE_32
 147

	)

2761 
	#R_SH_TLS_LE_32
 148

	)

2762 
	#R_SH_TLS_DTPMOD32
 149

	)

2763 
	#R_SH_TLS_DTPOFF32
 150

	)

2764 
	#R_SH_TLS_TPOFF32
 151

	)

2765 
	#R_SH_GOT32
 160

	)

2766 
	#R_SH_PLT32
 161

	)

2767 
	#R_SH_COPY
 162

	)

2768 
	#R_SH_GLOB_DAT
 163

	)

2769 
	#R_SH_JMP_SLOT
 164

	)

2770 
	#R_SH_RELATIVE
 165

	)

2771 
	#R_SH_GOTOFF
 166

	)

2772 
	#R_SH_GOTPC
 167

	)

2774 
	#R_SH_NUM
 256

	)

2780 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2784 
	#R_390_NONE
 0

	)

2785 
	#R_390_8
 1

	)

2786 
	#R_390_12
 2

	)

2787 
	#R_390_16
 3

	)

2788 
	#R_390_32
 4

	)

2789 
	#R_390_PC32
 5

	)

2790 
	#R_390_GOT12
 6

	)

2791 
	#R_390_GOT32
 7

	)

2792 
	#R_390_PLT32
 8

	)

2793 
	#R_390_COPY
 9

	)

2794 
	#R_390_GLOB_DAT
 10

	)

2795 
	#R_390_JMP_SLOT
 11

	)

2796 
	#R_390_RELATIVE
 12

	)

2797 
	#R_390_GOTOFF32
 13

	)

2798 
	#R_390_GOTPC
 14

	)

2799 
	#R_390_GOT16
 15

	)

2800 
	#R_390_PC16
 16

	)

2801 
	#R_390_PC16DBL
 17

	)

2802 
	#R_390_PLT16DBL
 18

	)

2803 
	#R_390_PC32DBL
 19

	)

2804 
	#R_390_PLT32DBL
 20

	)

2805 
	#R_390_GOTPCDBL
 21

	)

2806 
	#R_390_64
 22

	)

2807 
	#R_390_PC64
 23

	)

2808 
	#R_390_GOT64
 24

	)

2809 
	#R_390_PLT64
 25

	)

2810 
	#R_390_GOTENT
 26

	)

2811 
	#R_390_GOTOFF16
 27

	)

2812 
	#R_390_GOTOFF64
 28

	)

2813 
	#R_390_GOTPLT12
 29

	)

2814 
	#R_390_GOTPLT16
 30

	)

2815 
	#R_390_GOTPLT32
 31

	)

2816 
	#R_390_GOTPLT64
 32

	)

2817 
	#R_390_GOTPLTENT
 33

	)

2818 
	#R_390_PLTOFF16
 34

	)

2819 
	#R_390_PLTOFF32
 35

	)

2820 
	#R_390_PLTOFF64
 36

	)

2821 
	#R_390_TLS_LOAD
 37

	)

2822 
	#R_390_TLS_GDCALL
 38

	)

2824 
	#R_390_TLS_LDCALL
 39

	)

2826 
	#R_390_TLS_GD32
 40

	)

2828 
	#R_390_TLS_GD64
 41

	)

2830 
	#R_390_TLS_GOTIE12
 42

	)

2832 
	#R_390_TLS_GOTIE32
 43

	)

2834 
	#R_390_TLS_GOTIE64
 44

	)

2836 
	#R_390_TLS_LDM32
 45

	)

2838 
	#R_390_TLS_LDM64
 46

	)

2840 
	#R_390_TLS_IE32
 47

	)

2842 
	#R_390_TLS_IE64
 48

	)

2844 
	#R_390_TLS_IEENT
 49

	)

2846 
	#R_390_TLS_LE32
 50

	)

2848 
	#R_390_TLS_LE64
 51

	)

2850 
	#R_390_TLS_LDO32
 52

	)

2852 
	#R_390_TLS_LDO64
 53

	)

2854 
	#R_390_TLS_DTPMOD
 54

	)

2855 
	#R_390_TLS_DTPOFF
 55

	)

2856 
	#R_390_TLS_TPOFF
 56

	)

2858 
	#R_390_20
 57

	)

2859 
	#R_390_GOT20
 58

	)

2860 
	#R_390_GOTPLT20
 59

	)

2861 
	#R_390_TLS_GOTIE20
 60

	)

2863 
	#R_390_IRELATIVE
 61

	)

2865 
	#R_390_NUM
 62

	)

2869 
	#R_CRIS_NONE
 0

	)

2870 
	#R_CRIS_8
 1

	)

2871 
	#R_CRIS_16
 2

	)

2872 
	#R_CRIS_32
 3

	)

2873 
	#R_CRIS_8_PCREL
 4

	)

2874 
	#R_CRIS_16_PCREL
 5

	)

2875 
	#R_CRIS_32_PCREL
 6

	)

2876 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2877 
	#R_CRIS_GNU_VTENTRY
 8

	)

2878 
	#R_CRIS_COPY
 9

	)

2879 
	#R_CRIS_GLOB_DAT
 10

	)

2880 
	#R_CRIS_JUMP_SLOT
 11

	)

2881 
	#R_CRIS_RELATIVE
 12

	)

2882 
	#R_CRIS_16_GOT
 13

	)

2883 
	#R_CRIS_32_GOT
 14

	)

2884 
	#R_CRIS_16_GOTPLT
 15

	)

2885 
	#R_CRIS_32_GOTPLT
 16

	)

2886 
	#R_CRIS_32_GOTREL
 17

	)

2887 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2888 
	#R_CRIS_32_PLT_PCREL
 19

	)

2890 
	#R_CRIS_NUM
 20

	)

2894 
	#R_X86_64_NONE
 0

	)

2895 
	#R_X86_64_64
 1

	)

2896 
	#R_X86_64_PC32
 2

	)

2897 
	#R_X86_64_GOT32
 3

	)

2898 
	#R_X86_64_PLT32
 4

	)

2899 
	#R_X86_64_COPY
 5

	)

2900 
	#R_X86_64_GLOB_DAT
 6

	)

2901 
	#R_X86_64_JUMP_SLOT
 7

	)

2902 
	#R_X86_64_RELATIVE
 8

	)

2903 
	#R_X86_64_GOTPCREL
 9

	)

2905 
	#R_X86_64_32
 10

	)

2906 
	#R_X86_64_32S
 11

	)

2907 
	#R_X86_64_16
 12

	)

2908 
	#R_X86_64_PC16
 13

	)

2909 
	#R_X86_64_8
 14

	)

2910 
	#R_X86_64_PC8
 15

	)

2911 
	#R_X86_64_DTPMOD64
 16

	)

2912 
	#R_X86_64_DTPOFF64
 17

	)

2913 
	#R_X86_64_TPOFF64
 18

	)

2914 
	#R_X86_64_TLSGD
 19

	)

2916 
	#R_X86_64_TLSLD
 20

	)

2918 
	#R_X86_64_DTPOFF32
 21

	)

2919 
	#R_X86_64_GOTTPOFF
 22

	)

2921 
	#R_X86_64_TPOFF32
 23

	)

2922 
	#R_X86_64_PC64
 24

	)

2923 
	#R_X86_64_GOTOFF64
 25

	)

2924 
	#R_X86_64_GOTPC32
 26

	)

2926 
	#R_X86_64_GOT64
 27

	)

2927 
	#R_X86_64_GOTPCREL64
 28

	)

2929 
	#R_X86_64_GOTPC64
 29

	)

2930 
	#R_X86_64_GOTPLT64
 30

	)

2931 
	#R_X86_64_PLTOFF64
 31

	)

2933 
	#R_X86_64_SIZE32
 32

	)

2934 
	#R_X86_64_SIZE64
 33

	)

2935 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2936 
	#R_X86_64_TLSDESC_CALL
 35

	)

2938 
	#R_X86_64_TLSDESC
 36

	)

2939 
	#R_X86_64_IRELATIVE
 37

	)

2940 
	#R_X86_64_RELATIVE64
 38

	)

2942 
	#R_X86_64_NUM
 39

	)

2946 
	#R_MN10300_NONE
 0

	)

2947 
	#R_MN10300_32
 1

	)

2948 
	#R_MN10300_16
 2

	)

2949 
	#R_MN10300_8
 3

	)

2950 
	#R_MN10300_PCREL32
 4

	)

2951 
	#R_MN10300_PCREL16
 5

	)

2952 
	#R_MN10300_PCREL8
 6

	)

2953 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2954 
	#R_MN10300_GNU_VTENTRY
 8

	)

2955 
	#R_MN10300_24
 9

	)

2956 
	#R_MN10300_GOTPC32
 10

	)

2957 
	#R_MN10300_GOTPC16
 11

	)

2958 
	#R_MN10300_GOTOFF32
 12

	)

2959 
	#R_MN10300_GOTOFF24
 13

	)

2960 
	#R_MN10300_GOTOFF16
 14

	)

2961 
	#R_MN10300_PLT32
 15

	)

2962 
	#R_MN10300_PLT16
 16

	)

2963 
	#R_MN10300_GOT32
 17

	)

2964 
	#R_MN10300_GOT24
 18

	)

2965 
	#R_MN10300_GOT16
 19

	)

2966 
	#R_MN10300_COPY
 20

	)

2967 
	#R_MN10300_GLOB_DAT
 21

	)

2968 
	#R_MN10300_JMP_SLOT
 22

	)

2969 
	#R_MN10300_RELATIVE
 23

	)

2970 
	#R_MN10300_TLS_GD
 24

	)

2971 
	#R_MN10300_TLS_LD
 25

	)

2972 
	#R_MN10300_TLS_LDO
 26

	)

2973 
	#R_MN10300_TLS_GOTIE
 27

	)

2975 
	#R_MN10300_TLS_IE
 28

	)

2977 
	#R_MN10300_TLS_LE
 29

	)

2979 
	#R_MN10300_TLS_DTPMOD
 30

	)

2980 
	#R_MN10300_TLS_DTPOFF
 31

	)

2981 
	#R_MN10300_TLS_TPOFF
 32

	)

2982 
	#R_MN10300_SYM_DIFF
 33

	)

2984 
	#R_MN10300_ALIGN
 34

	)

2986 
	#R_MN10300_NUM
 35

	)

2990 
	#R_M32R_NONE
 0

	)

2991 
	#R_M32R_16
 1

	)

2992 
	#R_M32R_32
 2

	)

2993 
	#R_M32R_24
 3

	)

2994 
	#R_M32R_10_PCREL
 4

	)

2995 
	#R_M32R_18_PCREL
 5

	)

2996 
	#R_M32R_26_PCREL
 6

	)

2997 
	#R_M32R_HI16_ULO
 7

	)

2998 
	#R_M32R_HI16_SLO
 8

	)

2999 
	#R_M32R_LO16
 9

	)

3000 
	#R_M32R_SDA16
 10

	)

3001 
	#R_M32R_GNU_VTINHERIT
 11

	)

3002 
	#R_M32R_GNU_VTENTRY
 12

	)

3004 
	#R_M32R_16_RELA
 33

	)

3005 
	#R_M32R_32_RELA
 34

	)

3006 
	#R_M32R_24_RELA
 35

	)

3007 
	#R_M32R_10_PCREL_RELA
 36

	)

3008 
	#R_M32R_18_PCREL_RELA
 37

	)

3009 
	#R_M32R_26_PCREL_RELA
 38

	)

3010 
	#R_M32R_HI16_ULO_RELA
 39

	)

3011 
	#R_M32R_HI16_SLO_RELA
 40

	)

3012 
	#R_M32R_LO16_RELA
 41

	)

3013 
	#R_M32R_SDA16_RELA
 42

	)

3014 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3015 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3016 
	#R_M32R_REL32
 45

	)

3018 
	#R_M32R_GOT24
 48

	)

3019 
	#R_M32R_26_PLTREL
 49

	)

3020 
	#R_M32R_COPY
 50

	)

3021 
	#R_M32R_GLOB_DAT
 51

	)

3022 
	#R_M32R_JMP_SLOT
 52

	)

3023 
	#R_M32R_RELATIVE
 53

	)

3024 
	#R_M32R_GOTOFF
 54

	)

3025 
	#R_M32R_GOTPC24
 55

	)

3026 
	#R_M32R_GOT16_HI_ULO
 56

	)

3028 
	#R_M32R_GOT16_HI_SLO
 57

	)

3030 
	#R_M32R_GOT16_LO
 58

	)

3031 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3033 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3035 
	#R_M32R_GOTPC_LO
 61

	)

3037 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3039 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3041 
	#R_M32R_GOTOFF_LO
 64

	)

3042 
	#R_M32R_NUM
 256

	)

3045 
	#R_MICROBLAZE_NONE
 0

	)

3046 
	#R_MICROBLAZE_32
 1

	)

3047 
	#R_MICROBLAZE_32_PCREL
 2

	)

3048 
	#R_MICROBLAZE_64_PCREL
 3

	)

3049 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3050 
	#R_MICROBLAZE_64
 5

	)

3051 
	#R_MICROBLAZE_32_LO
 6

	)

3052 
	#R_MICROBLAZE_SRO32
 7

	)

3053 
	#R_MICROBLAZE_SRW32
 8

	)

3054 
	#R_MICROBLAZE_64_NONE
 9

	)

3055 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3056 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3057 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3058 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3059 
	#R_MICROBLAZE_GOT_64
 14

	)

3060 
	#R_MICROBLAZE_PLT_64
 15

	)

3061 
	#R_MICROBLAZE_REL
 16

	)

3062 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3063 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3064 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3065 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3066 
	#R_MICROBLAZE_COPY
 21

	)

3067 
	#R_MICROBLAZE_TLS
 22

	)

3068 
	#R_MICROBLAZE_TLSGD
 23

	)

3069 
	#R_MICROBLAZE_TLSLD
 24

	)

3070 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3071 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3072 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3073 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3074 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3077 
	#R_TILEPRO_NONE
 0

	)

3078 
	#R_TILEPRO_32
 1

	)

3079 
	#R_TILEPRO_16
 2

	)

3080 
	#R_TILEPRO_8
 3

	)

3081 
	#R_TILEPRO_32_PCREL
 4

	)

3082 
	#R_TILEPRO_16_PCREL
 5

	)

3083 
	#R_TILEPRO_8_PCREL
 6

	)

3084 
	#R_TILEPRO_LO16
 7

	)

3085 
	#R_TILEPRO_HI16
 8

	)

3086 
	#R_TILEPRO_HA16
 9

	)

3087 
	#R_TILEPRO_COPY
 10

	)

3088 
	#R_TILEPRO_GLOB_DAT
 11

	)

3089 
	#R_TILEPRO_JMP_SLOT
 12

	)

3090 
	#R_TILEPRO_RELATIVE
 13

	)

3091 
	#R_TILEPRO_BROFF_X1
 14

	)

3092 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3093 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3094 
	#R_TILEPRO_IMM8_X0
 17

	)

3095 
	#R_TILEPRO_IMM8_Y0
 18

	)

3096 
	#R_TILEPRO_IMM8_X1
 19

	)

3097 
	#R_TILEPRO_IMM8_Y1
 20

	)

3098 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3099 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3100 
	#R_TILEPRO_IMM16_X0
 23

	)

3101 
	#R_TILEPRO_IMM16_X1
 24

	)

3102 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3103 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3104 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3105 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3106 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3107 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3108 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3109 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3110 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3111 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3112 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3113 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3114 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3115 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3116 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3117 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3118 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3119 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3120 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3121 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3122 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3123 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3124 
	#R_TILEPRO_MMSTART_X0
 47

	)

3125 
	#R_TILEPRO_MMEND_X0
 48

	)

3126 
	#R_TILEPRO_MMSTART_X1
 49

	)

3127 
	#R_TILEPRO_MMEND_X1
 50

	)

3128 
	#R_TILEPRO_SHAMT_X0
 51

	)

3129 
	#R_TILEPRO_SHAMT_X1
 52

	)

3130 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3131 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3132 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3134 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3135 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3136 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3137 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3138 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3139 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3140 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3141 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3142 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3143 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3144 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3145 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3146 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3147 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3148 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3149 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3150 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3151 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3152 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3153 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3154 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3155 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3156 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3157 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3158 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3159 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3160 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3161 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3162 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3163 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3164 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3165 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3166 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3168 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3169 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3171 
	#R_TILEPRO_NUM
 130

	)

3175 
	#R_TILEGX_NONE
 0

	)

3176 
	#R_TILEGX_64
 1

	)

3177 
	#R_TILEGX_32
 2

	)

3178 
	#R_TILEGX_16
 3

	)

3179 
	#R_TILEGX_8
 4

	)

3180 
	#R_TILEGX_64_PCREL
 5

	)

3181 
	#R_TILEGX_32_PCREL
 6

	)

3182 
	#R_TILEGX_16_PCREL
 7

	)

3183 
	#R_TILEGX_8_PCREL
 8

	)

3184 
	#R_TILEGX_HW0
 9

	)

3185 
	#R_TILEGX_HW1
 10

	)

3186 
	#R_TILEGX_HW2
 11

	)

3187 
	#R_TILEGX_HW3
 12

	)

3188 
	#R_TILEGX_HW0_LAST
 13

	)

3189 
	#R_TILEGX_HW1_LAST
 14

	)

3190 
	#R_TILEGX_HW2_LAST
 15

	)

3191 
	#R_TILEGX_COPY
 16

	)

3192 
	#R_TILEGX_GLOB_DAT
 17

	)

3193 
	#R_TILEGX_JMP_SLOT
 18

	)

3194 
	#R_TILEGX_RELATIVE
 19

	)

3195 
	#R_TILEGX_BROFF_X1
 20

	)

3196 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3197 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3198 
	#R_TILEGX_IMM8_X0
 23

	)

3199 
	#R_TILEGX_IMM8_Y0
 24

	)

3200 
	#R_TILEGX_IMM8_X1
 25

	)

3201 
	#R_TILEGX_IMM8_Y1
 26

	)

3202 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3203 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3204 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3205 
	#R_TILEGX_MMSTART_X0
 30

	)

3206 
	#R_TILEGX_MMEND_X0
 31

	)

3207 
	#R_TILEGX_SHAMT_X0
 32

	)

3208 
	#R_TILEGX_SHAMT_X1
 33

	)

3209 
	#R_TILEGX_SHAMT_Y0
 34

	)

3210 
	#R_TILEGX_SHAMT_Y1
 35

	)

3211 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3212 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3213 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3214 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3215 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3216 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3217 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3218 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3219 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3220 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3221 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3222 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3223 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3224 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3225 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3226 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3227 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3228 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3229 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3230 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3231 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3232 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3233 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3234 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3235 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3236 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3237 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3238 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3239 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3240 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3241 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3242 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3243 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3244 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3245 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3246 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3247 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3248 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3249 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3250 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3251 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3252 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3253 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3254 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3255 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3256 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3257 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3258 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3259 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3260 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3261 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3262 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3263 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3264 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3266 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3267 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3268 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3269 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3270 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3271 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3272 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3273 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3274 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3275 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3276 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3277 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3279 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3280 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3281 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3282 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3283 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3284 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3285 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3286 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3287 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3288 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3289 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3290 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3291 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3292 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3293 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3294 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3296 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3297 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3299 
	#R_TILEGX_NUM
 130

	)

3302 
	g__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

167 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

169 #ifde‡
__USE_XOPEN


170 #ifde‡
__GNUC__


171 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

174 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

179 #ifde‡
__USE_BSD


186 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

189 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

192 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

195 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 #ifde‡
__USE_MISC


200 
	#NSIG
 
_NSIG


	)

203 #ifde‡
__USE_GNU


204 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

208 #ifde‡
__USE_BSD


209 
__sigh™dÀr_t
 
	tsig_t
;

212 #ifde‡
__USE_POSIX


215 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

228 
__THROW
 
	`__n⁄nuŒ
 ((1));

230 #ifde‡
__USE_GNU


232 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

236 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

239 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

240 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

245 
	~<bôs/siga˘i⁄.h
>

248 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

249 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

256 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

259 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

260 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

263 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

270 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 #ifde‡
__USE_POSIX199309


278 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

279 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

286 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

288 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

289 
	`__n⁄nuŒ
 ((1));

293 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

294 
__THROW
;

299 #ifde‡
__USE_BSD


303 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

304 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

307 
	ssigvec


309 
__sigh™dÀr_t
 
sv_h™dÀr
;

310 
sv_mask
;

312 
sv_Êags
;

313 
	#sv_⁄°ack
 
sv_Êags


	)

317 
	#SV_ONSTACK
 (1 << 0)

	)

318 
	#SV_INTERRUPT
 (1 << 1)

	)

319 
	#SV_RESETHAND
 (1 << 2)

	)

327 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

328 
sigvec
 *
__ovec
Ë
__THROW
;

332 
	~<bôs/sigc⁄ãxt.h
>

335 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

340 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


341 
	#__√ed_size_t


	)

342 
	~<°ddef.h
>

347 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

349 
	~<bôs/sig°ack.h
>

350 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


352 
	~<sys/uc⁄ãxt.h
>

358 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

359 
__THROW
 
__©åibuã_dïªˇãd__
;

363 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

364 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

368 #ifde‡
__USE_XOPEN_EXTENDED


372 
	$sighﬁd
 (
__sig
Ë
__THROW
;

375 
	$sigªl£
 (
__sig
Ë
__THROW
;

378 
	$sigign‹e
 (
__sig
Ë
__THROW
;

381 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

384 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


387 
	~<bôs/±hªadty≥s.h
>

388 
	~<bôs/sigthªad.h
>

395 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

397 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

401 
__END_DECLS


	@/usr/include/syscall.h

1 
	~<sys/sysˇŒ.h
>

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@
1
.
1
/usr/include
344
8671
arch/mips/include/current.h
arch/mips/include/elf.h
arch/mips/include/kern/endian.h
arch/mips/include/kern/regdefs.h
arch/mips/include/kern/setjmp.h
arch/mips/include/kern/signal.h
arch/mips/include/kern/types.h
arch/mips/include/membar.h
arch/mips/include/specialreg.h
arch/mips/include/spinlock.h
arch/mips/include/thread.h
arch/mips/include/tlb.h
arch/mips/include/trapframe.h
arch/mips/include/types.h
arch/mips/include/vm.h
arch/mips/locore/cache-mips161.S
arch/mips/locore/exception-mips1.S
arch/mips/locore/trap.c
arch/mips/syscall/syscall.c
arch/mips/thread/cpu.c
arch/mips/thread/switch.S
arch/mips/thread/switchframe.c
arch/mips/thread/switchframe.h
arch/mips/thread/thread_machdep.c
arch/mips/thread/threadstart.S
arch/mips/vm/dumbvm.c
arch/mips/vm/ram.c
arch/mips/vm/tlb-mips161.S
arch/sys161/dev/lamebus_machdep.c
arch/sys161/include/bus.h
arch/sys161/include/maxcpus.h
arch/sys161/main/start.S
compile/ASST1/.depend.__printf.c
compile/ASST1/autoconf.c
compile/ASST1/autoconf.h
compile/ASST1/opt-dumbvm.h
compile/ASST1/opt-hangman.h
compile/ASST1/opt-net.h
compile/ASST1/opt-netfs.h
compile/ASST1/opt-noasserts.h
compile/ASST1/opt-semfs.h
compile/ASST1/opt-sfs.h
compile/ASST1/opt-synchprobs.h
compile/DUMBVM/.depend.__printf.c
compile/DUMBVM/.depend.adddi3.c
compile/DUMBVM/.depend.anddi3.c
compile/DUMBVM/.depend.array.c
compile/DUMBVM/.depend.arraytest.c
compile/DUMBVM/.depend.ashldi3.c
compile/DUMBVM/.depend.ashrdi3.c
compile/DUMBVM/.depend.atoi.c
compile/DUMBVM/.depend.autoconf.c
compile/DUMBVM/.depend.beep.c
compile/DUMBVM/.depend.beep_ltimer.c
compile/DUMBVM/.depend.bitmap.c
compile/DUMBVM/.depend.bitmaptest.c
compile/DUMBVM/.depend.bswap.c
compile/DUMBVM/.depend.buf.c
compile/DUMBVM/.depend.bzero.c
compile/DUMBVM/.depend.cache-mips161.S
compile/DUMBVM/.depend.clock.c
compile/DUMBVM/.depend.cmpdi2.c
compile/DUMBVM/.depend.con_lser.c
compile/DUMBVM/.depend.console.c
compile/DUMBVM/.depend.copyinout.c
compile/DUMBVM/.depend.cpu.c
compile/DUMBVM/.depend.device.c
compile/DUMBVM/.depend.devnull.c
compile/DUMBVM/.depend.divdi3.c
compile/DUMBVM/.depend.dumbvm.c
compile/DUMBVM/.depend.emu.c
compile/DUMBVM/.depend.emu_att.c
compile/DUMBVM/.depend.exception-mips1.S
compile/DUMBVM/.depend.fstest.c
compile/DUMBVM/.depend.iordi3.c
compile/DUMBVM/.depend.kgets.c
compile/DUMBVM/.depend.kmalloc.c
compile/DUMBVM/.depend.kmalloctest.c
compile/DUMBVM/.depend.kprintf.c
compile/DUMBVM/.depend.lamebus.c
compile/DUMBVM/.depend.lamebus_machdep.c
compile/DUMBVM/.depend.lhd.c
compile/DUMBVM/.depend.lhd_att.c
compile/DUMBVM/.depend.loadelf.c
compile/DUMBVM/.depend.lrandom.c
compile/DUMBVM/.depend.lrandom_att.c
compile/DUMBVM/.depend.lser.c
compile/DUMBVM/.depend.lser_att.c
compile/DUMBVM/.depend.lshldi3.c
compile/DUMBVM/.depend.lshrdi3.c
compile/DUMBVM/.depend.ltimer.c
compile/DUMBVM/.depend.ltimer_att.c
compile/DUMBVM/.depend.ltrace.c
compile/DUMBVM/.depend.ltrace_att.c
compile/DUMBVM/.depend.main.c
compile/DUMBVM/.depend.memcpy.c
compile/DUMBVM/.depend.memmove.c
compile/DUMBVM/.depend.memset.c
compile/DUMBVM/.depend.menu.c
compile/DUMBVM/.depend.misc.c
compile/DUMBVM/.depend.moddi3.c
compile/DUMBVM/.depend.muldi3.c
compile/DUMBVM/.depend.negdi2.c
compile/DUMBVM/.depend.notdi2.c
compile/DUMBVM/.depend.proc.c
compile/DUMBVM/.depend.qdivrem.c
compile/DUMBVM/.depend.ram.c
compile/DUMBVM/.depend.random.c
compile/DUMBVM/.depend.random_lrandom.c
compile/DUMBVM/.depend.rtclock.c
compile/DUMBVM/.depend.rtclock_ltimer.c
compile/DUMBVM/.depend.runprogram.c
compile/DUMBVM/.depend.semfs_fsops.c
compile/DUMBVM/.depend.semfs_obj.c
compile/DUMBVM/.depend.semfs_vnops.c
compile/DUMBVM/.depend.semunit.c
compile/DUMBVM/.depend.setjmp.S
compile/DUMBVM/.depend.sfs_balloc.c
compile/DUMBVM/.depend.sfs_bmap.c
compile/DUMBVM/.depend.sfs_dir.c
compile/DUMBVM/.depend.sfs_fsops.c
compile/DUMBVM/.depend.sfs_inode.c
compile/DUMBVM/.depend.sfs_io.c
compile/DUMBVM/.depend.sfs_jphys.c
compile/DUMBVM/.depend.sfs_vnops.c
compile/DUMBVM/.depend.snprintf.c
compile/DUMBVM/.depend.spinlock.c
compile/DUMBVM/.depend.spl.c
compile/DUMBVM/.depend.start.S
compile/DUMBVM/.depend.strcat.c
compile/DUMBVM/.depend.strchr.c
compile/DUMBVM/.depend.strcmp.c
compile/DUMBVM/.depend.strcpy.c
compile/DUMBVM/.depend.strlen.c
compile/DUMBVM/.depend.strrchr.c
compile/DUMBVM/.depend.strtok_r.c
compile/DUMBVM/.depend.subdi3.c
compile/DUMBVM/.depend.switch.S
compile/DUMBVM/.depend.switchframe.c
compile/DUMBVM/.depend.synch.c
compile/DUMBVM/.depend.synchtest.c
compile/DUMBVM/.depend.syscall.c
compile/DUMBVM/.depend.thread.c
compile/DUMBVM/.depend.thread_machdep.c
compile/DUMBVM/.depend.threadlist.c
compile/DUMBVM/.depend.threadlisttest.c
compile/DUMBVM/.depend.threadstart.S
compile/DUMBVM/.depend.threadtest.c
compile/DUMBVM/.depend.time.c
compile/DUMBVM/.depend.time_syscalls.c
compile/DUMBVM/.depend.tlb-mips161.S
compile/DUMBVM/.depend.trap.c
compile/DUMBVM/.depend.tt3.c
compile/DUMBVM/.depend.ucmpdi2.c
compile/DUMBVM/.depend.udivdi3.c
compile/DUMBVM/.depend.uio.c
compile/DUMBVM/.depend.umoddi3.c
compile/DUMBVM/.depend.vfscwd.c
compile/DUMBVM/.depend.vfsfail.c
compile/DUMBVM/.depend.vfslist.c
compile/DUMBVM/.depend.vfslookup.c
compile/DUMBVM/.depend.vfspath.c
compile/DUMBVM/.depend.vnode.c
compile/DUMBVM/.depend.xordi3.c
compile/DUMBVM/autoconf.c
compile/DUMBVM/autoconf.h
compile/DUMBVM/opt-dumbvm.h
compile/DUMBVM/opt-hangman.h
compile/DUMBVM/opt-net.h
compile/DUMBVM/opt-netfs.h
compile/DUMBVM/opt-noasserts.h
compile/DUMBVM/opt-semfs.h
compile/DUMBVM/opt-sfs.h
compile/DUMBVM/opt-synchprobs.h
compile/DUMBVM/vers.c
dev/generic/beep.c
dev/generic/beep.h
dev/generic/console.c
dev/generic/console.h
dev/generic/random.c
dev/generic/random.h
dev/generic/rtclock.c
dev/generic/rtclock.h
dev/lamebus/beep_ltimer.c
dev/lamebus/con_lscreen.c
dev/lamebus/con_lser.c
dev/lamebus/emu.c
dev/lamebus/emu.h
dev/lamebus/emu_att.c
dev/lamebus/lamebus.c
dev/lamebus/lamebus.h
dev/lamebus/lhd.c
dev/lamebus/lhd.h
dev/lamebus/lhd_att.c
dev/lamebus/lnet.c
dev/lamebus/lnet_att.c
dev/lamebus/lrandom.c
dev/lamebus/lrandom.h
dev/lamebus/lrandom_att.c
dev/lamebus/lscreen.c
dev/lamebus/lscreen.h
dev/lamebus/lscreen_att.c
dev/lamebus/lser.c
dev/lamebus/lser.h
dev/lamebus/lser_att.c
dev/lamebus/ltimer.c
dev/lamebus/ltimer.h
dev/lamebus/ltimer_att.c
dev/lamebus/ltrace.c
dev/lamebus/ltrace.h
dev/lamebus/ltrace_att.c
dev/lamebus/random_lrandom.c
dev/lamebus/rtclock_ltimer.c
fs/semfs/semfs.h
fs/semfs/semfs_fsops.c
fs/semfs/semfs_obj.c
fs/semfs/semfs_vnops.c
fs/sfs/sfs_balloc.c
fs/sfs/sfs_bmap.c
fs/sfs/sfs_dir.c
fs/sfs/sfs_fsops.c
fs/sfs/sfs_inode.c
fs/sfs/sfs_io.c
fs/sfs/sfs_jphys.c
fs/sfs/sfs_vnops.c
fs/sfs/sfsprivate.h
include/addrspace.h
include/array.h
include/bitmap.h
include/buf.h
include/cdefs.h
include/clock.h
include/copyinout.h
include/cpu.h
include/current.h
include/device.h
include/elf.h
include/emufs.h
include/endian.h
include/fs.h
include/hangman.h
include/kern/endian.h
include/kern/errmsg.h
include/kern/errno.h
include/kern/fcntl.h
include/kern/ioctl.h
include/kern/iovec.h
include/kern/limits.h
include/kern/reboot.h
include/kern/resource.h
include/kern/seek.h
include/kern/sfs.h
include/kern/signal.h
include/kern/socket.h
include/kern/stat.h
include/kern/stattypes.h
include/kern/syscall.h
include/kern/time.h
include/kern/types.h
include/kern/unistd.h
include/kern/wait.h
include/lib.h
include/limits.h
include/mainbus.h
include/membar.h
include/proc.h
include/setjmp.h
include/sfs.h
include/signal.h
include/spinlock.h
include/spl.h
include/stat.h
include/stdarg.h
include/synch.h
include/syscall.h
include/test.h
include/thread.h
include/threadlist.h
include/threadprivate.h
include/types.h
include/uio.h
include/version.h
include/vfs.h
include/vm.h
include/vnode.h
include/wchan.h
lib/array.c
lib/bitmap.c
lib/bswap.c
lib/kgets.c
lib/kprintf.c
lib/misc.c
lib/time.c
lib/uio.c
main/main.c
main/menu.c
proc/proc.c
synchprobs/airballoon.c
synchprobs/common.c
synchprobs/common.h
synchprobs/elves.c
syscall/loadelf.c
syscall/runprogram.c
syscall/time_syscalls.c
test/arraytest.c
test/bitmaptest.c
test/fstest.c
test/kmalloctest.c
test/nettest.c
test/semunit.c
test/synchtest.c
test/threadlisttest.c
test/threadtest.c
test/tt3.c
thread/clock.c
thread/hangman.c
thread/spinlock.c
thread/spl.c
thread/synch.c
thread/thread.c
thread/threadlist.c
vfs/buf.c
vfs/device.c
vfs/devnull.c
vfs/vfscwd.c
vfs/vfsfail.c
vfs/vfslist.c
vfs/vfslookup.c
vfs/vfspath.c
vfs/vnode.c
vm/addrspace.c
vm/copyinout.c
vm/kmalloc.c
/usr/include/elf.h
/usr/include/endian.h
/usr/include/limits.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/syscall.h
/usr/include/features.h
/usr/include/stdint.h
/usr/include/time.h
/usr/include/stdc-predef.h
/usr/include/xlocale.h
